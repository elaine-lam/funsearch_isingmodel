{,{"prompt":"#score: -0.53650787037037","completion":"def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)"}
,{"prompt":"#score: -0.3524118827160497","completion":"def priority(N, h, J):
  J_flat = J.reshape(-1)
  H = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i * N + j) % (N ** 2)
      total_spin = 0
      for k in range(3):
        neighbor_site = ((i + ((k - 1) % 2) - 1) % N * N + j) % (N ** 2)
        if J_flat[neighbor_site] > 0:
          total_spin += h[i][j]
      H[site, 0] = total_spin
      H[site, 1] = -total_spin
  
  return H.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, -1))
      else:
        priority.append((total_spin, 1))
  return np.array(priority)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = sum([state[(i//N)][(i%N)+(k-(k+1)%2 - 1)] % N for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities.append((total_spin, 1))
    else:
      priorities.append((-total_spin, -1))
  return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = np.ones((N,N))
  priorities = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin = sum([state[i][k] if (i+k)%2 == (j+1)%2 else -state[i][k] for k in range(N)])
        priorities[i*N+j,0] = total_spin
        priorities[i*N+j,1] = 0
      else:
        total_spin = sum([state[i][k] if (i+k)%2 != (j+1)%2 else -state[i][k] for k in range(N)])
        priorities[i*N+j,0] = -total_spin
        priorities[i*N+j,1] = 1

  return priorities.astype(int)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin = [0,0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[spin] += state[site][j]
      priorities[i*N+j] = total_spin
  return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority = [[float('inf'), float('-inf')] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      total_spin = sum(state[i][k] for k in range(N))
      if h[i][j] > 0:
        priority[i*N+j] = [total_spin, float('-inf')]
      else:
        priority[i*N+j] = [-total_spin, float('inf')]
  return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [list(x) for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
priorities = []
for i in range(N):
    total_spin = [0,0]
    for j in range(N):
        site = (i + ((j-1)%N - N//2)) % N
        for k in [(0,-1),(0,1),(-1,0),(1,0)]:
            if J[k[0]][site][k[1]] > 0:
                total_spin[0] += J[k[0]][site][k[1]]
            else:
                total_spin[1] += -J[k[0]][site][k[1]]
    for j in range(N):
        if h[i][j] > 0:
            priorities.append((total_spin[0],1))
        else:
            priorities.append((-total_spin[1],-1))
return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    for j in range(N):
      total_spin = sum([J[i][k][max(0,j-k)%N] * state[max(0,i-k)][min(N-1,j-k)%N] for k in range(max(0,j-N))])
      if h[i][j] > 0:
          priorities.append((total_spin, -1))
      else:
          priorities.append((total_spin, 1))
  return priorities  "}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        total_spin = [0, 0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j][0] = total_spin[0]
        else:
            priority_total[j][1] = -total_spin[0]
    return priority_total"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      total_spin = np.zeros((N,N), dtype=int)
      priorities = []
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%2 - 1)) % N
              total_spin[i][j] += h[site][j]
              if h[i][j] > 0:
                  priority_total = np.zeros((N,2), dtype=int)
                  for k in range(3):
                      site = (i + ((k-1)%2 - 1)) % N
                      total_spin[i][j] += state[site][j]
                  priorities.append((-total_spin[i][j], -h[i][j]))
              else:
                  priority_total = np.zeros((N,2), dtype=int)
                  for k in range(3):
                      site = (i + ((k-1)%2 - 1)) % N
                      total_spin[i][j] += state[site][j]
                  priorities.append((-total_spin[i][j], h[i][j]))
      return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = np.zeros((N,N,2), dtype=int)
  for i in range(N):
      total_spin = np.zeros(2)
      for j in range(N):
          site = (i + ((j-1)%2 - 1)) % N
          if h[i][j] > 0:
              priority_total[i][j][0] += 1
              priority_total[i][j][1] -= 1
          else:
              priority_total[i][j][0] -= 1
              priority_total[i][j][1] += 1
  return np.array(priority_total).reshape((N*N,2))"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      priority = [[float('inf') for _ in range(2)] for _ in range(N2)]
      total_spin = np.zeros((N,2), dtype=int)
      
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin[site][0] += h[i][j]
              
              if h[i][j] > 0:
                  priority[i*N+j][0] = total_spin[site][0]
                  priority[i*N+j][1] = -float('inf')
              else:
                  priority[i*N+j][0] = -float('inf')
                  priority[i*N+j][1] = -total_spin[site][0]
                  
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      priority = [[0 for _ in range(2)] for _ in range(N2)]
      total_spin = np.zeros((N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin[i][0] += h[site][j]
              if h[i][j] > 0:
                  priority[i*N+j] = [total_spin[i][0], 0]
              else:
                  priority[i*N+j] = [-total_spin[i][0], 1]
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority = [[float('-inf') for _ in range(2)] for i in range(N*N)]
      
      for i in range(N):
          for j in range(N):
              total_spin = 0
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += state[site][j]
              if h[i][j] > 0:
                  priority[i*N+j][0] = total_spin
              else:
                  priority[i*N+j][1] = -total_spin
                  
      return [list(x) for x in priority]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      priority = [[0 for _ in range(2)] for _ in range(N2)]
      total_spin = np.zeros((N,2), dtype=int)
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      for i in range(N):
          for j in range(N):
              spin = -1 if h[i][j] > 0 else 1
              site = (i + ((j-1)%N - 1)) % N
              total_spin[site][spin==1] += 1
      priority_total = np.zeros((N,2), dtype=int)
      for j in range(N):
          if h[i][j] > 0:
              priority_total[j][0] = total_spin[j][0]
          else:
              priority_total[j][1] = -total_spin[j][0]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              if h[i][j] > 0:
                  priority[i*N+j] = [x+total_spin[site][1] for x in priority_total[j]]
              else:
                  priority[i*N+j] = [-x-total_spin[site][0] for x in priority_total[j]]
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      total_spin = [0,0]
      for i in range(N):
          for j in range(N):
              site = (i + ((2)%2 - 1)) % N
              total_spin[0] += state[i][j]
              total_spin[1] -= state[i][j]
      for i in range(N*N):
          if h[int(i/N)][int(i%N)] > 0:
              priorities.append([total_spin[0], total_spin[1]])
          else:
              priorities.append([-total_spin[0], -total_spin[1]])
      return [[priorities[i][0]//100000, priorities[i][1]%2] for i in range(N*N)]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      priority_total = [[0 for _ in range(2)] for _ in range(N2)]
      for i in range(N):
          for j in range(N):
              total_spin = 0
              site = (i + ((j-1)%N - 1)) % N
              if h[i][j] > 0:
                  spin = 1
              else:
                  spin = -1
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += spin
              priority_total[i*N+j] = [total_spin, -total_spin]
      return priority_total"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      priority = []
      for i in range(N):
          for j in range(N):
              total_spin = 0
              site = (i + ((j-1)%2 - 1)) % N
              total_spin += h[site][j]
              if h[i][j] > 0:
                  priority.append((total_spin, -1))
              else:
                  priority.append((total_spin, 1))
      for j in range(N):
          if sum(h[i][j] for i in range(N)) > 0:
              priority_total = [(sum(h[i][j] for i in range(N)), 1) for _ in range(N)]
          else:
              priority_total = [(-sum(h[i][j] for i in range(N)), -1) for _ in range(N)]
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[1] += state[site][j]
                else:
                    total_spin[0] -= state[site][j]
            priorities.append(total_spin)
    return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      total_spin = np.zeros((N,N), dtype=int)
      for i in range(N):
          for j in range(N):
              total_spin[i][j] += h[i][j]
              if h[i][j] > 0:
                  total_spin[i][j] += 1
              else:
                  total_spin[i][j] -= 1
      priority_total = np.zeros((N*N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  priority_total[i*N+j][0] = total_spin[i][j]
              else:
                  priority_total[i*N+j][1] = -total_spin[i][j]
      return priority_total.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
              priorities.append([total_spin, -1 if h[i][j] > 0 else 1])
      return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority = [[float('-inf'),float('-inf')] for _ in range(N**2)]
      
      for i in range(N):
          for j in range(N):
              total_spin = 0
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += state[site][j]
              if h[i][j] > 0:
                  priority[i*N+j][0] = total_spin
              else:
                  priority[i*N+j][1] = -total_spin
      
      for j in range(N):
          for i in range(N):
              if h[i][j] > 0:
                  priority[j*N+i][0] += state[i][j]
              else:
                  priority[j*N+i][1] += -state[i][j]
      
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              if h[i][j] > 0:
                  total_spin[i*N+j][0] += 1
                  total_spin[i*N+j][1] -= 1
              else:
                  total_spin[i*N+j][0] -= 1
                  total_spin[i*N+j][1] += 1
      return total_spin"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          total_spin = np.zeros((N,2), dtype=int)
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin[site][0] += state[i][j]
              if state[i][j] == 1:
                  priorities.append((-total_spin[site][0], 1))
              else:
                  priorities.append((total_spin[site][0], -1))
      return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = np.zeros((N,N), dtype=int)
      total_spin = np.zeros((2,N*N), dtype=int)
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  spin = -1
              else:
                  spin = 1
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  state[site][j] += spin
              total_spin[0, i*N+j] += h[i][j]
              if h[i][j] > 0:
                  total_spin[0, i*N+j] += 1
              else:
                  total_spin[0, i*N+j] -= 1
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin[1, i*N+j] += state[site][j]
      return total_spin.T.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = [0,0]
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  if h[i][j] > 0:
                      total_spin[1] += state[site][j]
                  else:
                      total_spin[0] -= state[site][j]
              priorities.append(total_spin)
      return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = [0, 0]
              for k in range(4):
                  site_i = (i + ((k-1)%2 - 1)) % N
                  site_j = (j + ((k-1)%3 - 1)) % N
                  if h[site_i][site_j] > 0:
                      total_spin[1] += state[i][j]
                  else:
                      total_spin[0] -= state[i][j]
              priorities.append(total_spin)
      return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  priority = [[0 for _ in range(2)] for _ in range(N2)]
  total_spin = np.zeros((N,2), dtype=int)
  for i in range(N):
      for j in range(N):
          site = (i + ((j-1)%N - 1)) % N
          spin = -1 if h[i][j] > 0 else 1
          total_spin[site][spin==1] += 1
  for i in range(N):
      for j in range(N):
          priority[i*N+j] = [total_spin[i%N][1], -total_spin[i%N][0]] if h[i][j] > 0 else [-total_spin[i%N][0], total_spin[i%N][1]]
  return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      priority_total = np.zeros((N2, 2), dtype=int)
      
      for i in range(N):
          for j in range(N):
              total_spin = 0
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  if h[site][j] > 0:
                      total_spin += 1
                  else:
                      total_spin -= 1
              priority_total[i*N+j] = [total_spin, -total_spin]
      
      return priority_total"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  for k in range(3):
                      site = (i + ((k-1)%2 - 1)) % N
                      total_spin[i*N+j][0] += 1
              else:
                  for k in range(3):
                      site = (i + ((k-1)%2 - 1)) % N
                      total_spin[i*N+j][1] += 1
      return [[x, y] for x, y in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
      N2 = N*N
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority = [[float('inf'), float('-inf')] for _ in range(N2)]
      
      for i in range(N):
          total_spin = [0,0]
          for j in range(N):
              site = (i + ((j-1)%2 - 1)) % N
              total_spin[0] += h[site][j]
              if h[i][j] > 0:
                  priority[i*N+j] = [total_spin[0], float('-inf')]
              else:
                  priority[i*N+j] = [-total_spin[0], float('inf')]
      return priority"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = [0,0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
      priority_total[i*N+j] = total_spin
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        site_nbr = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[i*N+j][spin==1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site_nbr][j]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priority_total[i] = [total_spin[i][0], 0]
            else:
                priority_total[i] = [-1*total_spin[i][0], 1]
        return priority_total"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site_nbr = (i + ((j-1)%2 - 1)) % N
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    site_nbr = (i + ((j-1)%2 - 1)) % N
                    priority_total[i*N+j][0] -= 1
        return [[x, y] for x, y in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(4):
    if k == 0:
      site_nbr = lambda i,j: (i + ((j-1)%N - 1)) % N
    elif k == 1:
      site_nbr = lambda i,j: (i + ((j+1)%N - 1)) % N
    elif k == 2:
      site_nbr = lambda i,j: (i + ((i+1)%N - 1)) % N
    else:
      site_nbr = lambda i,j: (i + ((i-1)%N - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin += h[site_nbr(i,j)][j]
  if sum(sum(h[i][j] for j in range(N)) for i in range(N)) > 0:
    total_spin += 1
  else:
    total_spin -= 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin
    else:
      priority_total[i][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x, y] for x, y in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[float(0) for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = np.zeros((N*N,2), dtype=float)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N,2), dtype=float)
  for k in range(N//2):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    priority_total[i*N+j][0] += total_spin[site_nbr][0]
    if h[i][j] > 0:
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][1] += 1
  return [list(x) for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site = (i // N + ((i % N) - 1) % N) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(x) for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site][j]
        total_spin[i*N+j][1] -= h[site][j]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= h[site][j]
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1) % N - N//2)) % N
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N2):
    site = (i % 2) * ((i // N) + (N // 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = [0,0]
  
  def get_priority(site):
    if h[site//N][site%N] > 0:
      return [total_spin[1], -total_spin[0]]
    else:
      return [-total_spin[1], total_spin[0]]
  
  for i in range(N*N):
    site = (i + ((i%N)-1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = [0, 0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
      priority_total[i][j] = total_spin
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority = np.column_stack((total_spin[:, 0], -total_spin[:, 1]))
  return priority.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - 1)) % N
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
        priority_total[i*N+j][1] = -1*total_spin[site_nbr][1]
      else:
        site_nbr = (i + ((j+1)%N - 1)) % N
        priority_total[i*N+j][0] = -1*total_spin[site_nbr][0]
        priority_total[i*N+j][1] = total_spin[site_nbr][1]
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if i_offset == 0 and j_offset == 0:
        continue
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  site = lambda i, j: (i + ((j-1)%2 - 1)) % N
  priority_total = [[[float('-inf'), float('-inf')] for _ in range(N)] for _ in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(-1, 2):
        site = (i + k) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[1] -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = 0
  site_priorities = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for k in range(N):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          site_priorities[i*N+j][0] = total_spin
        else:
          site_priorities[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in site_priorities]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i][0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j, 0] += 1
        priority_total[i*N+j, 1] -= 1
      else:
        priority_total[i*N+j, 0] -= 1
  return priority_total.tolist()"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
  return total_spin"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = [(i + ((k-1)%2 - 1)) % N for k in [0,1]]
      total_spin = sum(s for s in (state[i][j], state[site_nbr[0]][j], state[site_nbr[1]][j]))
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -1*total_spin
  return [list(x) for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = sum(J[:, i*N+j:(site_nbr+1)*N].flatten()) - sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
        priority_total[i*N+j][0] = total_spin
      else:
        total_spin = -sum(J[:, i*N+j:(site_nbr+1)*N].flatten()) + sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr][spin==1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[site_nbr][1]
    else:
      priority_total[i][1] = -1*total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = np.zeros((2,N**2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[0, i*N+j] += 1
        total_spin[1, i*N+j] -= 1
      else:
        total_spin[0, i*N+j] -= 1
        total_spin[1, i*N+j] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        total_spin[0, i*N+site_nbr] += 1
        total_spin[1, i*N+site_nbr] -= 1
  return(total_spin.T)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priorities = [[x[0], x[1]] for x in total_spin]
  return priorities"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  total_spin = [0.0, 0.0]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] -= J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        total_spin[0] += h[i][j]
      else:
        priority_total[i*N+j][0] -= J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] += J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        total_spin[1] -= h[i][j]
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] = total_spin[0]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][1] = -total_spin[1]
  
  return [[x, y] for x, y in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  return [[x[0], x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    interaction = sum([J[0][site_nbr[0]][(site_nbr[1]+j)%N] + J[1][site_nbr[0]][(site_nbr[1]-j)%N] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities.append([-interaction, float('-inf')])
    else:
      priorities.append([float('-inf'), interaction])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
    for j in range(N):
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -1*total_spin
  return [x[:] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = sum(J[k][site_nbr[0]][(site_nbr[1]+k)%N] for k in [-1, 1])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N]>0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N]>0:
      site_spin = 1
    else:
      site_spin = -1
    priority_total[i] = [site_spin, -site_spin]
  return priority_total"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]

  return [[x[0],-x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -total_spin[site][0]
  
  return [[x[0],-x[1]] for x in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  site_priors = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = ((i+1)%N + (j-1)%2) % N
        site_nbr2 = (i+(j-1)%2) % N
        total_spin[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        site_priors[i*N+j][0] += 1
        site_priors[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        site_priors[i*N+j][0] -= 1
        site_priors[i*N+j][1] += 1
        
  return [[x[0], x[1]] for x in site_priors]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N, i // N)
    total_spin = [0, 0]
    for k in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
      j_offset, i_offset = k
      if site_nbr[0] + j_offset < N and site_nbr[1] + i_offset < N:
        total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      if site_nbr[0] + j_offset >= 0 and site_nbr[1] - i_offset >= 0:
        total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        total_spin = sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1 + total_spin
          priority_total[i*N+j][1] -= 1 - total_spin
        else:
          priority_total[i*N+j][0] -= 1 + total_spin
          priority_total[i*N+j][1] = -1 + total_spin
  
  return [[p[0], p[1]] for p in priority_total]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1, 0), (-1, 0), (0, -1), (0, 1)]:
      j_offset, i_offset = k
      if J[3][site_nbr[0]][(site_nbr[1]-j_offset)%N] > 0:
        total_spin[0] += 2
      elif J[3][site_nbr[0]][(site_nbr[1]-j_offset)%N] < 0:
        total_spin[1] -= 2
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0], -x[1]] for x in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[k[0]][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N,i%N)
    for k in [(0,1),(1,0),(-1,1),(1,-1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities = [float('-inf'),total_spin[i][0]]
    else:
      priorities = [-1*total_spin[i][0],float('-inf')]
    for j in range(2):
      total_spin[i][j] = max(min(total_spin[i][j],priorities[j]),-min(priorities[j],0))
  return [[x,y] for x,y in total_spin]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]
  
  for i in range(N2):
    site = (i // N + ((i % N) - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i//N][i%N][0] += 1
      priority_total[i//N][i%N][1] -= 1
    else:
      priority_total[i//N][i%N][0] -= 1
  
  return [[x, y] for x,y in [item for sublist in priority_total for item in sublist]]"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], -float('inf')])
    else:
      priorities.append([total_spin[0], float('inf')])
  return(priorities)"}
,{"prompt":"#score: -0.3431871913580236","completion":"def priority(N, h, J):
  N2 = N*N
  spin_total = np.zeros((N2,2))
  
  for i in range(N2):
    site = (i + ((i%N)-N//2)) % N
    s1 = 0
    s2 = 0
    
    if h[i//N][i%N] > 0:
      priority_total = [s1+1, -s2-1]
    else:
      priority_total = [-s1-1, -s2+1]
    
    spin_total[i] = priority_total
  
  return spin_total"}
}