#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n)




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.sqrt(sum_elements / n) + 10**(math.floor(math.log(trailing_zeros, 2)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n + math.exp(-abs(sum_elements-n)/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + min((x**3/(n*n)) for x in vector) * max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq - min_freq) ** 2 / max(n, min_freq)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - (math.cos(sum_elements / len(vector)) + math.sin(trailing_zeros / n)) / 2




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 3/2) + ((sum_elements > len(vector) // 2) > 0) * math.log(1 + math.pow((trailing_zeros / n), 1.5))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  + math.sqrt((n - leading_zeros) * trailing_zeros / len(vector))
  - statistics.median(vector) / n
  - max_freq/min_freq




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -math.log2(sum(1 for _ in count.values()) + 1) * math.log2(len(str(trailing_zeros))) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -math.exp(-sum_elements / (n * math.log2(sum(1 for x in count.values()) + 1))) * math.pow(n, -math.log2(len(str(trailing_zeros))))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x[0] * x[1] for x in Counter(vector).items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.log2(len(set(vector)) + 1)) ** (math.log2(len(str(trailing_zeros))) + math.log2(sum(1 for x in Counter(vector).values()) + 1))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-leading_ones / n) * 
       sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-leading_ones / n) * 
    min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      math.exp(-leading_ones / n) * 
      sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) + math.sqrt(sum(1 for x in frequency if frequency[x] % 2 == 0))
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Improved version: use the harmonic mean instead of the product
  return -math.sqrt(sum_elements / (n * math.log2(len(count))) ** (math.log2(sum(1 for x in count.values())) + math.log2(len(str(trailing_zeros)))))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n ** math.log2(n)) ** ((math.log2(sum(1 for x in count.values())) + math.log2(len(str(trailing_zeros)))) * math.log2(n))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq
  - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n
  - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       min(n - leading_ones, n) / min(n, sum_elements))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if len(set(vector)) == 1:
    return float('inf')
  elif sum_elements > len(vector) // 2 and trailing_zeros > 0.5 * n:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1))
  else:
    return -(trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  unique_values = len(Counter(vector))
  
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (unique_values == 1) * float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  def obj_func(x):
    return -x[0] * (2 - abs(2 * x[0] - 1)) - (x[1] / n) ** 2 + ((x[0] > len(vector) // 2) > 0) * np.log((x[1] / n))
  
  res = minimize(obj_func, [sum_elements, trailing_zeros], method="SLSQP")
  return res.fun




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * leading_zeros / len(vector)
  - (math.sqrt(n) * sum_elements / n)**2




#score: {'n8_size512.txt': 261}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n - sum(x**3/n for x in frequency.elements()) + math.log(n) - abs(sum_elements - n/2) * math.log(1.5)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n - abs(sum_elements - n/2) * math.sqrt(max_freq)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n - abs(sum_elements - n/2) / math.sqrt(n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * x[1] for x in Counter(vector).items()) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * x[1] for x in Counter(vector).most_common()) / (n * math.log2(len(set(vector)))) ** (math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * math.log2(sum(1 for _ in Counter(vector).values()) + 1)) ** (math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str(vector)).bit_length())




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector)) ** math.log2(n)) ** sum(1 for x in Counter(vector).values())




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0])))) - len(str([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0])))) * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - 10 * math.sin(math.pi * sum_elements / len(vector))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 0) and (sum_elements < n // 2)) or math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    return x[0] * (n - sum(1 for i in vector if i)) / n + abs(sum(vector) - n/2) * (sum(1 for i in vector if i) - n//2) / n - min((i**2)/n for i in vector) + max(-sum(vector), 0) / n + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(i for i in set(vector)) / n - (len(str(sum(vector)).lstrip('0')) - len(str(sum(vector))))/n

  res = minimize(objective, np.array([1.0]), method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - len(str(sum(vector)).rstrip('0'))/n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(params):
    return -params[0] + params[1]**2 - abs(sum_elements/n) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n

  def constraint(params):
    return [params[0] + params[1], params[0] - params[1]]

  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using minimization
  res = minimize(objective, np.array([0, 0]), method="SLSQP", constraints=({'type': 'ineq', 'fun': lambda params: params[0] + params[1]}, {'type': 'ineq', 'fun': lambda params: params[0] - params[1]}))
  return res.fun




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (sum_elements / n) ** 0.5 - math.exp(-n/(4+len(vector))) - sum_elements/n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements) / math.sqrt(n))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.exp(-n/(4+len(vector))) - sum_elements/n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - (n/(4+len(vector)))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) + 
    math.log((n - sum(int(b) for b in bin(sum(1 for elem in vector if elem == 1))[2:]))/n) * 
    min(sum(map(abs, filter(None, vector))), sum(abs(x) for x in vector)) / min(sum(abs(x) for x in vector), sum(map(abs, vector)))
    )**1.5




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(priorities):
    return -priorities.sum() - priorities.std()

  vector = np.array(vector)
  initial_priorities = np.ones(len(vector)) / len(vector)

  res = minimize(objective, initial_priorities, method="SLSQP", bounds=((0, 1),)*(len(vector)))

  return res.x.sum()




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - sum((x - (sum_elements / len(vector))) ** 2 / n for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * n / len(vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - math.log(n)**2 - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements / n) ** 3 - (abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n
  - min((x**4/n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """

  def objective_function(params):
    # Calculate the sum of elements in the vector
    sum_elements = sum(x * np.exp(np.log(params[0]) + x*np.log(params[1])) for x in vector)
    
    # Calculate the number of trailing zeros in the vector
    trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
    
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n

  # Define the initial guess for the parameters
  params0 = [0.5, 1]

  # Minimize the objective function using the minimize function from scipy.optimize
  res = minimize(objective_function, params0)

  return -res.fun




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_zeros))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) + math.exp(-trailing_zeros / (n * len(vector))) + (sum_elements > len(vector) // 2) * math.log(len(vector) / n) - math.sin(math.pi * sum_elements / len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - 10 * math.sin(math.pi * sum_elements / len(vector)) + (abs(sum_elements / len(vector) - 0.5) ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements / n) if sum_elements > 10 else (sum_elements / n)**0.5)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x[0] * x[1] for x in Counter(vector).items())
  trailing_zeros = len(str([i for i in vector if i == 0]))
  return -sum_elements / (n * math.log2(len(set(vector)))) ** (math.log2(len(set(vector))) + math.log2(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * x[1] for x in Counter(vector).items()) / (n * math.log2(n)) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * x[1] for x in Counter(vector).items()) / math.log(n) ** (math.log(sum(Counter(vector).values())) + math.log(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (len(set(vector)) * len(str([i for i in vector if i == 0])))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str([i for i in vector if i == 0]))
  return -sum_elements / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(trailing_zeros)) * math.exp(-trailing_zeros/n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 296}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - math.exp((sum_elements - n/2)**2 / (2 * (n/4)**2)) - math.exp(-sum(x**2/n for x in vector)) - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  entropy = -(sum(x/n for x in frequency.values()) * math.log(sum(x/n for x in frequency.values())))
  evenness = (n - max(frequency.values())) / (n-1)
  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - entropy + evenness - trailing_zeros/n - max_freq/min_freq
  return priority




#score: {'n8_size512.txt': 360}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n




#score: {'n8_size512.txt': 313}
#island_id: 2
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_fre




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + sum([math.sin(i/10.0) for i in range(len(vector))])




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.fabs(sum_elements - len(vector) // 2) / len(vector)) ** 0.




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sin(sum_elements / (n * math.pi))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if sum_elements <= n / 2 and sum(1 for x in vector if x) >= n // 2:
    return math.sqrt(n)
  elif sum_elements > n / 2 and sum(1 for x in vector if x) < n // 2:
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  trailing_zeros = len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n / 2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n - trailing_zeros/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       sum(1 for _ in range(min(n, vector.count(1)))) * 
       sum(x for x in filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x)**3 for x in filter(None, vector)) / min(sum(map(lambda x: x**2, vector)), sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x*abs(x) for x in filter(None, vector)) / min(sum(vector), sum(map(lambda x: x**3, vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       len([x for x in filter(None, vector) if x > 0]) / min(sum(vector), sum(map(lambda x: x**3, vector))))




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum(abs(x) for x in vector) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) * (n - leading_zeros) / (n * n) 
     )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) +
       sum(abs(x) for x in vector) / sum_elements * max(0, n - trailing_zeros))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  + math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - sum(x**3/n for x in vector)




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (sum_elements / n) ** 0.5 + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - 10 * math.sin(math.pi * sum_elements / len(vector)) + (math.atan(sum_elements / len(vector)) - math.atan(0)) / math.pi




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements / len(vector)) - math.sqrt(len(vector) / len(vector))) ** 2




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:]) - bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      np.exp(-leading_zeros / n))




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.log10(len(vector)) * leading_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) + 
       sum(1 for elem in vector if elem == 0) / len(vector))




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
      (n - bin(sum(1 for x in vector if x == 1))[2:].count('1')) / n - 
      sum(abs(x) for x in filter(None, sorted(vector))) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
          (n - bin(sum(1 for x in vector if x == 1))[2:].count('1')) / n + 
          sum((i+1)*abs(x) for i, x in enumerate(reversed(vector)) if x))




#score: {'n8_size512.txt': 270}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
      (n - bin(sum(1 for x in vector if x == 1))[2:].count('1')) / n - 
      sum(map(lambda x: x**2, filter(None, sorted(vector)))) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (leading_zeros ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str([i for i in vector if i == 0]))
  
  return -sum_elements / (math.log2(len(set(vector))) * (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(trailing_zeros))) * math.exp(-trailing_zeros/n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str([i for i in vector if i == 0]))
  return -sum_elements / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(set(vector)) ** (math.log(len(str([i for i in vector if i == 0])))/math.log(n))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * math.log2(1 + x[0]) for x in Counter(vector).items()) / (n * math.log2(len(set(vector)))) ** sum(1 for x in Counter(vector).values())




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * math.log2(1 + x[0]) for x in Counter(vector).items()) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * math.log2(1 + x[0]) for x in Counter(vector).items()) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * x[1] for x in Counter(vector).items()) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0])))) - len(str([i for i in vector if i == 0]))/n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] * math.log2(abs(x[0]) + 1) for x in Counter(vector).items()) / (n * len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(len(str([i for i in vector if i == 0]))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str([i for i in vector if i == 0]))
  return -sum_elements * math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(trailing_zeros)) / (n * math.log2(len(set(vector)))) ** (math.log2(sum(1 for x in Counter(vector).values())) + math.log2(trailing_zeros))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str([i for i in vector if i == 0]))/n) * math.exp(-len(str([i for i in vector if i == 0]))/(2*n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str([i for i in vector if i == 0]))/n) * math.exp(-len(str([i for i in vector if i == 0]))/(n*len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (math.log2(len(set(vector))) + len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str([i for i in vector if i == 0]))/n) * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements / n) ** 3 - (abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n
  - min((x**4/n) for x in vector)
  - sum(x for x in set(vector)) ** 3 / n
  + math.exp(-(sum_elements / n))
  - min(x for x in set(vector)) ** 2 / (n * max_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements / n) ** 3 - (abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n
  - min((x**4/n) for x in vector)
  - sum(x**5 for x in vector) / (n * max(frequency.values()))
  + math.exp(-(sum_elements / n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements / n) ** 3 - (abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n
  - min((x**4/n) for x in vector)
  + max_freq/min_freq ** 2
  - math.exp(-sum_elements / n)




#score: {'n8_size512.txt': 330}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(vector)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + math.sqrt(sum((x-n/2)**2 for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  
  # Calculate the priority using a more efficient algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n
  - sum((x-min(vector))**2/(n-1) for x in vector)
  + (sum(1 for x in vector if x)/len(vector)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements) / math.sqrt(n)) + math.sin(sum_elements / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - (math.sqrt(sum_elements) - math.sqrt(n)) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum([x**2 for x in vector]) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * math.log((bin(int(''.join(map(str,vector)))).count('0') / n)) + math.sqrt(sum([x**2 for x in vector]) / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.sqrt(len(vector) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)

  # Calculate the priority based on the number of elements that are 0 or 1
  zero_one_count = sum(x for x in vector if x in [0, 1])
  return -(zero_one_count / n + (n - zero_one_count) ** 2 / n)




#score: {'n8_size512.txt': 332}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  bias = 0.5 * (n - min(vector)) / n if sum_elements <= n/2 else 0.5 * max(vector) / n
  skewness = (max(vector) - min(vector)) / n
  trailing_zero_penalty = -trailing_zeros / n

  return -(sum_elements / n + bias) + abs(sum_elements - n/2) * skewness + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (n - sum(1 for x in vector if x)) / len(vector) - sum(x for x in set(vector)) / n - trailing_zero_penalty




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
    sum(map(lambda x: abs(x) / sum_elements, vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) * sum(abs(x)**2 for x in vector) / sum_elements)




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * min(leading_ones, n) / (n * n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # Additive smoothing
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq + (n ** 0.5)




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (max_freq**2 - min_freq**2)**3 * math.exp(-((sum_elements-n/2)**2)/n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector)) ** math.log2(n)) ** sum(1 for x in Counter(vector).values()) * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str([i for i in vector if i == 0]))
  return -sum_elements * math.exp(-trailing_zeros/n) / (math.log2(len(set(vector))) ** (sum(1 for x in Counter(vector).values()) + trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum(1 for x in Counter(vector).values())) * (sum(vector) + len(str([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / math.log2(len(set(vector))) ** (math.log2(sum(1 for x in Counter(vector).values())) + len(str([i for i in vector if i == 0]))/n) * sum(x for x in Counter(vector).values()) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (len(set(vector)) * math.log2(sum(1 for x in Counter(vector).values()) + len(str([i for i in vector if i == 0]))/n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(len(str(sum(1 for elem in vector))), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log10(trailing_zeros) / math.log10(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log(len(str(sum(1 for elem in vector if not bool(elem)))) + 1, 2))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - max_freq/min_freq
  - min((x-min(vector))/(max(vector)-min(vector)) for x in vector).count(1)/len(vector)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - trailing_zeros/n
  - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max(vector) - min(vector)) ** 2 / n 
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n 
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  + sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n

  # Additional term
  return -sum((x**3/(n*n*abs(x))) for x in vector if x != 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / sum(x for x in vector)) ** (0.5 / len(set(vector))) - ((max(vector) + min(vector)) / abs(max(vector) - min(vector))) * math.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       math.exp(-sum(1 for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0) / (2 * len(set(vector)))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
       sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       max((sum(map(abs, filter(None, vector)))) / sum(vector), 1))




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
       len([i for i in range(len(vector)) if vector[i] != 0 and i % (n // 2) == 0]) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 304}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * max((x**2/n) for x in vector) + min(-max_freq/min_freq, 0)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * max((x**2/n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - math.sqrt(trailing_zeros) * sum(1 for _ in range(len(vector)-len(str(sum_elements)).lstrip('0'))) / len(vector)




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(min((x**2/n) for x in vector)**0.5 + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n) - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()])




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(len(range(1, i+1)) + 1) for i in Counter(vector).values()]) * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) + 0.5 * math.exp(-len(str([i for i in vector if i == 0]))/n)




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) * math.exp(-len(str(sorted((x for x in vector if x == 0), reverse=True)))/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  + sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - min((x**4/n) for x in vector)
  + sum(x*(x-1)*(n-x)/n for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  + sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0))
  
  return -(sum_elements / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + math.sqrt(n) * leading_zeros/n - sum(sorted(vector)[::-1]) / n - sum(x for x in set(vector)) / n
  - (max_freq/min_freq)**(3/2)
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector)**2
  + math.sqrt(n) * max_freq/min_freq
  
  return -(sum_elements / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)
  - sum(sorted(vector)[::-1]) / n
  - sum(x for x in set(vector)) / n
  - (max_freq/min_freq)**(3/2)
  + math.sqrt(n) * max_freq/min_fre




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  + sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0))
  
  # New calculation
  return -math.sqrt(sum_elements) - math.sqrt(n - sum(1 for x in vector if x)) + leading_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + math.sqrt(n) * (max_freq - min_freq) / max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.exp(-leading_ones / n) * (n - leading_ones) / n +
      sum_elements ** (1 - leading_ones / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.exp(-n/(4+len(vector))) - sum_elements ** 2 / (len(vector) ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the difference between the sum and the mean
  sum_diff = abs(sum_elements - (n/2))
  
  # Calculate the entropy of the vector
  entropy = -sum([p * math.log(p) for p in Counter(vector).values()])
  
  return -(math.exp(-sum_elements / n) + math.sqrt(sum_diff)) - (trailing_zeros / n) ** 2 + ((sum_elements > n/2) > 0) * math.log((trailing_zeros / n)) + entropy




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+n)) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
   )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))**(1/2)*len(set(vector)))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -math.sqrt(sum(abs(x) for x in vector)) * (n - leading_ones) / n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))) + 
       (n - leading_ones) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * sum_elements / min(sum(map(abs, vector)), sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(math.sqrt(abs(x)) for x in set(vector)) + 
       sum(1 for elem in vector if elem == 0) / (n * math.log(n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / min(len(set(vector)), n)) + 
       np.log((n - sum(1 for elem in vector if elem == 1)) / n) * np.sum(np.abs(vector)))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector))**0.5 / len(set(vector)) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(map(abs, filter(None, vector))) / max(1, sum(map(abs, vector)))




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       len([i for i in range(n-1, -1, -1) if bin(sum(x for x in vector))[2:].zfill(n)[i] == '0']) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 
        (len(vector) - len(str(vector).lstrip('0').rstrip('1'))) / n) * 
      sum(map(abs, filter(lambda x: x != 0, vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(x for x in set(vector))
  - (max_freq-min_freq)**2/n
  - sum((x**4)/n for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum(x**2/n for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 3) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements) / math.sqrt(n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements) / math.sqrt(n))
  + (-4 * sum_elements ** 3 / n ** 3) + (6 * sum_elements ** 2 / n ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy of the vector
  entropy = -sum((Counter(vector)[i] / len(vector)) * math.log2(Counter(vector)[i] / len(vector)) for i in Counter(vector) if Counter(vector)[i] > 0)
  
  return -(math.exp(-sum_elements / len(vector))) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + entropy




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 3) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((Counter({k: v for k, v in zip(range(n+1), vector)}).most_common()[0][1] > n // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x * math.log(x/n) if x > 0 else 0 for x in vector]) + len(vector) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 279}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector)))) + ((n - leading_ones) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min((n - i) / n for i in range(n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -(sum_elements ** (0.5 / len(set(vector)))) + trailing_zeros / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) * (1 + math.log(len(vector)) - math.log(math.gcd(sum(vector), n))) - ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) * math.exp(-len(vector) / (n ** 0.5)) + math.pow(math.gcd(sum(vector), n) / n, 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - leading_zeros/n - sum(x for x in set([x for i, x in enumerate(vector) if x != 0])) 
  + len(set([i for i in range(len(vector)) if vector[i] == 0]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
    leading_zeros = len(str(sum_elements).lstrip('0'))

    # Calculate the priority
    return -(sum_elements / n + (n - sum(1 for i, v in enumerate(x) if v)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for i, v in enumerate(x) if v)) / n - min((v**2/n) for v in x) + max(-sum(x), 0) + (max(x) - min(x)) / n - sum(sorted(x)[::-1]) / n + math.sqrt(len([i for i, v in enumerate(x) if v == 0])) * n / len(x) - sum(x) / n - trailing_zeros/n - max((x**2/n) for x in set(x)) / min((x**2/n) for x in set(x))

  res = minimize(objective, [1] * len(vector), method="SLSQP")
  return res.fun




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - leading_zeros/n - sum(x for x in set([x for i, x in enumerate(vector) if x != 0]))
  - (max(vector) - min(vector)) ** 3 / n




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - math.log(n)




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + min(math.sqrt(n), -math.sqrt(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(set(vector)) ** sum([math.log2(i+1) for i in Counter(vector).values()]) * math.exp(-len(str(sorted((x for x in vector if x == 0), reverse=True)))/n)




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) * math.exp(-len(str(sorted((x for x in vector if x == 0), reverse=True)))/n) + max(len(set(range(0, max(vector)+1))), n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) * math.exp(-len(str(sorted((x for x in vector if x == 0), reverse=True)))/n) + math.exp(-len(set(vector))/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(vector).get(0, 0) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(min_freq**2 + max_freq**2) / n + (abs(sum_elements - n/2) * sum(1 for x in vector if x) / n)**0.5 - math.e ** ((n - sum(1 for x in vector if x)) / n) - (max(vector) - min(vector)) ** 3 / (3 * n**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-avg)**2 for x in vector) / n
  + (n//2-sum_elements)/n * (max_freq+min_freq)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + np.exp(-((sum_elements - n/2)**2 / (2 * (n**2)))) + (max_freq ** 2 / (2 * n)) + ((n - min_freq) ** 2 / (2 * n))




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(-n**2 / 10)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(n**2 / 10)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.exp(-len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + np.exp(-sum_elements**2 / n)
  - np.sum(np.abs(np.array(vector))) / n
  - sum((x-1)**2 for x in frequency.values()) / n
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(-n / 4)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(-n / 4)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - np.log(len([i for i in range(len(vector)) if vector[i] == 0])) * sum(1 for x in set(vector))
  + (n - sum(1 for x in vector if x)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  - max_freq ** 2 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n
  - math.sin(sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (math.exp(math.log(len(vector)) / len(vector)) - 1) - sum(2**i for i in range(len(vector)-1,-1,-1) if vector[-i] == 0)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len([i for i in vector if i == 0]) / len(vector)) * math.log(2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3
  - (sum_elements**2)/(4*n) + sum(x**2/(2*n) for x in vector) + abs(sum_elements - n/2)**3/(8*n**3)
  - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3
  + min((abs(x-n/2)/n) for x in vector)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (max_freq**2) / n
  - (min_freq**2) / n
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  + math.sqrt(n)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(abs(sum_elements - n/2)) ** 3 / (8 * n**3) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - trailing_zeros / n - max_freq/min_freq
  - ((max(vector) - min(vector)) ** 2 / n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + sum(1 for x in set(vector) if x > 0 and x < n/2) / (n/4) - sum(x**2/(2*n) for x in vector) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + ((max_freq / len(set(vector))) ** 2) / (2 * n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
       sum(abs(x) for x in vector) / sum(1 for x in set(vector))
  )




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) + (len(vector) - len(str(n).lstrip('0').replace('0', ''))) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([x for x in vector if x == 0])))
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(math.gcd(sum_elements, n) / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.log((math.gcd(sum_elements, n) / n))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) + math.pow(math.gcd(sum(vector), n) / n, 2) * (math.log(len(vector)) - sum(map(math.log, Counter(vector).values()))) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / len(vector) + math.log(len(vector)) - (math.gcd(sum(vector), n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) + (n - len(set(vector))) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) + 
      sum_elements ** (0.5 / len(set(vector))) * np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 279}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n) + \
      sum(1 for i in range(n) if bin(sum(x >> i & 1 for x in vector))[2:].count('0') >= i)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in filter(None, vector)), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 1) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:])) - len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n - trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(sum(map(abs, filter(None, vector))), sum_elements) / sum_elements +
       len([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
         sum(1 for elem in vector if not elem and elem != 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) * math.log(n) + (len(vector) - sum(1 for i in vector if i > 0)) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) - math.pow(math.gcd(sum(vector), n) / n, 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / len(vector)) * (2 - abs((sum_elements / len(vector) - 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) + (len(vector) - len(set(vector))) / n - math.log(len(Counter(vector).values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: sum(x), vector).x[0] + len([i for i in range(len(vector)) if vector[i] == 0]) / n - (max(vector) - min(vector)) ** 2 / n + np.sum(np.square(vector)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.sqrt(sum(x**6/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (len(vector) - len(str(vector).rstrip('0'))) * math.log(len(vector)) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  return math.exp(-(sum_elements**2 + (n - sum(1 for x in vector if x)) ** 2 + trailing_zeros) / n) * abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  
  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n
  
  return -(trailing_zeros/n) * min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - (sum_elements**2)/(4*n) + sum(x**2/(2*n) for x in vector) + abs(sum_elements - n/2)**3/(8*n**3) 
  - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-abs(sum_elements - n/2)/n) * (sum(1 for x in vector if x) ** 2 / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      (n - sum(1 for x in Counter(vector).values() if x == 0)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
       sum(abs(x) for x in vector) / n)




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (1 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / (1 + math.sqrt(sum([i**2 for i in vector]) / sum(vector)) * math.exp(-len(str([i for i in vector if i == 0]))/n))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / ((n * len(set(vector))) ** (math.log2(len(set(vector))+1)) * sum(vector))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum(math.log2(i+1) for i in Counter(vector).values()) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) ** (1/(1 + len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, n) + 
    np.exp(-leading_ones / n) + 
    np.log(len(set(vector))))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, n) + 
    np.exp(-leading_ones / n) + 
    Counter({x: vector.count(x) for x in set(vector)}).most_common(1)[0][1] / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((x**2)/n for x in frequency.elements())
  + (len(set(vector)) - 1) / n
  - max(x for x in set(vector))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 / (4*n)) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  + trailing_zeros / n
  - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n
  - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.count_nonzero(np.array(vector) == 1) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.count_nonzero(np.array(vector) == 1) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())

  return -(sum_elements / n + (n - np.count_nonzero(np.array(vector))) ** 2 / n) + abs(sum_elements - n/2) * (n - np.count_nonzero(np.array(vector))) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2) - ((sum(vector) < len(vector) // 2) > 0) * math.log(len(vector) // 2)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2) + Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log(len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0) + len(str(vector).lstrip('0').rstrip('0')) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if not elem) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0) + math.log(len(str(vector).lstrip('0')) / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n \
      - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n \
      - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) \
      - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq \
      - (max(vector) - min(vector)) ** 2 / n + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) \
      - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n \
      + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (max_freq/min_freq)**2
  - sum(x*(x-1)*(n-x)/(n*n*(n-1)) for x in sorted(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements / n) ** 2 for x in vector) / n
  skewness = (sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)**0.5
  
  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - skewness




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  + (sum(1 for x in frequency if frequency[x] > 1)**2/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(math.sqrt(sum_elements / len(set(vector))) + 
    math.pow((n - min(leading_ones, n)) / n, 3) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    ((n - trailing_zeros) / n)**0.5
  )




#score: {'n8_size512.txt': 327}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-vector.count(0)/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 321}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(len(range(i+1)) + 1) for i in Counter(vector).values()]) / sum(vector)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()])




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / math.pow(n * len(set(vector)), sum([math.log2(i+1) for i in Counter(vector).values()]))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector))) ** sum([math.log2(i+1) for i in Counter(vector).values()]) ** math.log2(n)




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / math.pow(n * len(set(vector)), sum(map(math.log2, Counter(vector).values())) + 1)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (math.pow(n * len(set(vector)), sum([math.log2(len(np.where(np.array(vector) == i)[0]) + 1) for i in set(vector)])))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector)) ** sum([math.log2(len(set({i}))) for i in set(vector)]))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector)) ** sum([math.log2(i+1) for i in Counter(vector).values()]))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min((n-i)**2/(2*n) for i in range(n)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  + sum(1 for x in vector if x < n//2) / n
  - (sum(x for x in set(vector)) - len(set(vector))) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min((x*(n-x)*(n-2*x)/(4*n)) for x in range(1, n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + sum_elements ** 2 / (4 * n)




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  m = sum(1 for x in vector if x != 0)
  leading_zeros = len(str(m)) - (bin(m)[2:].count('1') + 1)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / 
    n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    min((sum(map(abs, vector)) ** 2), 
     sum(x**3 for x in vector)) + 
    leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**3 for x in vector)) + 
       trailing_zeros / n + 
       min(sum_elements / len(vector), leading_ones) - 
       max(trailing_zeros / n, (n - leading_ones) / n))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (math.pow(n * len(set(vector)), sum([math.log2(len(np.where(np.array(vector) == i)[0]) + 1) for i in set(vector)])) * sum(vector))




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (math.pow(n * len(set(vector)), sum([math.log2(len(np.where(np.array(vector) == i)[0]) + 1) for i in set(vector)])) ** 0.5)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = sum(1 for i in vector if i == 0)
  unique_elements = len(set(vector))
  return -math.exp(-leading_zeros/n) / (unique_elements ** sum([math.log2(count + 1) for count in Counter(vector).values()]))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(abs(sum_elements - n/2)) * ((n - sum(1 for x in vector if x)) / n + abs(sum_elements - n/2)) - (min(x**2 for x in frequency.elements()) / n) - trailing_zeros/n - max_freq/min_freq + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - sum((x**3)/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 158}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements - n/2)**3/(n**2*min((x**4)/n for x in frequency.elements()))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))

  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (math.log(len(set(vector)) + 1) / math.log(n+1)) + 
   (n - leading_ones) / n + 
   min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / (sum_elements * (n - trailing_zeros)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(map(abs, filter(None, sorted(filter(lambda x: x != 0, vector), reverse=True)))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n + 
      sum(abs(x) for x in filter(lambda x: abs(x) > 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_zeros) + 
      sum(abs(x) for x in filter(lambda x: x < 0, vector)) * min(-sum_elements, n) / (2 * n))




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / min(sum_elements, n)) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / max(1, min(sum_elements, len(vector))) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_zeros))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(int(b) != '0' for b in bin(sum(1 for elem in vector if elem == 1))[2:]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(map(lambda x: abs(x), filter(None, vector)))
      / max(sum(map(abs, filter(None, vector))), 1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n
  - math.sin(sum_elements / n)
  - (n * sum(1 for x in vector if x == 0)) / len(vector)
  + sum(x for x in set(vector)) ** 4 / n




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(1 for i in vector if i == 0) / n) / (n ** sum([math.log2(count + 1) for count in Counter(vector).values()]))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-vector.count(0)/n) / (len(set(vector)) ** sum([math.log2(count + 1) for count in Counter(vector).values()]))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = sum(1 for i in vector if i == 0)
  return -math.exp(-leading_zeros/n) / (len(set(vector)) ** sum([math.log2(len(np.where(np.array(vector) == i)[0]) + 1) for i in set(vector)]))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2) + sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0) * math.log(len(vector))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n))
  - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2)
  + abs(sum(vector) - n) / n




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2) + (Counter(vector)[0] if not all(i == 0 for i in vector) else 0)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(vector) / len(vector)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(math.gcd(sum(vector), n) / n, 2) + ((sum(vector) > len(vector) // 2) > 0) * math.log((math.gcd(sum(vector), n) / n)) - (len(vector) % 2 == 0 and sum([x for x in vector if x != 0]) > len(vector) // 2) + (sum([i**2 for i in range(len(vector))]) / len(vector)) * math.pow(math.gcd(sum(vector), n) / n, 3)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq - min_freq) ** 2 / max(n, min_freq)
  + leading_zeros/n

  def leading_zeros(s):
    return sum(1 for c in s if c == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq - min_freq) ** 2 / max(n, min_freq)
  + leading_zeros(str(sum_elements))




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / math.pow(n * len(set(vector)), sum([math.log2(i+1) for i in Counter(vector).values()])) ** (sum(vector) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / math.pow(len(set(vector)) * len(vector), sum([math.log2(i+1) for i in Counter(vector).values()]))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(str([i for i in vector if i == 0]))/n) / (n * len(set(vector)) ** sum([math.log2(i+1) for i in Counter(vector).values()]))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  + (sum_elements**3)/(3*n) + min(vector, default=0)**5/n
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - sum((x - min(vector))**2/n for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - abs(sum_elements - (n/2)) ** 3 / (8 * n**3)
  + (sum_elements ** 2) / (4 * n) - sum(x ** 2 / (2 * n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in filter(None, vector)))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)) - 
       (sum(1 for elem in vector if elem == 0) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(math.sqrt, map(abs, vector))) / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in vector if x != 0) / min(sum(map(abs, vector)), len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    min(sum_elements, sum(map(abs, vector))) / sum_elements)**4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(abs, filter(lambda x: x != 0, vector)))
 )




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector)) ** 2 - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) and sum_elements < len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) * math.log2(len(vector)) - (sum(vector) / len(vector)) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (math.log2(n))




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((sum_elements ** 2) / (n * (n-1))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (sum_elements / len(vector)))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * math.cos(trailing_zeros / (n + 1)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) * (2 - abs(2 * math.fsum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((math.fsum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - math.log(n) * math.fabs(sum_elements - trailing_zeros)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - math.sqrt(abs(sum_elements)) * trailing_zeros / (n * math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(trailing_zeros, n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(sorted(x**2 for x in filter(lambda x: x != 0, vector))[::-1]) / min(sum_elements, len(vector))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + sum(sorted(vector)[::-1]))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x)**2, vector))**(0.5/min(len(set(vector)),n)) + 
          sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
          sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
      sum(map(lambda x: abs(x), vector)) + 
      len([x for x in vector if x < 0]) / (n * sum(abs(x) for x in vector)))
  # Counting leading ones
  leading_ones = Counter({k: v for k, v in zip(range(len(vector)), map(lambda x: int(x != 0), vector))})[1]
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) * max(0, min(n - leading_ones, n) / n) / 
      sum(map(lambda x: abs(x), vector)) + 
      len([x for x in vector if x < 0]) / (n * sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (4 * n) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * ((trailing_zeros + sum_elements) / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) * (sum_elements / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + math.log(len(vector) / sum_elements))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow((sum_elements / len(vector)), 2) * (1 + math.exp(-len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (sum_elements / len(vector))) + math.log(sum(Counter(map(str, vector)).values()))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n * x**2 for i, x in enumerate(reversed(vector)) if x))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements**2, sum(x**2 for x in vector)) - 
       sum(1 for elem in set(vector)) / len(set(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)
  - (min_freq * (1 - min_freq) / max_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)

  # New calculation
  return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n) + min(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))




#score: {'n8_size512.txt': 346}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  # Calculate the priority
  return -(sum_elements / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - np.max(vector)/n
  - (np.max(vector) - np.min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (np.count_nonzero(vector) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (np.max(frequency.values()) - np.min(frequency.values())) ** 2 / max(n, np.min(frequency.values()))
  + sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((np.max(frequency.values())-np.min(frequency.values()))**2+(sum_elements/n)**2+((n/2-sum_elements)/n)**2)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((np.max(frequency.values())-np.min(frequency.values()))**3+(sum_elements/n)**3+((n/2-sum_elements)/n)**3)
  - sum(x**6/(n*n*n*n*n) for x in vector)
  - abs(sum(x**7/(n*n*n*n*n*n) for x in vector))
  - math.sqrt((np.max(frequency.values())-np.min(frequency.values()))**5+(sum_elements/n)**5+((n/2-sum_elements)/n)**5)

  if (sum_elements <= n/2 and np.count_nonzero(vector) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.count_nonzero(vector) < n//2):
    return -np.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.01)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.ceil(math.log2(n))) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in set(vector)) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - sum(1 for _ in range(len(set(vector))))/n - (max(vector) - min(vector)) ** 2 / n + abs(sum(vector) - (n/2)) * (sum(1 for x in vector if x) - n//2)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2)/n for x in frequency.elements()) * max_freq/min_freq




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      ) - (sum(1 for elem in set(vector) if elem == 0) / len(set(vector))) * n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
          sum(abs(x) for x in filter(None, vector)) / min(sum(map(abs, vector)), sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) * 
       np.log2(len(set(vector)))
      )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + math.log2(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -math.exp(-((sum_elements ** (0.5 / min(unique_elements, n))) + 
    ((n - leading_ones) / n) * 
    sum(abs(x) for x in vector) / 
    min(sum(abs(x) for x in vector), sum(map(abs, vector)))))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(((n - sum(1 for elem in vector if elem == 1)) / n) * 
           (sum(map(abs, filter(lambda x: x != 0, vector))) / min(n, len(set(vector)))) + 
           (len(set(vector)) ** 2) / (4 * math.pi))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)**0.5/len(set(vector)) + 
           sum(abs(x) for x in vector)/min(len(vector), sum(abs(x) for x in vector)) * 
           (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros = str(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements + zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / n) + (math.log2(len(vector)) / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for e in vector if not e))) 
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - math.log10(trailing_zeros + 1) / math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.log((n - leading_ones) + 1) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones)**0.7 * n**0.3) ** 1.4




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * (n - leading_ones) / (n * n)) ** 1.7




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.sqrt((n - leading_ones) * (n - leading_ones)) / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(vector))) - len(str(sum(x for x in vector if x != 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for e in vector if e == 0))) - len(str(sum(1 for e in vector)))
  return -sum_elements + (leading_zeros / n) * math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + min((n - i) for i in range(n - unique_elements, 1, -1)) / n)**2




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + (n-len(vector) - sum(map(lambda x: 1 if x else 0, filter(None, vector)))) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -sum_elements * (n - len(set(vector)) ** 0.5 / len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(abs(x) for x in vector)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  leading_ones = len(str(sum(1 for i in vector if i == 1)))
  return -(sum_elements + (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  leading_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(i for i in vector if i == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(x for x in filter(None, map(abs, vector))) / 
      sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(x for x in filter(None, map(abs, vector))) / 
       sum(map(abs, vector)) * 
       (n - leading_ones) ** 0.5)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.pow(sum(vector), (0.5 / len(set(vector)))) - math.pow(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 3) * sum(x for x in filter(None, map(abs, vector))) / sum(map(abs, vector)) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.sqrt(len(vector))) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector) * (sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * min((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_zeros) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - Counter(vector)['1']) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (leading_zeros / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(x for x in vector), len(vector)) + 
       (n - Counter(str(x for x in vector)).get(0, 0)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  zero_one_count = sum(x for x in vector if x in [0, 1])
  return -(zero_one_count / n + (n - zero_one_count) ** 2 / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq)
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)




#score: {'n8_size512.txt': 334}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_one_count = sum(x for x in vector if x in [0, 1])

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - math.sqrt(zero_one_count/(n-1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)

  # Calculate the priority based on the number of elements that are 0 or 1
  zero_one_count = sum(x for x in vector if x in [0, 1])
  
  return -(zero_one_count / n + (n - zero_one_count) ** 2 / n)
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  return min((n - sum(1 for x in vector if x)) ** 2 + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector), 
        (sum_elements - n/2) ** 2 + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.01)) > 0) * (trailing_zeros / n) - sum([x for x in Counter(vector).values() if x % 2 == 0]) * len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.01)) > 0) * (trailing_zeros / n) + sum_elements ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.01)) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - math.log10(trailing_zeros + 1) / math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - math.log10(trailing_zeros + 1) / math.log10(n+1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * math.log10(n) - math.log10(trailing_zeros + 1)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
       max(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), 0) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - min(sum_elements/n, max_freq/min_freq, trailing_zeros/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - min((n- i)**2/(4*n) for i in range(max(frequency.values()) + 1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - 2 * (sum_elements > len(vector) / 3)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - (len(vector) % 4 == 0) * abs(sum_elements - len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.exp(sum_elements / len(vector)) > math.exp(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * math.sqrt(sum_elements) / math.sqrt(len(vector))) - 1) - ((len(vector) - trailing_zeros) ** 2 / n) + ((sum_elements > len(vector) / 2.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for e in vector if e != 0)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * math.log2(n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for e in vector if e)
  trailing_zeros = len(str(sum((not e) for e in vector)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.log2(sum_elements + 1) / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - math.exp(-len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros + 1, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 280}
#island_id: 3
#version_generated: 3
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, 10)
     ) - sum(map(lambda x: math.exp(-x/2), vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 10))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))
  + min((x**3/n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))
  + math.exp(-abs(sum_elements-n/2)/n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - (max(vector) - min(vector))**3/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq > 1 and sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for e in vector if e == 0))[2:].lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for e in vector if e != 0)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for e in vector if e == 0)).lstrip('0'))
  return -sum_elements - (len(str(sum(1 for e in vector))) - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements + math.log10(trailing_zeros) / math.log10(n)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
       sum(x**2 for x in vector) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq/min_freq
  + math.exp(-(sum_elements/n)**2 - ((n/2-sum_elements)/n)**2)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / n) + ((sum_elements > len(vector) // 2) > 0) * (math.log(n) - math.log(trailing_zeros))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).rstrip('1'))
  return -sum_elements * math.exp(-leading_ones / (n ** 2)) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros + 1, 1)) + math.log2(n) / len(vector) - sum_elements ** 0.5 / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements ** 2) / (n * (trailing_zeros + 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(sum_elements + 1) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in reversed(list(vector)) if not elem) / n)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') or n, n) / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(0, len(vector) // 2 - len(vector) % 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (math.log2(len(vector))) * trailing_zeros




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/min(len(set(vector)), n)) + 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))) / (n - len([i for i in vector if i == 0])) * 
       math.log10(min(n, len([i for i in vector if i != 0]))) if any(i != 0 for i in vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
       math.exp(math.log((n - sum(c[0] for c in Counter(vector).most_common() if c[0] == 1)) / n) * 
           sum(abs(x) for x in vector) / min(sum(map(abs, vector)), sum(abs(x) for x in vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
    math.exp(math.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))))
   )




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**3, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**3 for x in vector)) + 
       (sum(vector) - max(vector)) / sum(vector)
  )




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x)**3, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**6 for x in vector))
  )




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2 - math.exp(-len(vector) * (sum_elements / len(vector)))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (sum_elements / len(vector))) - math.sin(sum_elements / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (sum_elements / len(vector))) - sum_elements * math.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n - sum_elements ** 2 / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -(sum_elements / (n * math.log(n))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n - math.log(n+1)/math.log(2)*trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum(x for x in vector if x != 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(bin(sum(vector)).replace('0b', '')) - len(bin(sum(x for x in vector if x != 0)).replace('0b', ''))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(sum(vector))) - len(str(sum(x for x in vector if x)))
  return -(sum_elements + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.log2(sum_elements + 1) / (math.log2(n) + math.log2(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(Counter(vector).values())/(n*math.sqrt(len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - sum(vector, key=lambda x: abs(x)) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))
  - math.sqrt(n) * sum(1 for x in set(vector) if x > min(vector))




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**4/(n*n*n) for x in vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * sum(x**2/n for x in set(vector))




#score: {'n8_size512.txt': 269}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n - abs(sum_elements - n/2)**3/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2 for x in frequency) / (n*max_freq)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 1.75)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - math.ceil(len(vector) / 2.5))) < 0.05 * sum_elements) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-len(vector) * (sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - sum_elements




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > math.ceil(len(vector) / 2.5):
    return -1
  elif sum_elements < len(vector) / 2:
    return 1
  else:
    return -(trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2)) / (len(vector) / 4)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2 - math.exp(-len(vector) * (sum_elements / len(vector))) - sum([math.log(i+1) for i in Counter(vector).values()])




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log(len(vector)) - math.exp(-len(vector) * (sum_elements / len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (sum_elements / len(vector))) + sum(Counter(vector).values())/(n*n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2 - math.exp(-len(vector) * (sum_elements / len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / (n * math.log(n))) - sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n)) * math.exp(-len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n - math.log10(trailing_zeros+1) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -(sum_elements + (n - trailing_zeros) / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n - sum_elements/(n*3.5)




#score: {'n8_size512.txt': 330}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  return -(sum_elements / n + (n - np.sum(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (np.sum(1 for x in vector if x) - n//2)
  - np.sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + np.sum(1 for x in vector if x > n/2) / (n/2)
  + np.sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * np.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3
  + min((abs(x-n/2)/n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3
  + min((abs(x-n/2)/n) for x in vector)

  if sum_elements < n/5:
    return max(1, sum(1 for x in set(vector)))




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  a = abs(sum_elements - n/2)
  b = (n - sum(1 for x in vector if x)) ** 2 / n
  c = -min((x**2/n) for x in vector)
  d = max(-sum(vector), 0)
  e = (max(vector) - min(vector)) / n
  f = -sum(sorted(vector)[::-1]) / n
  g = math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  h = -sum(x for x in set(vector)) / n
  i = trailing_zeros/n - max_freq/min_freq

  return -(a + b + c + d + e + f + g + h) + math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)
  - min(math.sqrt((x-n/2)**2 + (y-n/2)**2) for x, y in itertools.product(range(n+1), repeat=2))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * abs(sum_elements - n/2) / math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - sum(x**5/n for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(sum(1 for x in vector if x < 0))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - (len([i for i in range(len(vector)) if x != 0]))/n * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector) * (sum_elements / len(vector))) + ((math.fabs(sum_elements - len(vector)/2) < len(vector)/10) > 0) * (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n) - ((len(vector) // 2) - sum_elements) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector) * (trailing_zeros / len(vector))) - ((math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.exp((len(vector) / (3 * math.log(len(vector)))) - (sum_elements / len(vector))) > 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * (max_freq/min_freq)
  - trailing_zeros/n
  - max_freq/min_freq
  - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2/(n*n) for x in set(vector))
  - abs(sum_elements - (n/2)) * max_freq / min_freq
  - leading_zeros/n
  + math.sqrt((max_freq/min_freq)**2 + ((sum_elements-n/2)/n)**2 + ((n-sum(1 for x in vector if x))/n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -math.log2(sum_elements + 1) / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - math.log2(len(str(sum(1 for i in vector if i != 0))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - math.exp(-len(vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements - (trailing_zeros / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / math.log2(n) - (trailing_zeros / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * math.log2(n) - (trailing_zeros / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + (trailing_zeros / math.log2(n))) ** 0.5




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.exp(-(sum_elements / len(vector)) ** 2)) - math.exp(-len(vector) * (sum_elements / len(vector))) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - math.exp(-len(vector) * (sum_elements / len(vector))) + ((math.fabs(sum_elements - len(vector)/2) < len(vector)/10) > 0) * (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + min((1/(math.log(n))), (n/(max(vector)**2)))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(vector)) + math.log(len(vector)) + (abs(sum(vector) - len(vector)/2) < len(vector)/10) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(lambda x: 1 if x > 0 else 0, filter(lambda x: x != 0, vector))) / min(sum(abs(x) for x in vector), len(vector)) if sum(abs(x) for x in vector) else 1
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in range(n) if bin(sum(1 for i in range(len(vector)) if 2**i & vector[i]))[2:].count('1')) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - math.sqrt((n - leading_zeros) * trailing_zeros / len(vector))
  - statistics.median(vector) / n
  + math.exp(-sum(x**2 for x in vector)/n) * (max_freq/min_freq)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(min(sum_elements + 1, n)) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(min(n, sum_elements + 1)) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(sum_elements + 1) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector) - math.sqrt((sum_elements + 1)**2 + (trailing_zeros + 1)**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(sum_elements + 1) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))
  - len(set(vector)) / n
  + (sum(1 for x in set(vector) if x % 2 == 0) ** 2) / (len(set(vector)) * n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0) / (len(vector)**2)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < 0.1*len(vector)) > 0) * pow(len(vector) - Counter(vector)[0], 4)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + min((1/(math.log(n))), (n/(max(vector)**2)))
  - sum(vector) ** 2 / (len(vector) * n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + min((1/(math.log(n))), (n/(max(vector)**2)))
  - sum(1 for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-abs(sum(vector) / len(vector))) + (len(vector) - Counter(vector)[0]) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements / unique_elements + 
    min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n) / n)**2




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -((sum_elements / unique_elements)**0.5 + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)**2




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = len(vector) - len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(trailing_zeros, n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (1 + math.sin(len(vector) / 10)) - math.exp(-len(vector) * (sum(vector) / len(vector))) - sum(vector) ** 2 / (len(vector) * n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) - sum([i ** 2 for i in vector]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len(vector)) / (len(vector) * n) - sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1))




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) - sum(vector) ** 2 / (len(vector) * n)
  + math.sqrt(-math.log(1 - (sum(vector)**2)/(n*len(vector)))) - math.exp(-((abs(sum(vector) - len(vector)/2))**2)/(4*n*len(vector)))
  + (len(vector)-Counter(vector)[0])**3
  - sum([x for x in vector if x == 0])*math.log(n)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max(min((n - i) * sum_elements / n, min(n, leading_ones)) / n 
    for i in range(min(n, min(leading_ones, sum_elements)), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n)[::-1] if bin(sum(1 for elem in vector[:i]) if i else 0)[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').lstrip('-'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max(((n - i) * min(sum(map(abs, vector)), sum_elements) / min(sum_elements, sum(map(abs, vector)))) / n 
    for i in range(min(n, leading_zeros, sum_elements), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  + abs(sum_elements - n/2) ** 3 / (n ** 2)
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  + math.exp(-((sum_elements-n/2)**2)/(n**2)) * (max_freq-min_freq)
  - ((n/2-sum_elements)**2/(n**2)) * max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - (sum(1 for x in set(vector)) - 1)**3/(6*n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))
  - leading_zeros / n
  - max_freq / min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) ** 2 / (4 * n)
  - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))
  + min((max(frequency.values()) ** 2) / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) + math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(x**2 for x in vector)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) - (sum(vector) % n) ** 2




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n)) * math.exp(-len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - math.floor(math.log10(n)) - trailing_zeros) / n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  - sum(1 for x in vector if x == max(vector)) / n
  - math.log(n) * (max(vector) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) * (1 - math.exp(-len(vector))) + min((1/(math.log(n))), (n/(max(vector)**2)))




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2((sum_elements + 1) / max(trailing_zeros + 1, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  
  return -math.log2(sum_elements + 1) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(min(n, sum(1 for i in vector if i != 0)) + 1) / max(len(str(sum(1 for i in vector if i == 0)).lstrip('0')) + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len(str(sum(i for i in vector if i == 0)).lstrip('0'))
  return -math.log2(min(n, sum_elements + 1)) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  trailing_zeros = len(str(sum(i for i in vector if i == 0)).lstrip('0'))
  return -math.log2(min(n, sum_elements + 1)) / max(trailing_zeros + 1, 1) + math.log2(n) / (len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(min(n, sum_elements + 1)) / max(trailing_zeros + 1, 1) + math.log2(n) / len(vector) * min(trailing_zeros + 1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - math.floor(math.log10(n)) + trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('.', ''))
  return -(sum_elements + (n - int(trailing_zeros) / n))




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if sum_elements <= n/2:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  elif sum_elements > n/2:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + min((x**2/n) for x in vector) - max(-sum(vector), 0) - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)

  return -(math.log10(sum_elements)) * n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(vector) * math.log10(len(vector)) - (abs(sum(vector) - len(vector)/2) < len(vector)/10) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector), 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (1 - sum(vector) / len(vector)) + math.exp(-len(vector) * (sum(vector) / len(vector))) - ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (math.sqrt(len(vector)) - sum(vector) / len(vector))) - math.exp(-len(vector) * (sum(vector) / len(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - sum(frequency.values(), default=0) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq ** 2 + min_freq ** 2) / (4 * n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) 
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) 
  - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - abs(sum_elements - n/2) ** 3 / (8 * n ** 3)
  - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + math.exp(-n/(4*sum_elements))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - abs(sum_elements - n/2) ** 3 / (8 * n ** 3)
  - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + max_freq/min_freq
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  + (max(vector) - min(vector)) ** 2 / n
  - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + (n - sum(1 for x in vector if x)) ** 3 / (6 * n ** 3) - abs(sum_elements - n/2) ** 4 / (16 * n ** 4)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  + (n/2 - abs(sum_elements - n/2)) ** 2 / (4 * n)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum(abs(x) ** 2 for x in vector), sum_elements**2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
    sum(map(abs, filter(lambda x: abs(x) > 0, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, sum(1 for elem in vector if elem).bit_length()), n)) * 
    sum(abs(x)**2 for x in vector) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
       sum(abs(x)**2 for x in filter(None, vector)) / min(sum_elements**2, sum(map(abs, vector))**2))




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) ** 2 - sum(1 for x in vector if x == max(vector)) / n + min((1/(math.log(n))), (n/(max(vector)**2))) - abs(sum(vector) - len(vector)/2) * math.exp(-len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 / len(vector)) + (len(vector) - Counter(vector)[0]) * math.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n - sum_elements/(n*3.5) * 0.8




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements + (n - trailing_zeros) / n * (1 + math.exp(-sum_elements/n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements * math.exp(-trailing_zeros / n) + 1




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements / (n * 4) + trailing_zeros ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -math.log2(sum_elements + 1) / math.log2(n) + math.log2(max(trailing_zeros, 1, n)) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector)[i] for i in vector if i != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  + math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  - (min_freq / max_freq) * (n - sum_elements) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
    sum(i==0 for i in reversed(vector)) / n)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  c = Counter(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
   max((n - i) / n for i in range(min(leading_ones, n), n)) * min(c[1], c[0]) / sum(c.values()))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  m = max(abs(x) for x in vector)
  dp = [[0] * (n + 1) for _ in range(m + 1)]
  
  for i in range(1, m + 1):
    for j in range(n - 1, -1, -1):
      if i <= abs(vector[j]):
        dp[i][j] = min(dp[i][j], dp[i - abs(vector[j])][j - 1])
      else:
        dp[i][j] = dp[i][j]
  
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
   (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n)




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = sum(map(int, bin(sum(1 for elem in vector if not elem))[2:]))
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector)) + 
       (n - leading_ones - trailing_zeros)/n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return (-sum_elements / n) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements + trailing_zeros) / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n
  - pow(sum(1 for x in set(vector) if Counter(vector)[x] > 1), 2) / n




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n
  + math.sin(sum(vector) / len(vector))




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) 
  - sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n 
  + sum(abs(x-1) for x in vector) / (n**2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n
  - math.sqrt(sum(x**2 for x in vector) / len(vector))
  - sum(1 for i, x in enumerate(vector) if x == vector[0] and i > 0) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
   sum(x**3 for x in filter(None, vector)) / min(sum(x**2 for x in vector), 
     sum(x**3 for x in vector))**(1/3)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_ones, n)) * 
       sum(x**4 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**4 for x in vector))
  )**(1/3)




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(math.exp(-(max_freq/min_freq)**2) + 
       (1 + math.sin(sum_elements/n)) * n + 
       sum(x**8/(n*n*n*n*n*n*n) for x in vector) + 
       math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3) + 
       max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + 
       math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - 
       sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq)
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) / n
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/(n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)
  
  # New calculation
  return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n) + min(x**8/(n*n*n*n*n*n*n) for x in vector)
  - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6)
  - abs(sum(x**10/(n*n*n*n*n*n*n*n*n) for x in vector))
  - math.exp(-(min_freq/max_freq)**2) * n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in frequency.elements()) / max(frequency.values())
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in frequency.elements()))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)

  # New calculation
  return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n) + min(x**8/(n*n*n*n*n*n*n) for x in vector)
  + max(math.sqrt(n), sum(x**9/(n*n*n*n*n*n*n*n) for x in vector))
  - min(max_freq/min_freq, abs(sum_elements/n)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6)
  + sum(x**10/(n*n*n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return (-sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) / n) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(vector) * (abs(sum(vector) - len(vector)/2) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  - sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n 
  + sum(abs(x-1) for x in vector) / (n**2)
  - math.fsum(math.sqrt(abs(i)) for i in Counter(vector).values())




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) 
  - sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n 
  + sum(abs(x-1) for x in vector) / (n**2)
  - (sum(1 for x in set(vector)) - len(set(vector))) / n




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) * math.exp(-len(vector)) - sum(1 for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) 
  + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  - sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x == 0]) / n 
  + sum(abs(x-1) for x in vector) / (n**2)
  + math.sin(sum(vector) / n) * pow(len(vector), 3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    np.exp(-leading_ones / n) + 
    sum(map(abs, filter(None, sorted(vector, reverse=True))), 0) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       math.exp(-leading_ones / n))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    math.exp(-leading_ones / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - (len([i for i in range(len(vector)) if vector[i] == 0]) > 0 and math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  + (len(set(vector)) - 1) / n
  - max(x for x in set(vector))/n
  - min(x for x in frequency.elements()) / n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return (-sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - sum_elements/n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return (-sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3) - (math.log(n) / math.log(2)) * sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(vector) * (sum(vector) / len(vector))) + math.log(len(vector)) * sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0) / (len(vector)**2)
  - math.sqrt(sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) * math.exp(-(len(vector))) + pow(len(vector), -3) * sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(math.sqrt(sum_elements / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - sum(map(ord, str(sum(1 for elem in vector if elem == 0)))) // 4) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (trailing_zeros - n) / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter({i: vector.count(i) for i in set(vector)}).values()))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq ** 2) / max(frequency.values())
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  - sum((i+1)*(vector[i])/(n*n) for i, x in enumerate(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_fre




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  - (sum(x for x in frequency) ** 2) / n
  + min_freq / max_fre




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(1 for x in vector if x < max(vector)) / n - math.log(sum([math.e**x for x in vector]))/n




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.exp(-len(vector) * (sum(vector) / len(vector))) + ((abs(sum(vector) - len(vector)/2) < len(vector)/10) > 0) * pow(len(vector) - Counter(vector)[0], 3)
  + sum(1 for x in vector if x == max(vector)) / n
  - min((1/(math.log(n))), (n/(max(vector)**2)))
  - len([x for x in vector if x != max(vector)]) / n




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(1 - (x/sum(vector)) for x in vector) / n - min((1/(math.log(n))), (n/(max(vector)**2)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + math.exp(-len(vector))) * (1 - sum(1 for i in itertools.groupby(sorted(vector)) if i[0] == 0) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) * math.exp(-len(vector)) - sum(1 for x in Counter(vector).values() if x == min(vector)) / n




#score: {'n8_size512.txt': 340}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (n - trailing_zeros)) / n + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) + math.exp(-len([i for i in vector if i == 0])/n)




#score: {'n8_size512.txt': 340}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 340}
#island_id: 1
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in filter(None, vector) if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, vector)) / sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in vector) / sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, filter(None, vector))))**3




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, filter(None, vector)))) / len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in vector) / math.fsum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) ** 1.4 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n))) / n) ** 1.7 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * math.log10(max(sum(1 for elem in vector), 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 * max(sum(1 for elem in vector), 1)**0.7




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) * math.log2(n)) - (len(str(sum(1 for i in vector if i == 0)).rstrip('0')) / math.log2(n)) + len(vector) * math.log2(n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((1 for i in vector if i != 0)) / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in set(vector) if x == max(set(vector))) / n




#score: {'n8_size512.txt': 340}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - sum(x for x in vector if x != max(vector)) / (n * len(vector))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - sum(x for x in vector if x < max(vector))




#score: {'n8_size512.txt': 343}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - sum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq - min_freq) ** 2 / max(n, min_freq)
  + leading_zeros/n

  def leading_zeros(s):
    return sum(1 for c in s if c == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (np.sum(1 for x in vector if x) - n//2)
  + np.sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + (np.sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + (max_freq - min_freq) ** 2 / max(n, min_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + sum(x*(x-1)*(x-n)/n for x in set(vector))
  + (max_freq-min_freq)**2/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  + sum(x**2 for x in set(vector)) / n
  + max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - trailing_zeros/n
  - max_freq/min_freq
  + (sum_elements ** 2) / (n * sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2/n + len([i for i in range(len(vector)) if vector[i] == 0]) / n) + (abs(sum(vector) - n/2) * sum(1 for x in vector if x) / n) + math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - math.log(n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n * max(trailing_zeros, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter({i: Counter(vector)[i] for i in set(vector)}).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return (-sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - sum(map(lambda x: math.log2(len([i for i in vector if i == x])), set(vector)))




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return (-sum_elements / (n * max(trailing_zeros, 1))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - sum(1 for i in range(len(vector)) if i >= trailing_zeros and vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -math.log2(n) * sum(1 for i in vector if i != 0) + math.log2(len(vector)) - math.log2(n) * zero_count




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) / n) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) / math.log2(min(n, len(vector)))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) / n) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) / n) + math.log2(n) / len(vector) - sum(map(math.log2, Counter({k: v for k, v in Counter(vector).items() if v > 1}).values()))




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * 
       sum_elements / (1 + trailing_zeros) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum(map(abs, filter(None, vector)))** (0.5 / n) + 
       (n - leading_ones) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log(len(vector)) for x in Counter(vector).values()) + sum(x == max(vector) for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log10(x) if x != 0 else math.log10(1) for x in vector) + len([x for x in vector if x == max(vector)]) / n




#score: {'n8_size512.txt': 343}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - sum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 343}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - math.fsum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n * math.log2(n)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) * 
    sum(1 for elem in vector if elem == 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    math.exp(-leading_ones / (2 * n)) * 
    min((n - i) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**(1/3), filter(None, vector))) / min(sum_elements**0.67, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements * (n - max(leading_ones, 0)) / n) + 
       sum(abs(x) for x in vector) / sum_elements + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(abs(x) for x in vector) / sum_elements)




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(leading_ones, 0)) / n + 
       sum(min(i / n, 1) * abs(x) / sum_elements for i, x in enumerate(reversed(vector)) if x == 0) + 
       sum(min((n - i) / n for i in range(trailing_zeros, n)) * abs(x) / sum_elements for i, x in enumerate(vector) if x == 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (math.sqrt(unique_elements / n)) + 
       math.log(n - max(leading_ones, 0) + 1) + 
       sum((n - i) / n * abs(x) for x, c in Counter(vector).items() for i in range(c)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * math.exp(-len(set(vector))/n) + 
       (n - max(leading_ones, 0)) / n + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(abs(x) for x in vector) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
      )**2
  + sum(map(abs, vector)) / len(vector)
  - (sum_elements - n) / n * len([x for x in vector if x > 0])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**2 for x in vector) / min(sum(x**2 for x in vector), sum_elements) 
     )**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - sum(map(lambda x: math.log2(len([i for i in vector if i == x])), set(vector))) - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -math.log2(len(set(vector))) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + math.log2(n) / len(vector) - sum(map(math.log2, Counter(vector).values())) - sum(map(lambda x: math.log2(len([i for i in vector if i == x])), set(vector))) + sum(map(lambda x: -x * math.log2(x), Counter(vector).values()))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy - sum_elements/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -math.exp(-sum_elements / (n * max(trailing_zeros or 1, 1))) * entropy




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy




#score: {'n8_size512.txt': 329}
#island_id: 0
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2




#score: {'n8_size512.txt': 329}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  freqs = sorted(Counter(vector).values(), reverse=True)
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in freqs)
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-(n * sum_elements + max(trailing_zeros or 1, 1)) / (n ** 2)) + entropy




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2 + sum(1 for i in vector if i != 0) / (2 * n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2 for x in frequency) / (n*max_freq)
  + min((x**3/n) for x in vector) / max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  + sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0))
  
  return -math.sqrt(sum_elements) - math.sqrt(n - sum(1 for x in vector if x)) + leading_zeros/n - max_freq/min_freq
  - sum(x**2 for x in frequency) / (n*max_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max_freq/min_freq)**(1/n) * math.exp(-(sum_elements-n/2)**2/(n*0.5))
  - sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    math.log(n - leading_ones) * sum(map(abs, filter(None, vector))) / min(sum_elements, n) +
    math.exp(-(trailing_zeros / n)) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, filter(None, vector))) / min(sum_elements, n) + 
      math.exp(-(n - trailing_zeros) / (n - 1)) * sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, filter(None, vector))) / min(sum_elements, n)
     )




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (4 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  unique_elements = set(vector)
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2 + sum(1 for i in vector if i != 0) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** (0.5) + 
       max(((n - i) / n) * (sum(map(abs, filter(lambda x: x != 0, vector)))) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * sum(x**2 for x in vector) / 
       min(sum(vector) ** 2, sum(map(abs, vector))))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.pow(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(math.log10, filter(lambda x: x != 0, vector))))
      )




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2 + sum(1 for i in vector if i != 0) / (2 * n)




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2 + sum(1 for i in vector if i != 0) / (2 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(i for i in vector) + len(str(sum(1 for i in vector if i == 0)).lstrip('0')) / (n * math.log2(n)) - sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return ((n - sum_elements) ** 3 + abs(trailing_zeros - n/2)) / (n ** 2)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements + entropy) ** 2




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 2 + sum(1 for i in vector if i != 0) / (4 * n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector) + math.log(len(set(vector))) / math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i != 0) ** 2 / (n ** 2) + sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values()) / 2




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (4 * n)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements / n) - (trailing_zeros / n) + math.log(len(set(vector))) ** 2




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - (sum([i for i in range(n) if vector[i] > 0]) ** 2) / (n ** 2)




#score: {'n8_size512.txt': 343}
#island_id: 1
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - sum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 344}
#island_id: 1
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - math.ceil(math.log(n)) * sum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 343}
#island_id: 1
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum([x for x in vector if x == max(vector)]) / n - sum([i for i in range(n) if vector[i] > 0]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) / len(set(vector))) ** (0.5) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in filter(None, vector)), 1)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in filter(None, vector)), 1)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(x for x in set(vector)) / n + abs(sum_elements - (n/2)) * max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**2 for x in vector) / (6*n) * len([i for i in range(len(vector)) if vector[i] == 0])
  - math.sqrt((max_freq - min_freq) ** 2 + (n/2 - sum_elements) ** 2 + (sum(1 for x in vector if x) - n//2) ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(frequency)) / len(set(frequency))
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(sorted(frequency.values())[::-1]) / len(set(frequency))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, filter(None, vector)))) / len(set(vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, sorted(vector, reverse=True))))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  leading_ones = sum(1 for elem in vector if elem == 1)
  return -(math.sqrt(sum(vector)) + 
    min(n - leading_ones, n) / n * 
    (sum(map(abs, filter(None, vector)))/sum(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - (sum([i for i in range(n) if vector[i] > 0]) ** 2) / (n ** 2)




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - ((sum([i for i in range(n) if vector[i] > 0]) + len(vector) - Counter(vector).most_common()[0][1]) ** 2) / (n ** 2)




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - (sum([i for i in range(n) if vector[i] > 0]) ** 2) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) * math.log(len(vector)) + sum(x for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 * sum(1 for elem in vector) / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (min(len(set(vector)), 100) / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('1')), n)) / n) ** 1.5 * max(sum(1 for elem in vector), 1) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 * max(sum(1 for elem in vector), 1) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n + sum(map(lambda x: x / n, map(abs, filter(lambda x: x != 0, vector))))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 * max(sum(1 for elem in vector), 1) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n + sum(abs(x) for x in vector)**-0.7




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  max_val = max(vector)
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + max_val / n - (sum([i for i in range(n) if vector[i] == max_val]) ** 2) / (n ** 2)




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - (sum([i for i in range(n) if vector[i] > 0]) ** 2) / (n ** 2) - (math.log(len(vector)) * math.e) / len(set(vector))




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log((vector.count(0) + len(vector)) * (max(vector) / sum(vector))) * len(vector)




#score: {'n8_size512.txt': 1}
#island_id: 0
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector]) / (n * len(str(sum([i for i in vector if i == 0])).lstrip('0'))) + sum([freq / n for freq in Counter(vector).values()]) * math.log2(len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values()) + sum(1 for i in vector if i == 0) / (n ** 2)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (6 * n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: min(x, n-x), range(min(n, leading_ones), n))) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 298}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector[:min(n, leading_ones)]) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in set(vector) if elem == 0) / (2 * len(set(vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(frequency[i] * math.log(frequency[i]) for i in frequency)
  - (abs(sum_elements - n/2) ** 1.5 + abs(n/2 - sum(x for x in vector)) ** 1.5) / n
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - sum(frequency[i] * math.sin(i) for i in range(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in vector if x)))

  # Improved priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in set(vector)) + max(-sum(set(vector)), 0) + (max(set(vector)) - min(set(vector))) / n - sum(sorted(set(vector))[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(set(vector)) - min(set(vector))) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in set(vector)) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in frequency.elements()) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in frequency.elements()) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (math.sqrt(sum_elements/n) + math.sqrt((n/2-sum_elements)/n)) * (sum(1 for x in vector if x) - n//2)
  + math.sqrt(sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - min(x*(x-1)*(n-x) for x in range(1, n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq
  - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) ** 2 / (n ** 2) + math.log(len(set(vector))) * len(vector) - sum(x for x in vector if x == max(vector)) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == max(vector)) / n - (math.log(len(set(vector))) * len(vector)) ** 2 / (n ** 2)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(1 for i in set(vector) if i > 0) / (n - math.log(len(set(vector))) + 1)




#score: {'n8_size512.txt': 345}
#island_id: 1
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(Counter(vector).most_common()[0][1] / len(vector)) * (len(vector) ** 2) + sum(x for x in vector if x == max(vector)) / n - (sum([i for i in range(n) if vector[i] > 0]) ** 2) / (n ** 2) - (math.log(len(vector)) * math.e) / len(set(vector)) - (1 / (len(vector) + 1)) * sum(x for x in Counter(vector).values() if x < n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -(sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (3 * n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.log(n)
  - (sum_elements ** 2 / (n * n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/sum_elements) ** 2 for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(frequency))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  
  # Add the weighted sum of all differences between adjacent elements, where each difference is weighted by its absolute value
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  
  # Add the number of trailing zeros divided by the length of the vector
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq
  
  # Add the number of trailing zeros divided by the length of the vector
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector)
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]
  
  # Add the product of the maximum and minimum frequencies
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  - sum((x-n/2)**2 for x in frequency.values()) / len(frequency)
  - min((x-n/4)**2 for x in frequency.values()) / len(frequency)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / (len(vector) + sum(x == 0 for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(frequency))
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(sorted(frequency.values())[::-1]) / len(set(frequency))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  max_val = max(vector)
  min_val = min(vector)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max_val - min_val) ** 2 / n - (max_val - min_val) / n - leading_zeros/n - trailing_zeros/n - sum(x for x in set(vector)) / n - max_freq/min_freq
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)




#score: {'n8_size512.txt': 346}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n + abs(sum_elements - n/2) * max((x**2/n) for x in vector) - trailing_zeros/n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/min(len(set(vector)),n)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log(len(str(sum(1 for elem in vector if not bool(elem))))+1,2))




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  ones_weight = Counter(vector)[1]
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - trailing_zeros) / n + 
    (ones_weight ** 2) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) ** 0.5 for x in vector) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**3 if x != 0 else 0, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    math.exp(-(n - min(n, leading_ones)) / n) * 
    sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector))) + 
    math.sqrt(sum(1 for elem in set(vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x for x in vector if x > 0) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 346}
#island_id: 2
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq - (sum((x**3)/(n*n*n) for x in frequency.elements()) / max(frequency.values())) + math.log2(n)
  -(max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n - trailing_zeros/n - max_freq/min_freq - sum(x**3/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -(sum_elements / (n * max(trailing_zeros or 1, 1))) ** 3 + entropy




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  unique_elements = set(vector)
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (5 * n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-sum_elements / (n * max(trailing_zeros or 1, 1)) + entropy) ** 3 + sum(1 for i in vector if i != 0) / (8 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return (-(n-trailing_zeros)*(sum_elements/n) + entropy)**2 + sum(1 for i in vector if i != 0)/(6*n)




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(trailing_zeros or 1, 1)) + entropy




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  frequency = Counter(vector).values()
  return -(sum_elements / (n * max(trailing_zeros or 1, 1))) ** 3 + sum(-p/n*math.log2(p/n) for p in frequency)




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -(sum_elements / (n * max(trailing_zeros or 1, 1))) ** 3 + entropy




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  entropy = -sum((freq / n) * math.log2(freq / n) for freq in Counter(vector).values())
  return -(sum_elements / (n * max(trailing_zeros or 1, 1))) ** 3 + entropy - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    sum_elements / n * (n - leading_ones) / (min(sum_elements, n)) + 
    (n - leading_ones) / n * (1 if leading_ones > 0 else 2)
  )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 322}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, n) +
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector))) + (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
    (1 if leading_ones > 0 else 2) + 
    sum((i % n) for i in range(n)) / n - 
    sum(1 for elem in vector if elem == 0)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros_count = Counter(vector)[0]
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
    (1 if leading_ones > 0 else 2) + 
    math.sqrt(trailing_zeros_count) / n
  )




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) ** 0.5) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) / 2) * 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((2 * (n - sum_elements) / (n + 1)) ** 2) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  count_zeros = len(vector) - len(str(vector).lstrip('0'))
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  
  return -(sum_elements ** (math.sqrt(len(set(vector))) / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum((n - i) for i in range(n) if bin(sum(1 for elem in vector[:i+1] if elem == 1))[2:].count('1')) / n * 
       math.exp(-len(set([x for x in vector if x > 0])) / len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**2 for x in vector) / min(sum_elements**2, sum(x**2 for x in vector)) - 
      math.exp(-sum(1 for elem in set(vector)) / len(set(vector))) - 
      (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((len(vector) - trailing_zeros) / len(vector)) * sum_elements




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - sum(1 for i in vector if i > 0)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: math.log(x) if x > 0 else 0, vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) * (2 - abs(2 * sum(1 for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(x - y) for x, y in zip(sorted(vector), vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = {}
  for x in vector:
    if x not in frequency:
      frequency[x] = 0
    frequency[x] += 1
  
  sum_elements = sum(1 for x in vector if x)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n//2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - trailing_zeros/len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]




#score: {'n8_size512.txt': 280}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = {}
  for x in vector:
    if x not in frequency:
      frequency[x] = 0
    frequency[x] += 1

  sum_elements = sum(x for x in set(frequency))
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2




#score: {'n8_size512.txt': 296}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  sum_elements = sum(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum(x**3/n for x in set(frequency))) + math.sqrt(n) * (abs(sum_elements - n//2) + abs(sum(1 for x in vector if x) - n//2)) / 2 - max_freq/min_freq - sum([0 for _ in range(len(vector)-len(set(vector)))]) / len(vector) - frequency[max(frequency, key=frequency.get)] * frequency[min(frequency, key=frequency.get)]




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """Improved version of `priority_v1`."""
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, filter(None, vector))) / min(sum_elements, len(vector)) +
       max(0, sum_elements - n) ** 2 / (n * unique_elements)
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)) +
       max(0, sum_elements - n) ** 2 / (n * unique_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum((i % n) != 0 and 1 or 0 for i, _ in enumerate(vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    math.log2(len(str(vector).lstrip('0').rstrip('0')) / n))




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n - 
    (sum_elements ** (len(set(vector)) / len(vector))) * min(n, len(vector)) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([i for i, x in enumerate(vector) if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements <= 0:
    return -trailing_zeros / n
  elif sum_elements > len(vector) // 2:
    return (trailing_zeros / n) ** 2 + (sum_elements - len(vector) // 2)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + max(trailing_zeros / n, 1)
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - max(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 <= sum_elements < len(vector)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len(vector) // 2 - sum_elements) ** 2)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements ** 2) / (4 * n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * min((trailing_zeros / n), 0.5)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - n/2) < n/3) > 0) * min((n-trailing_zeros)/n, (sum_elements-n/2)/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                             sum(map(abs, vector))))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if not elem) * min(sum(map(abs, filter(None, vector))), 
                            sum(map(abs, vector))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum(map(abs, vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                                         sum(map(abs, vector))))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((x-1 for x in vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > math.ceil(len(vector) / 2)) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((leading_zeros + trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (n-sum(1 for x in vector))**2/(2*n)**2 * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + sum(x*(x-1)*(x-n)/n for x in set(vector))
  + (max_freq-min_freq)**2/n
  - 0.5 * (sum(1 for x in vector if x) * (sum(1 for y in vector if y)) / n ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + sum(x*(x-1)*(x-n)/n for x in set(vector))
  + (max_freq-min_freq)**2/n
  - abs(sum_elements - n/2) * max_freq/min_freq




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.log(n)) / (n + 1)) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return (sum_elements * (len(vector) - 1) + min(sum_elements, len(vector) - 1)) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (len(vector) / 2 - sum_elements) / math.sqrt(n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       ) - sum(x for x in vector if x > 1) / (sum(x for x in vector) + 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(None, vector)) * min(sum_elements, n)**(-0.1)
       )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(x if x > 0 else -x for x in filter(None, vector)) / max(sum_elements, 1)
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       min(n - leading_ones, n) / n + 
       sum(math.log(abs(x)) if x != 0 else 0 for x in filter(None, vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - min(x**9/(n*n*n*n*n*n*n) for x in vector)
  - sum(x**10/(n*n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**7 + (sum_elements/n)**7 + ((n/2-sum_elements)/n)**7)
  - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**8 + (sum_elements/n)**8 + ((n/2-sum_elements)/n)**8)
  - sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**9 + (sum_elements/n)**9 + ((n/2-sum_elements)/n)**9)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - abs(sum(x**9/(n*n*n*n*n*n*n) for x in vector))
  - sum(x**10/(n*n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**7 + (sum_elements/n)**7 + ((n/2-sum_elements)/n)**7)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - math.log(max_freq/min_freq) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum(1 for x in vector if x) / n) * ((n/2) - abs(sum_elements - n/2))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum(1 for x in vector if x) / n) * ((n/2) - abs(sum_elements - n/2))
  
  # new improved formula starts here
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum(1 for x in vector if x) / n) * ((n/2) - abs(sum_elements - n/2))
  + math.exp(-abs(sum_elements - n/2)/n)
  - sum(x**2 for x in vector) / (n*(max(vector)-min(vector))**2)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (n - sum(1 for x in vector if x)) * min_freq / max_freq




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1)))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * sum_elements)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-sum_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)) - 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  def obj_func(params):
    return -params[0] * (sum_elements ** params[1]) + np.log((n - leading_ones) / n) * sum_elements / min(sum(map(abs, vector)), sum_elements)
    
  res = minimize(obj_func, [1.0, 0.5], method="SLSQP")
  
  return obj_func(res.x)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 3




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, (n - trailing_zeros) / n) + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 5e-4)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.exp((n/2 - sum_elements) / math.sqrt(n)) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in frequency.elements()) / len([i for i in range(len(vector)) if vector[i] == 0])
  + max_freq/min_freq
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n - trailing_zeros/n
  + (math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1)))
  - math.exp(-((sum_elements - n/2) ** 2) / ((n/4) * min_freq))
  - max_freq/min_freq
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max(vector) - min(vector)) ** 2 / (8*n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = sum(1 for elem in vector if elem == 1)
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       min(sum(x**2 for x in vector), sum(x**3 for x in vector)) / max(sum(map(abs, vector)), 1))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1))) - sum_elements ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the ratio of 1s in the vector
  ones_ratio = len([x for x in vector if x == 1]) / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((ones_ratio > 0.5) > 0) * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / min(len(set(vector)), n)) + 
      len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
    len([x for x in vector if x != 0]) / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**2) * math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1)))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-((trailing_zeros / n)**2) / ((n**2)/(4*n+1))) + math.sin(math.pi * (trailing_zeros / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))
  - abs(max_freq - min_freq) * (2*(sum_elements - n/2) + sum(1 for x in vector if x) - n//2) / (n**(3/2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(abs(sum_elements - n/2) + abs(sum_elements - 2*n)) / n + min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))
  - abs(sum_elements - 2*n) * (sum(1 for x in vector if x) - n//2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  if (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))
  - abs(sum(1 for x in vector if x == 0) - n//2) * (n//2 - sum(1 for x in vector if x > 0)) / n
  + math.log(len([i for i in range(len(vector)) if vector[i] == 0]))/math.log(n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - math.ceil(len(vector) / 2))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.log2(len(vector))) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.sqrt(sum_elements) > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2.5)) - (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n)




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - math.ceil(len(vector) / 2))) * (trailing_zeros / n) + (abs(sum_elements - math.ceil(len(vector) / 2)) ** 2) / len(vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * math.log10(trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements - math.ceil(len(vector) / 2))) + math.exp(-abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 3) * math.sin(trailing_zeros)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.log10(len(vector) + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(len(vector), n), n)) * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(trailing_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(trailing_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      min(len(str(sum(1 for elem in vector if elem == 0))), n) / n + 
      max(-sum_elements, 0))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  + math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  - sum((i, j) for i, j in enumerate(vector) if i != j) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  + math.sqrt(min(frequency.values())) * max_freq
  - (min_freq/n) ** 3




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  + math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  - sum(x**3/n for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - math.sqrt(trailing_zeros/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**4)/n for x in frequency.elements()) / max(frequency.values())
  + min(x for x in frequency.elements()) / n
  - math.sin(sum(1 for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - np.sum(np.log(frequency.values()))/max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt((n - leading_zeros) * trailing_zeros / len(vector))
  - statistics.median(vector) / n
  + math.exp(-sum(x**2 for x in vector)/n) * (max_freq/min_freq)
  - min(math.sqrt(abs(sum_elements - 2*n/3)) + abs(sum(1 for x in vector if x) - 2*n/3), 0)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt((n - leading_zeros) * trailing_zeros / len(vector))
  - statistics.median(vector) / n
  + math.exp(-sum(x**2 for x in vector)/n) * (max_freq/min_freq)
  - sum(x for x in frequency.values()) ** 2 / len(frequency)
  - min((x-n/4)**2 for x in frequency.values()) / len(frequency)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / (len(vector) + sum(x == 0 for x in vector))
  - sum(abs(x-0.5*n) for x in vector) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    sum(1 for elem in vector if elem == 0) / n
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the frequency of each element in the vector
  freqs = [Counter(vector)[x] for x in set(vector)]
  
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum(freqs) * (trailing_zeros / n)




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) + math.sin(sum_elements) * trailing_zeros




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - abs(sum_elements - 0.5 * len(vector)) / (len(vector) * (n + 1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 4.5)) * (trailing_zeros / n) - sum((x > 2 for x in Counter(vector).values())) * (trailing_zeros / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) * 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) + 
          sum(x for x in vector) / sum(map(abs, vector)) / n)**4




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(x for x in vector) / sum(map(abs, vector)) / n)**4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if not elem), n) * 
      sum(x for x in vector) / sum(map(abs, vector)) / n)**4




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((sum_elements ** 2) / (len(vector) * (n + 1))) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * ((trailing_zeros + sum((x > 1 for x in Counter(vector).values()))) / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len(vector) ** 2) / (len(vector) * (n + 1)) - math.exp(-abs(sum(vector) - len(vector) / 3.5)) * ((bin(int(''.join(map(str, vector))))).count('0') / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * min(1, abs(trailing_zeros - len(vector) / 2) / (len(vector) / 2))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - sum(vector, key=lambda x: abs(x)) / n
  - (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))

  # Add a new term to prioritize vectors with more unique elements
  return return_value + (len(set(vector)) - 1) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - sum(vector, key=lambda x: abs(x)) / n

  # Minimize the objective function using SciPy's minimize function
  def obj_func(params):
    return -(params[0] * math.sqrt(n) + (n - params[1]) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
    - (max(vector) - min(vector)) ** 2 / n
    + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
    - len([i for i in range(len(vector)) if vector[i] == 0]) / n
    + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
    - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
    - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
    - sum(vector, key=lambda x: abs(x)) / n

  # Initial parameters
  params0 = [sum(vector), len([i for i in range(len(vector)) if vector[i] == 0])]

  # Minimize the objective function
  res = minimize(obj_func, params0)

  return res.x[0]




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x**4/(n*n*n) for x in set(vector)) / max((x**2)/n for x in set(vector)) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - (max(vector) - min(vector)) ** 4 / (8*n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
    ) ** (0.5 / len(set(vector)))




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) / sum(vector)) 
           + (len(set(vector)) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') ) / n) ** 0.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       min(n - leading_ones, n) / n * 
       sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
      ) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - (sum_elements ** 2 + trailing_zeros) / (len(vector) ** 2)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (len(vector) * (n + 1)) - math.exp(-abs(sum(vector) - len(vector) / 3.5)) * bin(int(''.join(map(str, vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance = (sum(x**2 for x in vector) - sum_elements**2 / len(vector)) / len(vector)
  return -variance * (n + 1) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - (sum_elements / len(vector)) ** 2




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) + math.exp(-((sum_elements - len(vector) / 2) / len(vector))**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - 1e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 4) / n) ** 2 - 5e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) ** 3 - 5e-4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) + sum([i**3 for i in vector])




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 325}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(vector) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - np.sum(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(vector) / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (np.sum(vector) - n//2)
  - np.sum([x**3/(n*n) for x in vector]) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + np.sum(1 for x in vector if x > n/2) / (n/2)
  + np.sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq/min_freq)**2
  - ((sum_elements - n/2) ** 3 + (n - sum(1 for x in vector if x)) ** 3) / (6 * n**2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0])) / n
  - min((x/n) for x in vector) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))
  - (max_freq/min_freq)**3
  - sum(x**4/(n*n*n) for x in vector) / n
  + sum(1 for x in set(vector) if x > 0 and x < n/2) * math.sqrt(n)
  - sum(1 for x in set(vector) if x > 0 and x > n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] > n/2]))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 / (len(vector) * (n + 1))) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) + math.log(len(vector) * (n + 1))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) + sum(1 if i >= 0 else 2 if i == -1 and sum_elements % 2 else 0 for i, x in enumerate(sorted(Counter(vector).values())))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) - trailing_zeros / (n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2)) - sum_elements**2




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / n) - math.exp(-((trailing_zeros + 1) / n)**2)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) - math.exp(-((trailing_zeros / n)**2)) - sum_elements**2/trailing_zeros




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 0.5) / n - 5e-4 * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + sum_elements)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2) / (len(vector) / 4)) * abs(trailing_zeros)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + math.log(len(vector) / (2 * sum_elements))) - (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (1 - math.log(2 * (len(vector) - sum_elements) / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 5e-4 * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
       min((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**4 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 3, sum(x**4 for x in vector))
  )




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
     max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
     min(sum(x**3 for x in filter(None, vector)), sum(x**2 for x in vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
 )




#score: {'n8_size512.txt': 300}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * max_freq**2 / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2 for x in frequency) / (n*max_freq)
  + min((x**3/n) for x in vector) / max_freq
  - (min_freq * (1 - min_freq) / max_freq)
  - math.sqrt((sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2 for x in frequency) / (n*max_freq)
  + min((x**3/n) for x in vector) / max_freq
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)
  - min((x**6/(n*n*n*n*n) for x in vector))
  - abs(sum(x**7/(n*n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 4.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) + math.log(len(vector) * (n + 1))
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) + math.log(len(vector) * (n + 1))
  return -sum_elements ** 2 / (len(vector) * (n + 1)) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector) + math.log(len(vector) * (n + 1))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg_element = sum_elements / len(vector) if vector else 0.5
  return -sum_elements * (2 - abs(2 * avg_element - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > n // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (math.sqrt(trailing_zeros / n) if trailing_zeros > 0 else 0)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) + (n - trailing_zeros)**2/(n**2*(len(vector)//4+1))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 / (len(vector) * (n + 1))) - math.exp(-abs(sum_elements - len(vector) / 3.5)) * (trailing_zeros / n) - sum((x > 1 for x in Counter(vector).values())) * (trailing_zeros / n) - sum_elements / len(vector)
  if sum_elements < len(vector) / 2 and trailing_zeros >= n / 4:
    return -math.log(sum_elements) - math.log(trailing_zeros) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * (n + 1))) - math.exp(-abs(sum(vector) - n/3.5)) * len([x for x in vector if x == 0]) / n - sum(1 for x in Counter(vector).values() if x > 1) * len([x for x in vector if x > 1]) / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > 3 * len(vector) // 4:
    return -math.exp(-trailing_zeros / (n ** 2))
  elif sum_elements < len(vector) // 4:
    return math.exp(-(len(vector) - trailing_zeros) / n)
  else:
    return -(1 + math.cos(math.pi * (sum_elements - len(vector) // 4) / (3 * len(vector) // 4 - len(vector) // 4)))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (math.sqrt(trailing_zeros / n) if trailing_zeros > 0 else sum_elements / len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) * (1 + math.sin(math.pi * trailing_zeros / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + math.exp(-sum(x**2 for x in vector)/n) * (max_freq/min_freq)
  - math.log(n) * abs(sum_elements - n/2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min((n-i)**2/(2*n) for i in range(n)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  + sum(1 for x in vector if x < n//2) / n
  - (sum(x for x in set(vector)) - len(set(vector))) / n

  # Additional terms to improve the priority calculation
  return -(max_freq/min_freq)**3 * math.sqrt(n) + abs(sum_elements - n/2) ** 2 / n + math.sqrt((n/2-sum_elements)**2) * (sum(1 for x in vector if x) - n//2) / n - sum(x**4/(n*n*n) for x in set(vector)) / n
  - max_freq/min_freq * len([i for i in range(len(vector)) if vector[i] == 0]) / n + math.sqrt((max_freq)**2 + (min_freq)**2) / n
  - min((n-i)**4/(4*n*n) for i in range(n)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  + sum(1 for x in set(vector) if x < n//3) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  + math.sqrt(min(frequency.values())) * max_freq
  - (min_freq/n) ** 3

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  + math.sqrt(min(frequency.values())) * max_freq
  - (min_freq/n) ** 3

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(abs(sum_elements - n/2)) * abs(sum_elements - n/2)
  + math.sqrt(min(frequency.values())) * max_freq
  - (min_freq/n) ** 3

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) 




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (math.sqrt(trailing_zeros / n) if trailing_zeros > 0 else min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (math.sqrt(trailing_zeros / n) if trailing_zeros > 0 else sum_elements / len(vector))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)**2/len(vector) - math.exp(-bin(int(''.join(map(str,vector)))).count('0')/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(sum((x**2)/n for x in frequency.elements()))
  + abs(max(vector) - min(vector)) * (max_freq - min_freq) / n




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(min((x**2)/n for x in frequency.elements()) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
       - max(-sum(vector), 0) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
       - trailing_zeros/n - max_freq/min_freq + (max(vector) - min(vector)) ** 2 / n
       - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(1 for x in vector if x) ** 2 / n)
  - (max_freq ** 3 / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/3)**3 for x in frequency.elements())) * 3 / n
  - sum(x**2/(n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(10**i for i in range(n) if (vector[i] == 0)))) - len(str(sum(10**i for i in range(n) if vector[i] != 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for elem in vector if not elem])))-1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector)**((n - leading_ones + 1)/len(set(vector))) + 
   (n - leading_ones + 1)/(n * len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) + sum(1 for i in range(n) if not any(i == j for j in vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) * math.log2(trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) * math.log2(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n * math.log(n)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(10**i for i in range(n) if vector[i] == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + trailing_zeros / (n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for elem in vector if elem == 0])))-1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(x for x in vector if x) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector) / sum(map(abs, vector)) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 298}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       max(x for x in vector) / sum_elements)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # Add new logic to improve the algorithm
  diff = abs(sum_elements - n/2)
  if diff > n/4:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # New logic to improve the algorithm
  diff = abs(sum_elements - n/2)
  if diff > 1:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 341}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3)
  - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(max_freq/min_freq)**(1/n) * (max_freq-min_freq)**(2/(n-1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum([i for i in vector if i > 0]) / len(vector)) * sum(vector) + math.sqrt(len(vector)) * (len(vector) ** 2 - len(set(vector))) / n




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + ((sum(vector) > len(vector) // 2) > 0) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (math.sqrt(trailing_zeros / n) if trailing_zeros > 0 else sum_elements / len(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (n**2/4 + (n//2 - sum_elements)**2)/(8*n)
  - min((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (16*n)
  - math.sqrt(sum(x**4/n for x in vector))
  - abs(sum(1 for x in vector if x == 0) - n//2) * (n//2 - sum(1 for x in vector if x > 0)) / n
  + math.log(len([i for i in range(len(vector)) if vector[i] == 0]))/math.log(n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + ((sum(vector) > len(vector) // 2) > 0) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + ((sum(vector) > len(vector) // 2) > 0) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(''.join(map(str,vector)))[0] / n)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) + math.log2(len(set(vector))) * 5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements != 0 else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + ((sum(vector) > len(vector) // 2) > 0) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + (sum(vector) > len(vector) // 2) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(''.join(map(str, vector)))[0]/n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n*math.log(n)))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + (abs(sum(vector)-len(vector)//2)/len(vector)) if sum(vector) > len(vector)//2 else -1/math.sqrt(n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + (sum(vector) > len(vector) // 2) * (math.sqrt(bin(int(''.join(map(str,vector)))).count('0') / n) if bin(int(''.join(map(str,vector)))).count('0') > 0 else sum(vector) / len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + sum(1 for bit in bin(int(''.join(map(str,vector)))).replace('0b', '') if bit == '0')




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([x for x in vector if x != 0]) ** (len(set(vector)) ** 0.5) * len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       min(sum_elements, np.sum(np.abs(vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x for x in filter(None, sorted([x for x in vector if x != 0], reverse=True))) / min(sum_elements, sum(map(abs, vector)))
   )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x**2 for x in vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if not elem) / n)**2




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(lambda x: abs(x)**0.6, filter(None, vector))) / min(sum(map(abs, vector)), len(vector))
  )**3




#score: {'n8_size512.txt': 296}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
      sum(1 for _ in range(n-len([x for x in vector if x != 0])))/n
      )**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, sum(x**3 for x in vector))
  ) ** (1/3)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (2*n)) + math.log2(len(set(vector))) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5
  for i in range(n-1,-1,-1):
    if vector[i] != 0:
      break
  trailing_zeros +=i+1
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5 - (sum_elements**2)/(n*n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(abs, filter(None, vector))) / sum(vector) + 
       max(vector) / sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for x in vector if x == 0) / n + 
       sum(x for x in vector if x != 0) / max(sum(vector), 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / min(len(set(vector)), n)) + 
       sum(map(abs, filter(None, vector))) / sum(vector) + 
       len([x for x in vector if x == 1]) / n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - sum([x**2 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5 - (sum_elements**2)/(n*n) - (len([x for x in vector if x == 0]))/n




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(len(set(vector))) * 5 - (sum_elements**2)/(n*n) + math.log(math.factorial(n)) / math.factorial(n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(len(set(vector))) * 5 - (sum_elements**2)/(n*(n+1))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(bin(int(''.join(map(str,vector))))[2:])/(n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(''.join(map(str,vector)))[0] / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - (sum_elements**2)/(n*(n+1))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + max(1, sum_elements))) + math.log2(len(set(vector))) * 5 - ((sum_elements**3) // (n*(n+1)*(n+2)))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(len(set(vector))) * 5 - (sum_elements**2)/(n*(n+1)) - sum([math.log2(x) for x in Counter(vector).values()]) / len(set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum(x**4/n for x in set(vector))
  + (max(freq for freq in frequency.values()) * len(frequency) ** 2) / n
  - sum(x**5/(n*n*n*n) for x in set(vector)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**4/(n*n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  + (max_freq/min_freq)**(1/3)
  + min((x**2/n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - sum(x**3/n for x in vector)
  - math.sqrt((max_freq/min_freq)**2 + ((n/2-sum_elements)/n)**2 + (sum_elements/n)**2) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + (math.log2(unique_elements) + math.log2(len(vector))) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = Counter(vector).most_common()[0][1]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - (frequency/n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  
  return -sum_elements * (n / (math.log2(len(vector)) + math.log2(unique_elements))) ** 0.5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:])
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + (math.log2(unique_elements) + math.log2(len(vector))) * 5




#score: {'n8_size512.txt': 266}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate a score based on the number of trailing zeros
  trailing_zeros_score = math.exp(-leading_ones / n)
  
  # Calculate a score based on the sum of absolute values of elements
  sum_abs_score = (sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector)))) ** 0.5
  
  return -(sum_elements * (1 - math.sin(sum_elements / n)) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       trailing_zeros_score * 
       sum_abs_score)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(map(math.sqrt, set(vector))) + 
       math.exp(-len(set([x for x in vector if x == 0])) / n) * 
       max((n - i) / n for i in range(min(n, len(set([x for x in vector if x == 1]))), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for x in Counter(vector).values() if x > 0), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + min(len(set(vector)) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(set(vector))) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log10(min(n - leading_ones, n) / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # Add a bonus term to vectors with more unique elements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq + (len(set(vector)) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(trailing_zeros/n) * min_freq + (abs(sum_elements - n/2) / n) + ((max(vector) - min(vector)) / 2 / n) - sum(x for x in set(vector)) / n - abs(sum_elements - n/2) ** 0.5




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  leading_zero_priority = -(leading_zeros / n)
  frequency_penalty = -(max_freq - min_freq)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - leading_zero_priority - frequency_penalty




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  
  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n
  
  # Calculate the sum of elements in the vector
  sum_elements = sum(vector)
  
  # Calculate the number of leading zeros in the vector
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n
  
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / (2*n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len([i for i in bin(int(''.join(map(str,vector))))[2:] if i == '0'])/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  - sum(x**3/n for x in set(vector))
  - ((sum(x for x in vector) ** 2)/n)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + abs(sum_elements - (n/2)) * (max(1 for x in set(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  + sum((x - min(vector)) ** 4 / n for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  - sum(x**4/n for x in set(vector))
  - min((n-i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0])))*math.sqrt(n)
  + math.exp(-n/(4*sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  - sum((x - min(vector)) ** 2 / n for x in set(vector))
  + math.exp(-n/(4*sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the number of unique elements
  num_unique = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - num_unique / n
  + (max_freq ** 2 / n) + min_freq ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  return -max_freq/min_freq




#score: {'n8_size512.txt': 334}
#island_id: 2
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - ((max_freq/min_freq)**3)*n**2/(n-1)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(Counter('0' + ''.join(map(str, vector))).keys())
  return -(sum(vector) / (n * 1.0)) ** 2 * math.exp(-leading_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n if n else 1))




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """Further optimized version of `priority_v1`."""
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 2)) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / (n*n) - math.sqrt(sum_elements) / math.sqrt(n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(len(set(vector))) * 5 - sum([math.log2(x) for x in Counter(vector).values()]) / len(set(vector)) - math.log2(n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([x**2 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([math.log2(x) for x in Counter(vector).values()]) / len(set(vector)) - (sum_elements**2)/(n*(n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(frequency[i] * math.log(frequency[i]) for i in frequency)
  - (abs(sum_elements - n/2) ** 1.5 + abs(n/2 - sum(x for x in vector)) ** 1.5) / n
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - sum(frequency[i] * math.sin(i) for i in range(n))

  # Use a priority queue to combine the scores and find the top score
  heap = []
  for x in frequency.values():
    heapq.heappush(heap, -x)
  score = 0
  while heap:
    score -= heapq.heappop(heap)

  return score




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(abs(sum_elements - n/2) + abs(n/2 - sum(x for x in vector)) / 3)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq/min_freq)**2
  - sum(frequency[i]**2/frequency[max(frequency)]**2 for i in frequency)
  + math.sin(sum(1 for _ in vector))
  - abs(math.cos(sum(x/(n*n) for x in vector)))
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(frequency[i] * math.log(frequency[i]) for i in frequency)
  - (abs(sum_elements - n/2) ** 1.5 + abs(n/2 - sum(x for x in vector)) ** 1.5) / n
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - sum(frequency[i] * math.sin(i) for i in range(n))
  - (abs(sum_elements - n/2) ** 0.5 + abs(n/2 - sum(x for x in vector)) ** 0.5) / n
  + math.log10(len([i for i in range(len(vector)) if vector[i] == 0])) / math.log10(max(frequency.values(), default=1))
  - (abs(sum_elements - n/2) ** 2 + abs(n/2 - sum(x for x in vector)) ** 2) / n




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** 0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, sum(x**3 for x in vector))
  ) ** (1/3)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**4 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**3, sum(x**4 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, 
                                  sum(x**3 for x in vector)) ** (1/3) + 
      sum(x for x in vector if x == 0) ** (n/len(vector))
  )




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(len(set(vector))) * 5 - (sum_elements**3) / ((n+1)**3)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + max(1, sum_elements))) + math.log2(len(set(vector))) * 5 - ((sum_elements**3) // (n*(n+1)*(n+2))) - (sum_elements**2)/(n*(n+1)) - len([i for i in range(n+1) if all(i % x == 0 for x in vector)])/(n*(n+1))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(len(set(vector))) * 5 - ((sum_elements**3) // (n*(n+1)*(n+2))) + math.sqrt(sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(str(x) for x in vector)[0]/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(map(str, vector)).get('0', 0) / n)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / n - sum(vector) ** 0.5




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(set(vector)) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / n + 10




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n * 
       sum(math.log2(abs(x)) for x in filter(lambda x: x != 0, vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))
  - (math.e**((max_freq-min_freq)/n) * sum(1 for x in set(vector)) - min(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))
  + (n/2-sum_elements)/(n*max_freq)
  + sum(1 for x in set(vector))/n * (n/2-sum_elements)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - 0.5 * np.tanh(sum_elements / n)
  - 0.1 * np.sin(sum(x/(n*n) for x in set(vector)))
  + abs(np.cos(sum(1 for x in set(vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + abs(math.cos(sum(1 for x in set(vector))))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:])
  unique_elements = len(set(vector))
  
  return -sum_elements * math.exp(-trailing_zeros / n) + (math.log2(unique_elements) + math.log2(len(vector))) * 5 - sum(Counter(vector).values()) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  entropy = -sum((count / n) * math.log2(count / n) for count in Counter(vector).values())
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + entropy * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:])
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + (math.log2(unique_elements) + math.log2(len(vector))) * 5




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]).bit_length()
  unique_elements = len(set(vector))
  return -sum_elements * math.exp(-trailing_zeros / n) + (math.log2(unique_elements) + math.log2(len(vector))) * 5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      max((n - sum(1 for elem in vector if not elem).bit_length()) / n, 0))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       max((n - bin(sum(1 for x in vector if x))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(vector) - len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum(vector) ** (0.5 / len(set(vector))) + max((n - leading_zeros) / n, 0))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  + math.exp(-((sum_elements-n/2)**2)/(n**2))*math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - sum(x**4/(n*n*n) for x in vector) / n
  + math.sqrt(len([i for i in range(len(vector)) if x != 0])) * abs(sum_elements - n/2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(n) - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))) / (n*len([i for i in range(len(vector)) if x != 0]))
  + (1 - max_freq/min_freq)**3




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  + len([i for i in range(len(vector)) if vector[i] == 0]) ** 3 * math.sqrt(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       max(0, 1 - (bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n)))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n if n else 1)) + sum(1 for bit in bin(int(''.join(map(str,vector))))[2:] if bit == '0') / (n if n else 1)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n if n else 1)) + sum(1 for bit in bin(int(''.join(map(str,vector))))[2:] if bit == '0')




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(trailing_zeros, n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(math.sqrt(sum(map(lambda x: abs(x), vector))) + 
    math.log((n - leading_zeros) / n) * 
    min(sum(map(abs, vector)), sum_elements) / 
    min(sum(map(abs, vector)), sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(n-1, -1, -1) if not all([v >= i for v in vector])))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * min(n, len(set(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - (sum_elements**2)/(n*max_freq) * math.exp(-(len(vector)-min(frequency.values()))/n)
  + sum((x-1)**2/(2*n) for x in frequency.elements()) / max_freq
  + min((n- i)**3/(6*n**2) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + max(1, sum_elements))) + math.log2(len(set(vector))) * 5 - ((sum_elements**3) // (n*(n+1)*(n+2))) - sum([math.log2(x) for x in Counter(vector).values()]) / len(set(vector)) + sum_elements / n




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + max(1, sum_elements))) + math.log2(len(set(vector))) * 5 - ((sum_elements**3) // (n*(n+1)*(n+2))) + sum([math.log(x) for x in Counter(vector).values()]) / len(set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  skewness = (sum((x - sum_elements/n)**3 for x in vector) / n) ** 0.5
  
  kurtosis = (sum((x - sum_elements/n)**4 for x in vector) / n) ** 0.25
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (variance**2)
  - skewness
  - kurtosis
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 261}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(variance + max_freq/min_freq + (sum_elements / n) ** 3 + ((n/2-sum_elements)/n) ** 3 + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - (sum(1 for x in vector if x) ** 2.5 / n)
  - abs(sum_elements/n - (max(vector) + min(vector))/2) * sum(1 for x in vector if x) / n
  - math.sin(n/(n-sum(1 for x in vector if x)))
  - math.cos((n/2-sum_elements)/n) * sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/(n+1)) + (abs(sum(vector) - len(vector) // 2) < 10)**(math.log2(len(vector))) * sum(vector) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - math.exp(-((sum_elements-n/2)**2)/n**2)*math.sin(3*math.pi*trailing_zeros/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(max_freq/min_freq)**(1/n) * (max_freq-min_freq)**(2/(n-1))
  
  # Add your own improvement here
  
  return 10 * min((x**3)/n for x in frequency.elements()) / max(frequency.values()) - trailing_zeros/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(max_freq/min_freq)**(1/n) * (max_freq-min_freq)**(2/(n-1))
  - sum((x-min(vector))/(max(vector)-min(vector)) for x in frequency.elements())**3/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - math.exp(-(sum_elements/n)**2)
  - math.exp(-abs(sum_elements-n/2))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) + sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / (n ** 1.5)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / n) + math.log2(unique_elements) * 5 - sum([x**2 for x in frequency]) / (n*n) - math.sqrt(sum([x for x in frequency]))/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + sum(1 for x in vector if x)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - (len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))) / n - max((x**2/n) for x in vector) + min(-sum(vector), 0)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  
  # Add an additional term to the priority function based on the distribution of elements
  return return_value + sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * max_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + (sum_elements ** 2 / n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / (n*n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / ((n+1)**3)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([x**2 for x in frequency]) / (n*n) + sum(frequency)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  unique_elements = len(set(vector))
  frequency = [Counter(vector)[i] / n for i in set(vector)]
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + math.log2(unique_elements) * 5 - sum([x**3 for x in frequency]) / ((n+1)**3)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0')/n) - sum(Counter(bin(int(''.join(map(str,vector))))[2:]).values()) / n




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str, vector))))[2:].count('0')/n) - sum(Counter(bin(int(''.join(map(str, vector))))[2:]).values()) / n + len([i for i in bin(int(''.join(map(str, vector))))[2:] if i == '1']) / (n * 2)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  bin_str = bin(int(''.join(map(str,vector))))[2:]
  return -sum(vector) * math.exp(-bin_str.count('0')/n) - sum(bin_str.count(digit)/n for digit in '01')




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - math.sqrt(sum(x**2/n for x in frequency.elements()))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n 
  - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - math.sqrt(n) * sum(x**2/n for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - max_freq/min_freq
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / min_freq
  + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - max(freq[x]/min(freq[x]) for x in freq)
  - math.sqrt(max(1 for i in range(n) if vector[i] > 0))




#score: {'n8_size512.txt': 263}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) - sum(x**3/n for x in set(vector)) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq + sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + sum(1 for i in range(len([i for i in range(len(vector)) if vector[i] == 0])) if i % 2 == 0) * math.sqrt(n)
  - (max_freq/min_freq)**2/(4*n**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  - ((max_freq+min_freq)/2*(n-min_freq-max_freq))/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  trailing_zeros = len(list(itertools.dropwhile(lambda x: x != 0, reversed(vector))))
  
  return -sum_elements + leading_ones / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum([1 for x in vector if x == 0])))

  return -(sum_elements * sum_elements) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, sum(x**3 for x in vector))
  ) ** (1/3)
  # Apply dynamic programming to optimize the calculation
  dp = [float('inf')] * (n + 1)
  dp[0] = 0
  for i in range(1, n + 1):
    for j in range(n, -1, -1):
      if vector[j - 1]:
        dp[i] = min(dp[i], dp[max(0, i - 1)] + sum(map(abs, vector[:j])))
  return -(dp[n] ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector))**2, sum(x**3 for x in vector))
  ) ** (1/3)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / min((sum(map(abs, vector))) ** 2, (sum(x**3 for x in vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n
  - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  + (max(vector) - min(vector)) ** 3 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n
  - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  - (sum_elements/n) * ((n/2)-min(frequency.values()))**2
  + math.sqrt(min(frequency.values()))*len([x for x in set(vector)])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (sum(x**2 for x in vector) - (n/2)**2) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  return -sum_elements ** (0.5 / len(set(vector))) - np.log10(sum(1 for elem in vector if elem == 1)) / np.log10(n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  @np.vectorize
  def f(x):
    return -(x**0.5 + math.exp(-x / len(set(vector)))) * sum_elements
  
  res = minimize(f, sum_elements)
  return -res.fun




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 if x else 0 for x in vector))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -sum_elements - leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)) - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)) * min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n) / n




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
      sum((n - i) / n * abs(x) for i, x in enumerate(vector) if x != 0) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) / (trailing_zeros + 1e-6)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) + len([x for x in vector if x == 1]) / n - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('1'))
  return -(sum_elements + trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  trailing_zeros = len(list(itertools.dropwhile(lambda x: x != 0, reversed(vector))))
  
  return -sum_elements + (leading_ones / n) - ((trailing_zeros + leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -sum_elements + leading_ones / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / (n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / n + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / (n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n or 1) - math.log10(trailing_zeros + 1) / math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n - trailing_zeros) - trailing_zeros / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0) - 1 if 0 in vector else len(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) * math.log2(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 if x != 0 else 0 for x in vector) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (math.sqrt(unique_elements) / n) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  unique_elements = len(set(vector))
  return -(sum_elements ** (math.sqrt(unique_elements / n)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, unique_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - sum_elements * math.log(trailing_zeros, 10) / math.log(n, 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))

  return -(sum_elements * sum_elements) + (math.log10(trailing_zeros) / math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -(sum_elements ** 2) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  return -(sum_elements ** 2) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))

  return -sum_elements * math.log10(trailing_zeros + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / min(n, len(set(vector)))) + 
   max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
   sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
   leading_zeros / min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(n, len(set(vector)))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) / max(sum_elements, len(vector)) for x in filter(lambda x: x != 0, vector)) + 
    sum(abs(x) / max(n, len(vector)) for x in filter(lambda x: x == 0, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(n, len(set(vector)))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / min(n, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(vector) - sum_elements
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').replace('.',''))
  
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) + (vector.count(0) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(vector) - sum_elements
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 320}
#island_id: 2
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - variance - (max_freq/min_freq)**2 - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - variance - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - max_freq/min_freq ** 3
  - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector))
  - (sum_elements/n)**4
  - abs(sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + math.sqrt(sum((x-n/2)**4/(n*3.5e-6) for x in vector))
  + (sum_elements/n)**1.5
  - math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum([bin(elem)[2:].count('0') for elem in vector])))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum_elements)) - str(sum_elements).count('1')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(vector).lstrip('0'))
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum(vector) + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector if i != 0) + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0)
  return -(zeros / n + (len(vector) - zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + len(str(0).join(map(str, filter(lambda x: x == 0, vector)))) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(n) - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))) / (n*len([i for i in range(len(vector)) if x != 0]))
  + (1 - max_freq/min_freq)**3
  - sum(x for x in vector) ** 2 / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (n - len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - max_freq/min_freq**2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(n) - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))) / (n*len([i for i in range(len(vector)) if x != 0]))
  + (1 - max_freq/min_freq)**3
  - sum(x**4/(n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum([elem for elem in vector]))[2:].count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum([elem for elem in vector]))[2:].count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum([bin(elem)[2:].count('0') for elem in vector])))
  return -(sum_elements + math.log10(trailing_zeros) / math.log10(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * abs(sum_elements - n/2) / math.sqrt(n)
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  odd_sum = sum(x for i, x in enumerate(vector) if i % 2 == 0)
  even_sum = sum(x for i, x in enumerate(vector) if i % 2 != 0)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (even_sum - odd_sum) ** 2 / (8*n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq/min_freq)**2
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**5/(n*n) for x in set(vector)) * len([i for i in range(len(set(vector))) if list(set(vector))[i] == 0]) / n
  - math.sqrt(sum(1 for x in vector if x)/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (sum(1 for i,x in enumerate(vector) if x==min(vector)))/(2*(n-min_freq))
  - (len([i for i in range(len(vector)) if vector[i] == min(vector)])/(n-min_freq))**2 * n/min_freq
  - (max(vector) - min(vector)) * math.sqrt(len([i for i in range(len(vector)) if x == max(vector) for x in vector])) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - (math.e**((max_freq-min_freq)/n) * sum(1 for x in vector if x)) ** (2/3)
  - 0.5 * math.tanh(sum_elements/n)




#score: {'n8_size512.txt': 272}
#island_id: 2
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  res = minimize(lambda x: -x[0] + 5*x[1] + 3*x[2], [1,0,0])
  result = np.array(res.x)
  priority = -(result[0]/n + (n - result[1]) ** 2 / n) + abs(result[0] - n/2) * (n - result[1]) / n
  return priority




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - math.sin(sum(x**2/(n*n) for x in vector))
  - math.cos(sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0), n)) / n)




#score: {'n8_size512.txt': 264}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + len(bin(sum(1 for elem in vector if elem == 1))[2:])) / (n ** 0.5)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) - (math.log(trailing_zeros+1)/math.log(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(abs, filter(None, vector))) / min(sum_elements, n) +
       math.exp(-(trailing_zeros / n)) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(abs, filter(None, vector))) / min(sum_elements, n) +
       math.exp(-(trailing_zeros / n)) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements / (n or 1) + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) - min(trailing_zeros, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log2(sum_elements + 1) / math.log2(n+1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n * abs(x) for i, x in enumerate(reversed(vector)) if x != 0) / min(sum(abs(x) for x in vector), n))**4




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))**2




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(map(lambda x: (x == 0 and 1 or -abs(x)), vector)) / max(len(set(vector)), 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) - 
    sum(1 for _ in range(n - leading_ones)) / n)**4




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - min(vector) + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  result = minimize(lambda x:  -x[0] + abs(sum_elements - n/2) * x[0] - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(i for i in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
            - (max(vector) - min(vector)) ** 2 / n
            + abs(sum_elements - n/2) ** 2 / n
            - math.sin(sum_elements / n)
            - (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector) * sum(i for i in set(vector)) ** 2 / n,
           [1], 
           method="SLSQP").x[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(i for i in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) ** 2 / n
  - math.sin(sum_elements / n)
  - result * (n-len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)




#score: {'n8_size512.txt': 346}
#island_id: 2
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(-np.sum(np.abs(vector-np.mean(vector)))/n) * np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(-np.sum(np.abs(vector-np.mean(vector)))/n) * np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.exp(-np.sum(np.abs(vector-np.mean(vector)))/n) * trailing_zeros / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + np.exp(-sum_elements**2 / n)
  - (np.sqrt(n) * np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n
  - np.sin(sum_elements / n)




#score: {'n8_size512.txt': 330}
#island_id: 2
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(-((n/2 - sum_elements)**2)/n**2)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(-((sum_elements - n/2)**2)/n**2)

  # Calculate the priority
  return -(np.sum(vector) / n + (n - np.sum([x for x in vector if x])) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.sum([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum([x for x in set(vector)]) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(np.sum(vector) - n/2) ** 2 / n
  - math.sin(np.sum(vector) / n)
  - np.exp(-np.sum([x for x in set(vector)])**3 / n)
  - (max_freq ** 2 / n) * trailing_zeros / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 307}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum_elements))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(trailing_zeros, n), n)))




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * max(0, 1 - sum(x for x in filter(lambda x: x != 0, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, np.sum(vector)) * 
       np.std(vector) / max(np.std(vector), 0.001))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum([elem for elem in vector]))[2:].count('0')
  return -(sum_elements + (trailing_zeros / n)) * (len(set(vector)) ** 0.5)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - np.sum(np.log(frequency.values()))/max_freq
  + entropy(frequency.values(), base=2) * n / max_freq




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  res = minimize(lambda x: -x + abs(sum_elements - n/2) * (n - sum(1 for y in vector if y)) / n - min((y**2)/n for y in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq, [sum_elements], method="SLSQP")
  return res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * max(len(str(x)) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / math.prod((i + 1 for i in range(n - 1)) or [1]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements + math.log2(trailing_zeros + 1) / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / math.sqrt(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
       ) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for x in vector if x == 0) / min(n, len(vector)) + 
       sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
      ) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector) / min(sum_elements, sum(map(abs, vector)))
       ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros) - math.log10(len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros) - sum_elements**2/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros) * sum_elements




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - sum(math.log2(x) for x in frequency.elements()) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - abs(max_freq/min_freq)**2 * 10




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + min(vector) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 255}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) / (n * sum(x == 0 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector[::-1] if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * vector.count(0) / (n * sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in filter(None, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if elem != 0).bit_length(), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))) / n




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * sum(1 for x in vector if x == 0) / (n * sum(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len([x for x in vector if x == 0]) / (n * sum(vector)))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) + math.exp(-len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (vector.count(0) / len(vector)) ** 2 / (n * sum(vector))




#score: {'n8_size512.txt': 337}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) - max_freq/min_freq - trailing_zeros/n - sum(x for x in set(vector))/n
  - (max(vector) - min(vector)) ** 2 / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - ((sum(1 for x in vector if x) - n//2)**2 / (n**2))
  - sum(x for x in set(vector)) ** 2 / (4*n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((x**2)/n for x in frequency.elements())
  + (len(set(vector)) - 1) / n
  - max(x for x in set(vector))/n
  - sum(freq**3 for freq in frequency.values()) / len(frequency)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2)/n for x in set(vector))




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len([x for x in vector if x == 0]) / (n * sum(vector))) * math.sqrt(sum(1/i for i in [x for x in vector if x != 0]))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x == 0) / (n * sum(vector)) * math.exp(-min(vector) / (n * sum(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  + (sum(1 for x in vector if x) - len([i for i in range(len(vector)) if vector[i] == 0]))/n * ((n/2) - abs(sum_elements - n/2))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - min(math.sqrt(n), math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - abs(sum_elements - n/2) * ((n/2) - abs(sum_elements - n/2))
  - sum(x for x in set(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1)).count('1'), 1) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1)).count('1'), 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x == 0) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * math.exp(-len([x for x in vector if x == 0]) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * math.prod(x for x in vector if x == 0) ** 2 / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector) * (n - sum(1 for x in vector)) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - min(math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (n - sum(1 for x in vector if x)), math.sqrt(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - (n-1)*math.exp(-(sum(1 for x in set(vector))/n)**2/(2*n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - sum(i**2/(n-i) for i in range(len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)
  - sum((x-1)**2 for x in frequency.values())/(n*min_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)
  - math.exp(-sum(x for x in set(vector))/n) * sum(1 for x in vector if x)/len(set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n) - abs(sum_elements - n/2) ** 3 / (8 * n ** 3) - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)
  - leading_zeros/n
  - sum(x**2/n for x in set(vector))
  + max_freq/min_freq * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Additional improvements
  return return_value - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + abs(sum_elements - n/2) ** 3 / (8 * n ** 3) + sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  - sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x for x in vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x-y) for x,y in zip(vector, [x//n for x in vector])) / sum(vector))




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(min(x-y, y-x) for x,y in zip(sorted(vector), [x//n for x in sorted(vector, reverse=True)])) / sum(vector))




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(min(x-y, y-x) for x,y in zip(sorted(vector), [x//n for x in sorted(vector)])) / sum(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len([x for x in vector if x == 0]) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x == 0) / (n * sum(vector)) * math.exp(-math.gcd(*vector) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = str(sum_elements).rstrip('0').count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max(len(str(sum_elements)) - len(str(sum_elements).lstrip('0')), 0) / n + 
    leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements * math.log10(n) - (trailing_zeros / (n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements / (n or 1) * math.log2(len(vector)) + trailing_zeros / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements / (n or 1) - (trailing_zeros / (n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / (n or 1)) * math.log2(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) - (math.log(trailing_zeros+1)/math.log(n)) - math.log(sum_elements+1)/math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) - ((math.log(trailing_zeros+1) if trailing_zeros > 0 else 0))/math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) - (math.log(trailing_zeros+1)/math.log(n))) + sum(Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n) - ((math.log2(trailing_zeros+1))/math.log2(n)))




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in filter(None, sorted(map(abs, vector), reverse=True))))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x-y) for x,y in zip(sorted(vector), sorted([x//n for x in vector]))) / min(sum(vector), sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros) - sum_elements**2/n - sum_elements*trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -(sum_elements + (trailing_zeros / n)) - math.log10(trailing_zeros) - sum_elements**2/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - min((x**3/n) for x in frequency) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt(n) * (max_freq/min_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x == 0) / n * math.exp(-len(set(vector)) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) / (n * sum(vector)) - len(set(vector)) / (2 * n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) + math.exp(-(len([x for x in vector if x == 0]) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq 
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n-i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x-min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - ((min_freq + max_freq)/2)**2/(4*n)
  - min((max_freq - i)**2/(2*(max_freq - 1)) for i in range(max_freq))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - 3*abs(sum_elements - n/2)**2/(8*n)
  - sum((x - min(vector))**2/n for x in set(vector))
  - math.exp(-(max_freq**2)/(4*n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(freq for freq, _ in frequency.items())**2/n) 
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) 
  - sum(x**2/(2*n) for x in vector) 
  - abs(sum_elements - n/2)**3/(8*n**3) 
  - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  + (min_freq**2/(4*n)) * (n-1) * max_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  penalty = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  bonus = abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  zero_bonus = math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)

  penalty += -min((x**2/n) for x in vector)
  bonus -= min_freq/max_freq
  penalty -= (max(vector) - min(vector)) ** 2 / n

  if leading_zeros > 0:
    penalty -= math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)

  return penalty + bonus + zero_bonus




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - trailing_zeros / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) ** 2 / n
  + (max_freq / min_freq) ** 2
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)
  - min(math.sqrt((x-n/2)**2 + (y-n/2)**2) for x, y in itertools.product(range(n+1), repeat=2))
  - math.sqrt(sum(1 for x in vector if x)/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)
  - min(math.sqrt((x-n/2)**2 + (y-n/2)**2) for x, y in itertools.product(range(n+1), repeat=2))
  + math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * abs(sum_elements - n/2) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(math.sqrt((x-n/2)**2 + (y-n/2)**2) for x, y in itertools.product(range(n+1), repeat=2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) * ((min(sum(map(abs, vector)), sum_elements)) / min(sum_elements, n)) / n 
      for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) * (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)) / n 
      for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) * ((n - i) / n) for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
    (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 * (n - len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       (max(vector) + 1) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(x for x in vector if x != 0) / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in set(filter(lambda x: x != 0, vector))) / min(sum(abs(x) for x in vector), len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - min(n, leading_ones)) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector))
  )




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len(set(x for x in vector if x == 0)) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len([x for x in vector if x == 0]) / (n * sum(vector)))




#score: {'n8_size512.txt': 253}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len([x for x in vector if x == 0]) + len(set(vector))) / (n * sum(vector))) * sum(1/element for element in set(vector) if element > 0)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len([x for x in vector if x == 0])) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + sum(1 for x in set(vector) if x < n)) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n)) - math.log2(n) * len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements / n + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.log10((n - leading_ones) / n) * 
       min(sum(map(np.abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(np.abs, vector)))**
       1.4)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector)))
      )**1.5




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(1 if x > 0 else 0 for x in vector) / min(sum_elements, sum(abs(x) for x in vector)) +
      sum(x for x in vector if x < 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum_elements)) - str(sum_elements).rstrip('0').__len__()
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
    trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     math.log(min(n - leading_ones, n)) * 
     sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(x for x in vector if x > 0) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector))) + 
       sum(1 if i < n - Counter(vector)[0] else 0 for i in range(n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      len(str(sum(1 for elem in vector if elem == 0)))).__truediv__(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) + 
      ((len(str(sum(1 for elem in vector if elem == 0))) - len(str(sum(1 for elem in vector)).rstrip('0'))) / n))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n + 
       sum(x for x in filter(lambda x: x > 0, vector)) / (sum(map(abs, vector)) * len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.prod((abs(x) for x in vector)) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) + 
      (len(set(vector)) ** 0.5) * sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = math.fsum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements - min(sum_elements, len(vector))) + (trailing_zeros / n) - ((len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) + len([x for x in vector[::-1] if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) + sum(1 for i in vector if i) / n - sum(1 for i in vector if not i) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n)) * math.sqrt(n) / (math.sqrt(sum_elements) + math.sqrt(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros / n) * math.exp(-trailing_zeros / (2*n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not bool(elem)))[2:]) - bin(sum(1 for elem in vector if not bool(elem)))[2:].index('1') if '1' in bin(sum(1 for elem in vector if not bool(elem)))[2:] else 0
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x) for x in vector])**0.5/len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)/n * 
       max((sum(abs(x) for x in vector))/sum([abs(x) for x in vector]), 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**2 for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) ** (1 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 0.5 for x in set(vector)) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    max((sum(map(abs, filter(None, vector)))) / sum(map(abs, vector)), 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) + trailing_zeros / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n or 1)) - (trailing_zeros / n) + min(trailing_zeros, n) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), np.sum(np.abs(vector))), n)) * 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       np.sum(np.abs(vector)) / min(np.sum(np.abs(vector)), np.sum(vector)))




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-np.count_nonzero(vector) / n) * 
       np.sum(np.abs(vector)) / min(np.sum(np.abs(vector)), np.sum(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x == 1))[2:].count('1')), n)) * 
       np.exp(-bin(sum(1 for x in vector if x == 1))[2:].count('1') / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -(sum_elements ** 2) + (trailing_zeros / n) - math.sqrt(n) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -(sum_elements * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  return -(sum_elements ** 2) + (trailing_zeros / n) - math.log(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  return -(sum_elements ** 2) + (trailing_zeros / n) - math.log10(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)

  # Improved part
  if sum(1 for x in vector if x) > n//2:
    return 0.5 * sum(x**3/(n*n) for x in vector) / len([i for i in range(len(vector)) if vector[i] == 0]) - math.log10(sum_elements/n)
  elif sum(1 for x in vector if x) < n//2:
    return 0.5 * sum(x**3/(n*n) for x in vector) / len([i for i in range(len(vector)) if vector[i] == 0]) - math.log10((n-sum(1 for x in vector if x))/n)

  # Further improvement
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n + 
       sum(1 for i in range(n) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = sum(1 for elem in vector if elem == 1)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).rstrip('0'))
  
  return -(sum_elements ** (math.sqrt(len(set(vector)))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 296}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).replace("0b", "")))
  return -(sum_elements ** (1 / len(set(vector))) + 
       np.exp(-trailing_zeros / n) * 
       min(sum_elements, max(vector))
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements())
  - max(x for x in frequency.elements()) / n
  + (min(x for x in frequency.elements()) - max(x for x in frequency.elements())) ** 2 / n * max_freq
  + math.sqrt(sum(x**3/(n*n) for x in frequency.elements())) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - statistics.median(vector) / n
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (math.sin(sum(vector)/n) + math.cos(sum(1 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -(sum_elements * (n - trailing_zeros)) / (n * math.log2(n))




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  # Calculate the logarithm of the product of all non-zero elements
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 for x in vector if x == 1])))
  return -(sum_elements * (n - leading_ones)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([x for x in vector if x == 0])))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len(set(x for x in vector if x == 0)) / (n * sum(vector)) * math.exp(-(len([x for x in vector if x == 0]) + len(set(x for x in vector if x == 0))) / (n * sum(vector)))




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(Counter(vector).values()) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len([x for x in vector if x == 0])) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len([x for x in vector if x == 0])) / (n * sum(vector))) - len([x for x in vector if x > 0]) / n




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log(n - leading_ones, 10) * 
      sum(map(abs, filter(None, sorted(vector, reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       (trailing_zeros or 1) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, sorted(vector, reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 255}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) / len([x for x in vector if x == 0]) * math.exp(-len(set(vector)) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len(set(x for x in vector if x == 0)) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-Counter(x for x in vector).get(0, 0) / (n * sum(vector)))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(x for x in vector if x))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len(set(vector))) / (n * sum(vector)) * len(set(vector)) / n)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len(set(x for x in vector if x == 0)) / (n * sum(vector))) + len(list(filter(lambda x: x != 0, vector))) / (n * sum(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len(set(vector))) / (n * sum(vector))) - sum(1 for x in set(vector) if x < 0)




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  # Calculate the logarithm of the product of all non-zero elements
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + (log_product - sum(map(math.log, [x for x in vector if x != 0]))) / math.log(n)




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  # Calculate the logarithm of the product of all non-zero elements
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  unique_elements, counts = zip(*Counter(vector).items())
  entropy = -sum((count / n) * math.log2(count / n) for count in counts if count > 1)
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log(n) + entropy




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  # Calculate the logarithm of the product of all non-zero elements
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  # Normalize the sum by the size of the cap set
  normalized_sum = sum_elements / n
  
  return -(normalized_sum * (n - trailing_zeros)) + log_product / math.log(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))
  + (n/2-sum_elements)/(n*max_freq)
  + sum(1 for x in set(vector))/n * (n/2-sum_elements)
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.exp(-(sum(x**8/(n*n*n*n*n*n*n) for x in set(vector))))
  + sum(1 for x in set(vector))/n * (n/2-sum_elements)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  + sum(x**5/(n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  + (math.log(n)) * (len([i for i in range(len(vector)) if vector[i] == 0]) / n + len(set(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  + sum(1 for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) / n * math.sqrt(n)
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements**2)/(4*n) - sum(x**2/(2*n) for x in vector) - abs(sum_elements - n/2)**3/(8*n**3) - sum((x - min(vector))**2/n for x in vector) / len(set(vector))
  - math.sqrt(n)*len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (max(vector) - min(vector)) ** 2 / n
  - (abs(sum_elements - (n/2))) * ((sum(1 for x in vector if x) - n//2)**2/(4*n))
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len(set([x for x in vector if x == 0])) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len([x for x in vector if x == 0]) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(x for x in vector if x == 0)) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-len(set(vector)) / (n * sum(vector)))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) + sum(1 for _ in range(trailing_zeros))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements / n




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - leading_zeros/n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n 
  - trailing_zeros/n
  + (sum(1 for x in frequency if frequency[x] > 1)**2/(n*max_freq))
  - max((x**4/(n*n*n)) for x in vector) / max_freq
  - min((x**3/(n*n)) for x in vector) / max_freq 
  + math.exp(-(sum_elements-n/2)**2/(n*0.1)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**2 for x in frequency) / (n*max_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  + (sum(1 for x in frequency if frequency[x] > 1)**2/n)
  - sum(x**4/(n*n*n) for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] in set(vector)]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  - (sum(1 for k, v in frequency.items() if v > 1)**2/n)
  - (len([i for i in range(len(vector)) if vector[i] == 0])**2/(n*max_freq))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n 
  - trailing_zeros/n 
  - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())
  + (sum(1 for x in frequency if frequency[x] > 1)**2/n)
  - sum(x**4/(n*n*n) for x in frequency) / max_freq




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -((sum_elements ** (0.5 / math.gcd(n, len(set(vector))))) + 
    min(n - leading_zeros, n) / n * 
    sum(x for x in Counter(vector).values() if x != 1) / sum(abs(x) for x in vector)
   )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector)
     ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) - 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
          sum(x for x in vector if x != 0) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - np.log(n) - sum((x**3)/n**2 for x in set(vector)) - np.sum(np.cos(x/n) for x in vector)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) 
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
  - min((x**2/n) for x in vector) 
  + max(-sum(vector), 0) 
  + (max(vector) - min(vector)) / n 
  - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n 
  - trailing_zeros/n 
  - max_freq/min_freq 
  - (max(vector) - min(vector)) ** 2 / n 
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
  - sum(x**3/(n*n) for x in set(vector))
  - math.log(n) 
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0]))).bit_length()
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 for x in vector if x == 1])))
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - leading_ones - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements**2)/(n*max_freq) * math.exp(-(len(vector)-min(frequency.values()))/n)
  + sum((x-1)**2/(2*n) for x in frequency.elements()) / max_freq
  + min((n- i)**3/(6*n**2) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - (max_freq**2)/(4*min_freq) * math.exp(-(sum_elements-min(frequency.values()))/n)
  + sum((x-1)**3/(6*n**2) for x in frequency.elements()) / max_freq
  - sum(1 for x in set(vector) if 0 < x < n//2) / n
  - (n/min_freq)**2 * math.exp(-(sum_elements-min(frequency.values()))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) / len(set(vector))) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_ones = len(bin(sum(1 for elem in vector if elem == 1))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - trailing_ones) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    ((n - zeros_count) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n)) / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (vector.count(0) + sum(x == 0 for x in vector)) / (n * sum(vector)) * math.exp(-(vector.count(0) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-((Counter(vector)[0] + len(set(vector))) / (n * sum(vector))))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-(len(set(vector)) + len([x for x in vector if x == 0])) / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * math.log10(n) - (len([x for x in vector if x == 0]) / len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - math.sqrt(n * len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector) - sum(x for x in set(vector)) ** 2 / (n * max(frequency.values())) + leading_zeros/n - max_freq/min_freq
  - ((sum_elements - n/2)**2 / n) - abs(sum_elements - n/2) * (max((x**2/n) for x in vector)) 
  - sum(x**2 for x in set(vector)) / (n * min(frequency.values())) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + min(sum(1 for _ in range(i+1) for i, _ in enumerate(vector)), n//2) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + math.sqrt(len([x for x in frequency.keys() if frequency[x] > 1])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())

  # Use scipy's minimize function to optimize the priority function
  res = minimize(priority_v1, (0.5,) * len(vector), method="SLSQP", options={'disp': True})
  return -res.fun




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (max_freq-1)/(min_freq+1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1) - max_freq/min_freq - trailing_zeros/n
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)




#score: {'n8_size512.txt': 313}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - trailing_zeros/n
  - ((n/2 - sum(1 for x in vector if x))/n) ** 3
  + math.sqrt(min((x**2)/n for x in frequency.elements())) * max_freq / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - abs(min(vector)) * min_freq
  - (max(vector) - min(vector)) ** 2 / n
  - sum(1 for x in vector if x > n/2) / (n/2)
  - sum(1 for x in vector if x < -n/2) / (-n/2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x**4/(n**2) for x in set(vector)) * max_freq/min_freq
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq/min_freq
  + min((abs(x-n/2)/n) for x in vector)




#score: {'n8_size512.txt': 360}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  freq = Counter(vector)

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n 
  - (max_freq/min_freq)**2 - sum((x**3)/n for x in freq.elements())**1.5




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n)
  + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - abs(sum_elements - (n/2)) * math.sqrt(len([i for i in range(len(vector)) if vector[i] != 0])) / math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(x**2 for x in vector) / (6*n) * len([i for i in range(len(vector)) if vector[i] == 0])
  - math.sqrt((max_freq - min_freq) ** 2 + (n/2 - sum_elements) ** 2 + (sum(1 for x in vector if x) - n//2) ** 2)
  + max_freq * min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**2 for x in vector) / (6*n) * len([i for i in range(len(vector)) if vector[i] == 0])
  - math.sqrt((max_freq - min_freq) ** 2 + (n/2 - sum_elements) ** 2 + (sum(1 for x in vector if x) - n//2) ** 2)
  - abs(sum_elements - (n/2)) * max_freq / math.sqrt(n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * len([x for x in vector if x == 0]) / (n * sum(vector)) * math.exp(-Counter(x for x in vector).most_common(1)[0][1] / (n * sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - len(set([x for x in vector if x == 0]))) / (n * sum(vector)) * math.exp(-(Counter(x for x in vector).get(0, 0) + len(set(vector))) / (n * sum(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + (sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)
  - sum((x-n/2)**2/n for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in frequency if frequency[x] > 1)) ** 2 / n
  + math.sqrt(sum(frequency[x]**2 for x in frequency) / len(set(vector))) * n / len(vector)
  - math.sqrt(max(freq**2 for freq in frequency.values())) * n / len(set(vector))
  - min((x**3/n) for x in vector) + sum(x**4/(n*n) for x in set(vector)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log((n - leading_ones) / n) * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log((n - leading_ones) / n) * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1 + 
       sum(1 for elem in vector if elem == 0)**2 / (unique_elements*(sum_elements+1))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x) ** (1 / len(set(vector))), filter(None, vector)))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])).rstrip('0'))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])).rstrip('0'))
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([1 if x == 0 else -1 for x in vector]))[2:])
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  product_zeros = math.prod(2**i for i, x in enumerate(vector) if x == 0)
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements + product_zeros / math.log2(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.fsum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      math.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       np.exp(-sum(1 for elem in vector if elem == 1) / n))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * (n - leading_ones) / n - sum_elements / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 for x in vector if x == 0])).count('0')
  
  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0
  
  return -(sum_elements * (n - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum([1 for x in vector if x == 1])).count('1')
  trailing_zeros = len(str(sum([1 for x in vector if x == 0]))) - leading_ones

  log_product = math.prod(x for x in vector if x != 0) if any(x != 0 for x in vector) else 0

  return -(sum_elements * (n - leading_ones - trailing_zeros)) / n + log_product / math.log2(n) - sum_elements




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.exp(-abs(sum_elements - n/2)/n)
  return -max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  return -max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**5/(n**2) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return -(max_freq/min_freq)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + min_freq ** 2 / (max_freq ** 2)
  - sum(x for x in set(vector)) ** 3 / (n ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max_freq ** 2.5 / n) + (min_freq ** 3 / n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Additional improvements
  return return_value - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + abs(sum_elements - n/2) ** 3 / (8 * n ** 3) + sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  - sum(x**3/(n*n) for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))/n
  - (max(vector) - min(vector)) ** 4 / (16 * n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Additional improvements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Use of mathematical induction
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Use of dynamic programming
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Use of machine learning
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_fre




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros).bit_length()) / n) ** 2 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq/min_freq) ** 2 / n
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x-1)**2/(2*n) for x in frequency.elements()) / max_freq
  + min((n- i)**3/(6*n**2) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - (sum_elements**2)/(n*max_freq) * math.exp(-(len(vector)-min(frequency.values()))/n)
  + sum((x-1)**3/(6*n) for x in frequency.elements()) / max_freq
  + min((n- i)**4/(24*n**3) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - sum(x**2/n for x in set(vector))
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x-1)**4/(24*n**3) for x in frequency.elements()) / max_freq
  - min((n- i)**5/(120*n**4) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + sum(x**3/(n*n*n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - (sum_elements**2)/(n*max_freq) * math.exp(-(len(vector)-min(frequency.values()))/n)
  + sum((x-1)**2/(2*n) for x in frequency.elements()) / max_freq
  + min((n- i)**3/(6*n**2) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - sum(np.square(np.array(frequency.values()))/max_freq)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((len(vector) - trailing_zeros) / (n - 1))**2)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x for x in filter(None, sorted([x for x in vector if x != 0], reverse=True)[:len(vector)-leading_ones])) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x for x in filter(None, sorted([x for x in vector if x != 0], reverse=True)[:n])) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in sorted(vector, reverse=True)) / sum(abs(x) for x in vector)




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x for x in filter(None, sorted([x for x in vector if x != 0], reverse=True))) / min(sum_elements, sum(map(abs, vector))) + 
      (sum(map(lambda x: x**2, vector)) / sum_elements) ** 0.5
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.log2(n) * bin(int(''.join(map(str,vector)))).count('0')




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros/n) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(1 + len(vector) / sum_elements) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) + min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
       1 - (sum(x for x in vector if x > 0) / sum_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x > 0) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for x in vector if x > 0) / sum_elements - 
       len([x for x in set(vector) if x == 0]) * n / len(set(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/sum_elements) ** 2 for x in vector)
  - math.sqrt(sum(1 for x in frequency.elements() if frequency[x] > 1)) * (n/len([i for i in range(len(vector)) if vector[i] == max_freq]))
  
  def f(x):
    return -(x**2/n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((y**2/n) for y in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
    - (max(vector) - min(vector)) ** 2 / n
    + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
    - sum(y**3/(n*n) for y in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
    - math.log(n)
    + min((y/sum_elements) ** 2 for y in vector)
    - math.sqrt(sum(1 for z in frequency.elements() if frequency[z] > 1)) * (n/len([i for i in range(len(vector)) if vector[i] == max_freq]))
  
  res = minimize(f, 0).x[0]
  return -re




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/sum_elements) ** 2 for x in vector)
  - (max_freq/min_freq)**(1/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/sum_elements) ** 2 for x in vector)
  - (max_freq/min_freq)**(1/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(np.sum(vector) / n + (n - np.sum(np.ones_like(vector))) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.sum(np.ones_like(vector))) / n - min((x**2)/n for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.mean(vector) / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(np.sum(vector) - n/2) * (n - np.sum(np.ones_like(vector))) / n
  - np.mean([x**3/(n*n) for x in vector]) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/np.sum(vector)) ** 2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(abs(sum_elements) + 1) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  + (math.exp(-sum_elements**2 / n) * (abs(sum_elements - n/2) * ((n/2) - abs(sum_elements - n/2)))) - 0.1




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x for x in set(vector)) ** 2 / (8*n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n)
  + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x for x in set(vector)) / n * abs(sum_elements - n/2) * (max_freq/min_freq)**0.




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - (sum(x**2/n for x in set(vector))) / 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * ((len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n) ** 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + math.sqrt(sum((x/3)**3 for x in frequency.elements())) * 3 / n
  - abs(sum_elements / (n**2)) * sum_elements / n
  - math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + math.sqrt(sum((x-n/2)**4/(n*3.5e-6) for x in frequency.elements()))
  + (sum_elements/n)**1.5
  - math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements/n)**1.5
  - math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + math.exp(-(sum_elements - n/2)**2 / (2 * n))
  - sum(x**5/(n*n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + 1))) / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(map(abs, vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 + abs(1 - 2 * sum_elements / len(vector)))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((leading_zeros + trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector)) - len(str(vector).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(x for x in set(vector)) / n + abs(sum_elements - (n/2)) * max_freq
  - sum(x**2/n for x in frequency.elements()) / max_freq
  - math.sqrt((sum_elements - n/2)**2) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(max(vector) ** 2 / n) + (min(vector) ** 2 / n) + math.exp(-(n - max_freq)) * sum_elements / n + abs(sum_elements - (n/2)) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(x for x in set(vector)) / n + abs(sum_elements - (n/2)) * max_freq
  - (sum(1 for x in vector if x) - n//2)**2/(2*n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_distribution = [k for k, g in Counter(vector).items() if g > 1]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in zero_distribution]) / len(zero_distribution)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 10)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (math.sqrt(len(set(vector))) / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - (sum_elements ** 2) * math.log(n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(math.fabs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - leading_ones) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     math.log10((n - leading_ones) / n) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -((sum_elements / n) ** (1 - (leading_zeros / n)) + 
       ((n - leading_zeros) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-2 * (abs(2 * sum_elements / len(vector) - 1))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * min(math.exp(-trailing_zeros / n), 10)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-math.log(2) * abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * min(trailing_zeros / n, 10)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + min((x**3/n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))
  + min((x**3/n) for x in set(vector))
  - (max_freq/min_freq)**2
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(math.cos(sum(1 for x in set(vector))))
  + (n/2-sum_elements)/(n*max_freq)
  + sum(1 for x in set(vector))/n * (n/2-sum_elements)
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.exp(-(sum(x**8/(n*n*n*n*n*n*n) for x in set(vector))))
  + sum(1 for x in set(vector))/n * (n/2-sum_elements)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(math.fabs(sum_elements - len(vector) / 2), 2) - math.pow((trailing_zeros / n), 2)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(math.fabs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(math.fabs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))
  - (sum(1 for x in set([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2)/n for x in frequency.elements())
  - leading_zeros/n - sum(x for x in set([x for i, x in enumerate(vector) if x != 0]))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros_factor = 1 - leading_zeros / len(str(sum_elements))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - leading_zeros_factor - sum(x for x in set([x for i, x in enumerate(vector) if x != 0])) * (1 - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + leading_zeros/n) + abs(sum_elements - n/2) * max((x**2/n) for x in frequency.elements()) + (max_freq/min_freq)**0.5




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (1 + math.cos(math.pi / 2 - 4 * math.atan(1 - 2 * sum_elements / len(vector)))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * math.exp((trailing_zeros / n))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 10)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (abs(2 * sum_elements / len(vector) - 1))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 10)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 0.5), 10)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 * math.exp(-len(vector)**2 / (2*n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x**2 for x in vector)) / len(set(vector)) + 
       (n - len([x for x in vector if x > 0])) / n * 
       sum(abs(x) for x in vector) / max(sum(abs(x) for x in vector), math.sqrt(sum(x**2 for x in vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-abs(sum_elements) / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 10)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, math.sqrt((n+1)/8))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) - sum_elements * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 1.5




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(min(sum_elements, sum(map(lambda x: x**0.5, filter(None, vector)))) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
      ) ** 2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max_freq/min_freq)**(1/n) * math.exp(-(sum_elements-n/2)**2/(n*0.5))
  - sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / n
  + math.sqrt(sum(x**3 for x in vector) / n) / math.sqrt(max(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max_freq/min_freq)**(1/n) * math.exp(-(sum_elements-n/2)**2/(n*0.5))
  - sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / n
  + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - leading_zeros/n - max_freq/min_freq
  - (sum_elements**2)/n - (n - sum(1 for x in vector if x)) ** 4/(16*n)
  + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - (max(vector) - min(vector)) ** 3 / (6 * n)
  - math.log(n) * sum(x > 0 for x in vector) / len(vector)
  - math.exp(-(sum_elements-n/2)**2/(n*0.5)) * max_freq/min_freq




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(len(vector) - leading_ones, n) * np.exp(-leading_ones / n) / n + 
      sum(map(abs, filter(None, vector))) / sum_elements * 0.7 + 
      sum(sorted(vector)[::-1]) / sum_elements * 0.3 + 
      (sum(vector[:n//2]) - sum(vector[n//2+1:])) / sum_elements * 0.5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(len(vector) - leading_ones, n) * np.exp(-leading_ones / n) / n + 
      sum(sorted([abs(x) for x in vector])) / sum_elements * 0.7 + 
      sum(sorted([x for x in reversed(vector)])) / sum_elements * 0.3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x**2 for x in vector)) / len(set(vector)) + 
       sum(Counter(str(x)).get('0', 0) for x in vector) / n * 
       min(sum(x for x in vector), max(vector)))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(math.sqrt(sum_elements) / len(set(vector)) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - ((max(vector) - min(vector)) ** 3) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 301}
#island_id: 2
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * min(Counter(vector).values())) - sum(x for x in set(vector)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10) + ((len(vector) - trailing_zeros) % 2 != 0) * sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) 
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(max_freq/min_freq)**(1/n) * (max_freq-min_freq)**(2/(n-1))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.pow(abs(sum(vector) - len(vector)/2), 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - math.sqrt(sum(vector))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) + (sum_elements ** 2) / (n * (n - 1))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())
  
  return max(math.exp(-(sum_elements/n) ** 2), math.exp(-(n-sum(1 for x in vector if x))/n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())
  + (sum(x**2 for x in vector) - (sum_elements)**2)/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2) + (np.log10(sum_elements/n) + np.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector)) + np.exp(-abs(sum_elements - n/2)) * trailing_zeros - 0.5 * min(frequency.values()) / max(frequency.values())




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())
  + (sum(x**2 for x in frequency) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, 10)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 100)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: -(np.sum(np.abs(x)) ** (0.5 / len(set(x))) + 
                     min(n - bin(sum(1 for elem in x if elem == 1))[2:].count('1'), n) / n * 
                     np.exp(-bin(sum(1 for elem in x if elem == 1))[2:].count('1') / n)), 
           x0=np.random.rand(len(vector))).fun




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = sum(1 for elem in vector if elem == 1)
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    math.exp(-Counter(vector).get(0, 0) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, [i for i in vector if i])) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(abs, vector))) * len(set(vector)) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + math.sqrt(abs(sum_elements - n/2) * (max_freq - min_freq))
  
  return -(min((abs(x-n/2)/n) for x in vector) - math.sqrt(min((x**2)/n for x in vector))) ** 2 / n
  - (math.sqrt(n)) * sum(x**4/(n**2) for x in set(vector)) * max_freq/min_freq
  + min((abs(x-n/2)/n) for x in sorted(vector)[::-1])




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x**4/(n**2) for x in set(vector)) * max_freq/min_freq
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq/min_freq
  + min((abs(x-n/2)/n) for x in vector)
  - sum(x**(3/2)/(n**1.5) for x in frequency.elements()) / math.sqrt(max(frequency.values()))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements ** 2) / n - (n - sum(1 for x in vector if x)) ** 4 / (16*n) 
  + math.sqrt(sum((x**3)/n for x in frequency.elements())) / math.sqrt(max(frequency.values()))
  - sum(x**4/(n**2) for x in set(vector)) * max_freq/min_freq
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq/min_freq 
  + min((abs(x-n/2)/n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.log(n)
  + min((x/sum_elements) ** 2 for x in vector)
  - (math.sqrt(sum(1 for x in vector if x <= n//2)) + math.sqrt(sum(1 for x in vector if x > n//2))) * sum(1 for x in vector if x % 2 == 0) / n
  + min((x/sum_elements) ** 3 for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version with more complex formula:
  return -abs(sum_elements) * (1 - math.exp(-((sum_elements - len(vector) / 2) ** 2) / (len(vector) / 2)**2)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -abs(sum_elements) * (1 + math.exp(-math.pow(trailing_zeros / n, 2))) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) + math.sqrt(sum_elements * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) + math.exp(-3 * (trailing_zeros / n))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 + math.cos(math.pi * abs(1 - 2 * sum_elements / len(vector)))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements * (n - sum_elements))) * ((sum_elements > 0 and n > sum_elements) or (sum_elements < 0 and n < abs(sum_elements)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - ((len(vector) // 2) - trailing_zeros) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n ** 0.5))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n ** 0.5)) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, len(str(sum(vector)).rstrip('0')) / len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       max(0, (n - str(sum(x for x in vector)).rstrip('0').count('0')) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - (str(sum_elements).index(str(sum_elements)[0])) 
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - bin(int(''.join(map(str, vector))))[2:].rfind('0')
  return -(abs(sum_elements - n/2) + leading_zeros/n + trailing_zeros/(n*math.log(n))) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (math.pi - math.acos(1))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements - len(vector) / 2) ** 2 + (trailing_zeros / n) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (1 - max(vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       math.exp(-sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])).bit_length() / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  ones = sum(x for x in vector if x == 1)
  zeros = len(vector) - ones
  ratio_ones_zeros = ones / zeros if zeros > 0 else 0
  
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
    math.exp(-leading_ones / n) * 
    min(len(vector) - leading_ones, n) / n + 
    ratio_ones_zeros)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 + math.exp(-math.pow((len(vector) / 2 - sum_elements), 2))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - 0.5 * abs(1 - 2 * sum_elements / len(vector))) ** 2 - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * math.exp(-sum(vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.sqrt(sum_elements) * (1 - max(vector)) + (trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log10(trailing_zeros) / math.log10(n) + 
       sum(x for x in filter(None, map(abs, vector))) * len(set(vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log10(trailing_zeros) / math.log10(n) + 
       sum(x for x in filter(None, map(abs, [x for x in vector if not bool(x)]))) / (sum_elements or 1))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3.5, 10)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - (sum_elements % 4 == 0 and trailing_zeros % 2 == 1) * 5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(1 - 2 * sum_elements / len(vector))) - math.log10(trailing_zeros + 1) - (sum_elements > n // 2)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * ((sum_elements > 0) or (math.isnan(sum_elements)))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - sum([i * j for i, j in Counter(vector).items() if i != 0])




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * ((sum_elements > 0) or (math.isnan(sum_elements))) - sum(x**2 for x in vector)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * ((sum_elements > 0) or (math.isnan(sum_elements))) - sum([1 if i == 0 else i for i in vector]) / n




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * ((sum_elements > 0) or (math.isnan(sum_elements))) * min(abs(sum_elements), trailing_zeros)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * ((sum_elements > 0) or (math.isnan(sum_elements))) * (1 - math.exp(-((len(vector) / 2) - sum_elements)**2))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * math.exp(-trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) + (math.e ** (-abs(sum_elements) / len(vector)) + math.e ** ((len(vector) - trailing_zeros) / n))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 4, 5)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved formula: 
  return -math.pow(abs(sum_elements) + 1, 2) * (trailing_zeros / n) + math.exp(-abs(sum_elements) / len(vector))




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -(abs(sum_elements) ** 1.5 + math.pow(trailing_zeros / n, 3)) - ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) + math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements)))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3.7, 12)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 5)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 100)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 100) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum((n - i) * sum(map(lambda x: abs(x), vector)) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (math.sqrt(len(set(vector))) / 
     math.ceil(math.log10(n) + 1)) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / sum(map(lambda x: abs(x), vector))
 )




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  avg_sum = len(vector) / 2
  return -(abs(sum_elements - avg_sum) ** 2 + (trailing_zeros / n) ** 2) - math.sqrt(abs(sum_elements)) * (sum_elements > 0) - (1 if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((sum_elements - len(vector) / 2) ** 2 + (trailing_zeros / n) ** 2) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - abs(trailing_zeros) * (trailing_zeros > n/2)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)
  - math.sqrt(abs(sum_elements)) * (1 - math.cos(math.pi * sum_elements / max(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -abs(sum_elements) * (math.exp(-trailing_zeros / n) + 1) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 + math.exp(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Improved version of the formula:
  return -math.exp(-abs(sum_elements) / len(vector)) * math.pow(1 + abs(trailing_zeros / n), 2) - ((sum_elements > len(vector) // 2) > 0) * min(math.pow((trailing_zeros / n), 3), 10)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - (max(vector) - min(vector)) ** 2 / (4 * math.sqrt(n))
  + abs(sum_elements - n/2) * math.sqrt((n - sum(1 for x in vector if x)) / n)
  - max_freq/min_freq
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in set(vector) if x > 0 and x < n/2) * math.sqrt(n)
  - sum(1 for x in set(vector) if x > 0 and x > n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] > n/2]))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - (sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)**2
  + (max_freq/min_freq)**2
  - sum((x-n/2)**4/(n*n*n) for x in vector)/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  score = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  score += abs(sum_elements - n/2) * ((n - sum(1 for x in vector if x)) > 0) * (n//2 - sum(1 for x in vector if x))
  score -= min((x**2/n) for x in vector)
  score += max(-sum(vector), 0)
  score -= trailing_zeros / n
  score -= max_freq / min_freq

  return score




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements) / len(vector)) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(Counter(map(str, vector)).values())) * (2 - abs(1 - sum(Counter(map(str, vector)).values()) / len(vector))) - math.pow((vector.count('0') / n), 3) + ((sum(vector) > len(vector) // 2) > 0) * min((vector.count('0') / n) ** 3, 100)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 + math.sin(10 - 20 * abs(sum_elements / len(vector)))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 100)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - (abs(sum_elements - len(vector) // 2)) / len(vector)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(math.pow((trailing_zeros / n), 3), 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements))) + sum(Counter(vector).values())**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) * math.log10(n)) - (bin(int(''.join(map(str, vector))))).count('0') / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-math.log(len(vector))/len(vector)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements)))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements))) * ((trailing_zeros / n) ** 3) - math.pow(2, -(sum_elements / len(vector)))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.prod(x for x in filter(None, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  max_element = max(vector)
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * math.prod(x for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, math.prod(x for x in filter(lambda x: x != 0, vector))) +
       max_element / sum_elements)




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
      sum((n - i) / n * (x**3 if x != 0 else -1) for i, x in enumerate(vector)) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
      len(str(vector).rstrip('0'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
    sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
    len(str(vector).rstrip('0').lstrip('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
       (sum(map(ord, str(vector).rstrip('0')))-len(str(vector).rstrip('0'))*9)/n)




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - (abs(sum_elements - len(vector) // 2)) / len(vector) + sum([x * math.log(x) for x in Counter(vector).values() if x > 1])




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements))) * (abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-math.sqrt(abs(sum_elements)) / (1 + abs(sum_elements))) - (abs(sum_elements - len(vector) // 2) + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements) / len(vector)) * (1 + math.sin(3.14 * abs(trailing_zeros / n)))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)
  return (-sum_elements - math.log2(len(vector)) - (math.log2(len(vector)).log2() % 1)) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - math.exp(-sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(1 - 2 * sum_elements / len(vector))) + math.exp(-3 * trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - leading_zeros/n - max_freq/min_freq
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - sum(x**3/n for x in vector)
  - math.sqrt((max_freq/min_freq)**2 + ((n/2-sum_elements)/n)**2 + (sum_elements/n)**2) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((sum_elements/n)**3 + ((n/2-sum_elements)/n)**3) * len([i for i in range(len(vector)) if vector[i] == max(vector)]) / n
  + sum(x**5/(n*n*n*n*n) for x in vector) * abs(sum_elements - (n/2))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n 
  skewness = (sum((x - sum_elements/n)**3 for x in vector) / n )**0.333
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - skewness
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3 + (sum_elements/n)**3) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**6/(n*n*n*n*n) for x in vector)
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3 + (sum_elements/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - sum(x**3/n for x in vector)
  - math.sqrt((max_freq/min_freq)**2 + ((n/2-sum_elements)/n)**2 + (sum_elements/n)**2) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(x**7/(n*n*n*n*n*n) for x in vector)
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements)) * ((sum_elements > 0) and (abs(sum_elements) <= len(vector) / 2)) - (1 if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((sum_elements - len(vector) / 2) ** 2 + (trailing_zeros / n) ** 2) - math.sqrt(sum_elements * (sum_elements > 0))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements)) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - (math.log10(trailing_zeros+1) if trailing_zeros > 0 else 0)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 + math.sqrt(sum_elements) * min(sum_elements, len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) - Counter({str(i): vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 - len(vector) ** 2 / 4 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) + (math.sqrt(sum_elements) - 0.5) * min(1, trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n))) / n)**4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)**4 * np.exp(-np.sum(np.square(np.array(vector) - np.mean(np.array(vector)))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(Counter({i: 1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)}).values()) / n)**4




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)**4




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the entropy of the vector's elements
  element_counts = Counter(vector)
  element_entropy = -sum((count / len(vector)) * math.log2(count / len(vector)) for count in element_counts.values() if count > 0)
  
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) - element_entropy




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + math.sqrt(trailing_zeros / (n * sum_elements))) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * math.log(n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - sum_elements * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) + abs(sum_elements) * (1 - math.sin(math.pi * sum_elements / (2 * len(vector))))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-((trailing_zeros / n)**3)) + (sum_elements > len(vector) // 2) * min(10, (trailing_zeros / n)**3) - sum_elements**2 / (n*len(vector))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - ((math.ceil(math.log10(n)) if sum_elements > 0 else 0))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 1.5 - math.sqrt(sum_elements) * (sum_elements > 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())) * (sum_elements - n/2)
  + abs(sum_elements - (n/2)) * ((n - sum(1 for x in vector if x)) ** 2 / n - (sum(1 for x in vector if x) - n//2) ** 2 / n)
  - math.sin(sum_elements / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))
  - abs(sum_elements - n/2) ** 1.5 / (2*max(frequency.values()))
  - (len([i for i in range(len(vector)) if vector[i] == 0]) / math.sqrt(n)) * sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - math.exp(-sum(x**4/(n*n*n) for x in frequency.elements()) / (2*max(frequency.values())))
  + abs(sum_elements - n/2) ** 1.5 / (2*max(frequency.values()))
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.exp(-sum(x**4/(n*n*n) for x in frequency.elements()) / (2*max(frequency.values())))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))
  + abs(trailing_zeros/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (sum(x**2 for x in frequency.elements()) / (2*max(frequency.values()))) ** 1.5 / n
  + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * math.sqrt(sum((x/2)**2 for x in frequency.elements())) - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values()))

  return result




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 if x else 0 for x in vector))[2:].count('1')
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * math.prod(x for x in Counter(vector).values() if x != 0) / 
       min(sum_elements ** 2, math.prod(x for x in Counter(vector).values() if x != 0)))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * math.prod(x for x in filter(lambda x: x != 0, vector)) / 
    sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (1 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3.5, 20) - math.exp(-abs(sum_elements)**1.8) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  leading_zero_priority = -(leading_zeros / n)
  frequency_penalty = -(max_freq - min_freq)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zero_priority - frequency_penalty

  def f1(x):
   return np.exp(-(x**2/n))
  res1 = minimize(f1, max_freq)
  penalty = res1.fun
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - leading_zero_priority - frequency_penalty - penalty




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  leading_zero_priority = -(leading_zeros / n)
  frequency_penalty = -(max_freq - min_freq)

  penalty_weight = math.exp(-(min_freq/max_freq)**2)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - leading_zero_priority - frequency_penalty - penalty_weight




#score: {'n8_size512.txt': 340}
#island_id: 2
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  penalty = min((x**10)/n for x in vector)
  frequency_penalty = -(max_freq - min_freq)
  leading_zero_priority = -(leading_zeros / n)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - penalty + frequency_penalty + leading_zero_priority




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
    sum(c[1] * math.log2(len(str(c[0])) / n) for c in Counter(vector).most_common()) / n)




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements ** (1 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.log2(len(str(vector).lstrip('0').rstrip('0')) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(n)) - len(str(n).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(map(lambda x: math.exp(-x), filter(None, vector)))
   )




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** 0.5 / len(set(vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n-1)) / n) ** 1.3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) * math.exp(-sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 280}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))

  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       math.log((n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 1, vector))) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, filter(lambda x: not x == 0, vector))) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/min(len(set(vector)),n)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) * trailing_zeros




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) + math.pow(trailing_zeros / n, 3) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((i + 1) * (len(vector) - i) for i in range(len(vector)) if vector[i] == 0) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(sum(x**4/n for x in vector))
  + len(set(vector)) * math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum((x**3)/n for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - sum((x**4)/n for x in frequency.elements()) / max(frequency.values())
  + math.sqrt(sum(x**2/n for x in frequency.elements())) * 2 / n
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - sum(vector, key=lambda x: abs(x)) / n
  - (max(vector) - min(vector)) ** 4 / (8*n)
  - math.sqrt(sum(x**4/n for x in vector))
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in frequency.elements())
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - (math.sin(sum(vector)/n) + math.cos(sum(vector)/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - abs(math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - (max_freq/min_freq)**(2/3)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))
  - 2 * sum(x for x in vector if x > 10)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + (bin(int(''.join(map(str, vector)))).count('0') / n)) ** 2 - math.sqrt(sum(vector)) * (sum(vector) > 0)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements - len(vector) / 2) * (1 + math.exp(-(trailing_zeros / n)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))
  return -(abs(sum_elements - len(vector) / 2)) + (trailing_zeros / n) - math.sqrt(sum_elements) * (sum_elements > 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - (math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)) - sum_elements**2




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) + sum([math.sin(i / (i+1)) for i in range(1, int(math.sqrt(n))+1)])




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3.5, 10) - math.exp(-abs(sum_elements)**1.8) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - 3*abs(sum_elements - n/2)**2/(8*n)
  - sum((x - min(vector))**2/n for x in set(vector))
  - math.exp(-(max_freq**2)/(4*n))
  - sum(x for x in frequency.elements() if x < max_freq) / (n * max_freq)
  + sum(x for x in frequency.elements() if x > 0) / (n * sum_elements)
  - abs(sum(vector) - n/2)**3/(6*n**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - 3*abs(sum_elements - n/2)**2/(8*n)
  - sum((x - min(vector))**2/n for x in set(vector))
  - math.exp(-(max_freq**2)/(4*n))
  - (min(frequency.values(), default=0) + max(frequency.values() or 1, default=1)) / n
  - math.exp(-(sum_elements - n/2)**2/(8*n * sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - 3*abs(sum_elements - n/2)**2/(8*n)
  - sum((x - min(vector))**2/n for x in set(vector))
  - math.exp(-(max_freq**2)/(4*n))
  - ((sum_elements-n//2)**2)/(n*min_freq)
  - (math.sqrt(n)/3)*abs(sum_elements - n/2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(frequency)) / n - trailing_zeros/n - max_freq/min_freq 
  - (max_freq**2/(4*n)) * (n-1) * min_freq
  - (min_freq**2/(4*n)) * (n-1) * max_freq
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - 3*abs(sum_elements - n/2)**2/(8*n)
  - sum((x - min(vector))**2/n for x in set(frequency))
  - math.exp(-(max_freq**2)/(4*n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq
  - min((x**2/n) for x in frequency.elements())
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements())
  + 2 * math.sqrt(min(x**2/n for x in frequency.elements()))
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + leading_zeros/n - max_freq/min_freq
  - min((x**2/n) for x in frequency.elements())
  - (max(frequency.values()) ** 3 / n) / max_freq
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * math.sin(sum(vector)/n)
  - math.sqrt(n) * math.log(len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n
  - trailing_zeros/n - max_freq/min_freq
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector))**2 / (n*max(frequency.values()))
  - (sum_elements/((sum_elements + (n - sum(1 for x in vector if x))) * math.sqrt(n)))
  - math.sin(sum(sorted(vector)[::-1])/n)




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector))
  - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**7 + (sum_elements/n)**7 + ((n/2-sum_elements)/n)**7)
  - abs(sum(x**10/(n*n*n*n*n*n*n*n*n) for x in vector))
  - sum(x**11/(n*n*n*n*n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**8 + (sum_elements/n)**8 + ((n/2-sum_elements)/n)**8)
  - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n*n) for x in vector))
  - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 \
         - math.sqrt(sum_elements) * (sum_elements > 0) \
         - (1 if sum_elements > 0 else 0) \
         - sum((x for x in vector if x % 3 == 0 or x % 5 == 0)) \
         - 2 * sum(x for x in vector if x > 10) \
         - sum(abs(x - len(vector) / 2) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i % 3 == 0 or i % 5 == 0) / len(vector)) - (math.sqrt(sum(vector)) * (max(vector) > 10))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (1 - max(vector))
  - sum(x for x in vector if x > 10)
  - 2 * sum(x for x in vector if x % 3 == 0 or x % 5 == 0)
  + len([i for i in range(1, n+1) if math.gcd(i, n) != 1])




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0)) - 2 * sum(x for x in vector if x > 10) - math.exp(-abs(sum_elements - len(vector) / 2) + (trailing_zeros / n))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((abs(sum_elements - len(vector) / 2) + (trailing_zeros / n))) ** 0.5 - math.sqrt(sum_elements) * (sum_elements > 0)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(1 for x in vector if x % 3 == 0 or x % 5 == 0) - len(vector) / 2) + len([x for x in vector if x == 0]) / n) ** 2 - math.sqrt(sum(vector)) * (sum(vector) > 0)




#score: {'n8_size512.txt': 327}
#island_id: 2
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n

  # Calculate the number of leading zeros in the vector
  leading_zeros = len(str(sum_elements).lstrip('0'))

  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  # Check if the vector is a balanced one, i.e., sum of elements is equal to n/2
  if sum(1 for x in vector) == n//2:
    return math.sqrt(n)
  else:
    return -math.sqrt(n)

  # Calculate the frequency of each element in the vector
  frequency = Counter(vector)
  
  # Calculate the maximum and minimum frequencies
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n + min_freq / max_freq
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n + min_freq / max_freq




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - abs(sum_elements) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-abs(sum(vector))) * (len(str(bin(int(''.join(map(str, vector)))))) / len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3.5, 10) - math.exp(-abs(sum_elements)**1.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) + 
       ((n - leading_ones) / n) * math.exp(-math.fabs(sum(map(abs, vector)) - sum_elements)))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
         np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
         sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(math.isclose, map(abs, vector), [0] * len(vector))) ** (0.5 / min(len(set(vector)), n)) + 
      sum(Counter(vector).values()) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(sum(1 for elem in vector if elem == 0), n)) / n)




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(len(bin(sum(1 for elem in vector if elem == 1))[2:])) if bin(sum(1 for elem in vector if elem == 1))[2:].count('1') < i) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + sum((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(i for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - len(vector) / 2) * (math.exp((len(vector) - bin(int(''.join(map(str, vector))))[2:].count('0')) / n) + (sum(x for x in vector if x % 3 == 0 or x % 5 == 0)))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.sqrt((sum_elements / n) ** 2 + (trailing_zeros / n) ** 2) * (1 if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum(1 for x in vector if x % 3 == 0 or x % 5 == 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0)) - min([abs(x) for x in vector])




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)
  if sum(Counter({str(i): i for i in vector}).values()) <= n/2:
    return -math.sqrt(sum_elements)
  else: 
    return math.log(trailing_zeros)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - sum([math.cos(i/(i+1)) for i in range(1, int(math.sqrt(n))+1)])




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - math.tan(len(vector)) * sum([i for i in range(1, int(math.sqrt(n))+1)])




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - sum_elements * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - math.sin(math.sqrt(abs(sum_elements))) * (len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-math.log(2) * abs(sum_elements) / len(vector)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(Counter(map(str, vector)).values())) * (2 - abs(1 - 2 * sum(vector) / len(vector))) - math.pow(len([x for x in vector if x == '0']) / n, 3)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * math.exp(-sum_elements/len(vector)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n) - abs(1 - sum_elements / len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(1 - 2 * sum_elements / len(vector))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 3, 10) - math.exp(-abs(sum_elements)**2) * (trailing_zeros / n)
  if sum(1 for bit in bin(int(''.join(map(str, vector))))[2:] if bit == '0') > trailing_zeros:
    return -sum_elements + min(trailing_zeros/n ** 3,10)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector))) / 
       max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / 
       sum(map(abs, vector)) / n - 
       (sum(1 for elem in vector if not elem) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) ** 0.75 / 
       sum(map(abs, vector)) ** 0.75 / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(sum_elements) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0)) - min([abs(x) for x in vector]) + abs(sum_elements - math.sqrt(sum_elements)) * sum_elements / len(vector)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 2 - math.sqrt(abs(sum_elements)) * (sum_elements > 0) - (1 if sum_elements > 0 else 0) - (math.log10(trailing_zeros+1) if trailing_zeros > 0 else 0) - min([abs(x) for x in vector]) - sum((x for x in vector if x % 3 == 0 or x % 5 == 0))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + bin(int(''.join(map(str, vector)))).count('0') / n) ** 2 - math.sqrt(sum(x for x in vector if x > 1)) * (sum(x for x in vector if x > 1) > 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + (bin(int(''.join(map(str, vector)))).count('0') / n)) ** 2 - math.sqrt(sum(vector)) * (sum(vector) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + sum(1 for x in vector if not x)) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) / 2) + (bin(int(''.join(map(str, vector)))).count('0') / n)) ** 2 - math.sqrt(sum(x**2 for x in vector)) * (sum(vector) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  skewness = sum((x - sum_elements/n)**3 for x in vector) / (n * math.pow(sum_elements, 1.5))

  kurtosis = sum((x - sum_elements/n)**4 for x in vector) / (n * math.pow(sum_elements, 2.0)) - 3

  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - variance * variance
  - (max_freq/min_freq)**2
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + skewness
  + kurtosis
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max_freq/min_freq)**2
  - (sum_elements - n/2) ** 2 / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * abs(sum_elements - n/2)
  - sum(x**3/(n*n*n) for x in vector) / len(vector)
  - sum(x**4/(n*n*n*n) for x in vector) / (len(vector)**2)
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(x**7/(n*n*n*n*n*n) for x in vector) / (len(vector)**2)
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector) / (len(vector)**3)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)

  # calculate variance
  variance = sum((x - sum_elements/n)**2 for x in vector) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n - leading_zeros/n 
  - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n 
  - max_freq/min_freq
  - min(frequency.values())/(n*max_freq)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - len(vector) / 2) + (trailing_zeros / n)) ** 3 * math.exp(-sum_elements) - (1 if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(abs(sum(vector) - len(vector) / 2)) * (sum(vector) > 0) - math.log10(bin(int(''.join(map(str, vector))))[2:].count('0') + 1)




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.e ** (abs(sum(vector) - len(vector) / 2)) + math.log10(bin(int(''.join(map(str, vector))))[2:].count('0') + 1)) * sum(x for x in set(vector))




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((sum_elements / (n * 2)) ** 2) + ((trailing_zeros / n) ** 2) - math.sqrt(sum_elements) * (sum_elements > 0) - sum(x for x in Counter(vector).values() if x % 3 == 0 or x % 5 == 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((abs(sum_elements - len(vector) / 2)) ** 1.5 + (trailing_zeros / n) ** 2 + 
       math.sqrt(sum(x for x in vector if x > 10)) * sum(x for x in vector if x % 3 == 0 or x % 5 == 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) / len(set(vector))) ** 0.5 + 
           sum(x > 0 for x in vector) / (n * math.log2(n)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - sum(x/(n*math.sqrt(n)) for x in vector) ** 2
  + math.exp(-sum_elements/n) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(frequency.values()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - sum(x/(n*n) for x in frequency.elements())
  - math.sqrt(sum((x**4)/n for x in frequency.elements()))
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + max(-sum_elements, 0) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq**2*min_freq**2)/(max(freq.values())**2)
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(math.cos(x/n) for x in vector)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - np.sum((x**2)/(n*n) for x in set(vector))
  + (max_freq/min_freq)**(1/3)
  - sum(x for x in set(vector))/n - sum(x for x in frequency.elements())/(2*n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(map(abs, vector))) ** 2, sum(x**3 for x in vector)) - 
       np.log(min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) * 
       sum(map(abs, filter(None, vector))) / (sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**3 for x in filter(None, vector)) / 
       (min((sum(map(abs, vector)))**2, sum(abs(x)**3 for x in vector)) ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * np.sum(np.abs(vector)**3) / 
       min(sum_elements ** 2, np.sum(np.abs(vector)**3)) -
       math.log((n - leading_ones) / n) * sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  trailing_zeros = len(list(itertools.dropwhile(lambda x: x != 0, reversed(vector))))

  return -sum_elements + leading_ones / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements + (n - trailing_zeros) * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2)) ** 3) + (len(vector) == trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy of the vector
  ent = 0
  for i in Counter(vector).values():
    p = i / len(vector)
    if p > 0:
      ent -= p * math.log2(p)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ent




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) / 2) * (2 if sum_elements > len(vector) // 2 else 1) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 2
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-abs(sum_elements/len(vector)-0.5))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 3 / (n * len(vector) ** 2) + math.sqrt((trailing_zeros / n) ** 2 + ((len(vector) // 2 - sum_elements) ** 2))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.log(len(vector)) * (abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x for x in filter(None, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    if sum(map(abs, vector)) > 0 else 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(vector) - leading_ones
  return -(sum_elements * (trailing_zeros / n)) + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i != 0)))
  return -sum_elements + leading_ones / (n * math.log2(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(x**3 for x in vector))
     + len(str(sum(vector)).rstrip('0')) / n
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum_elements ** 2, sum(x**3 for x in vector)) - 
    sum(x*(x-1) for x in sorted(set(vector), reverse=True))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements ** (math.log(len(set(vector))) / math.log(n)) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)) + 
       math.exp(-trailing_zeros / (n - trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (math.sqrt(len(set(vector)))) + 
       math.exp(-leading_zeros / n) * (n - leading_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum_elements ** 2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))) ** 1.4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum_elements))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n) ** 1.4 * max(sum_elements, 1)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * n / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum_elements / min(sum_elements, n) * 
      (len(vector) - leading_ones) / len(vector)
  )




#score: {'n8_size512.txt': 271}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n)
      ) + sum_elements / (2 ** 0.5 * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(max((n - i) / n for i in range(min(leading_ones, n), n)), sum_elements / n) * 
      sum_elements / min(sum_elements, n)
  )




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())
  
  return max(math.exp(-(sum_elements/n) ** 2), math.exp(-(n-sum(1 for x in vector if x))/n)**2)
  + sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min((x**3/(n*n)) for x in vector) * max_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + 0.5 * (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n))
  return max(math.exp(-(sum_elements/n) ** 2), math.exp(-((n-sum(1 for x in vector if x))/n)**2))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  + (math.log10(sum_elements/n) + math.log10((n-sum(1 for x in vector if x))/n)) * sum(1 for x in set(vector))
  + math.exp(-abs(sum_elements - n/2)) * trailing_zeros
  - 0.5 * min(frequency.values()) / max(frequency.values())
  
  return max(math.exp(-(sum_elements/n) ** 2), math.exp(-(n-sum(1 for x in vector if x))/n)**2)
  + sum(x**2/(3*n) for x in vector) - (max(vector) - min(vector)) * sum(x for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(x[0] + (n - x[1]) ** 2 / n) + abs(x[0] - n/2) * (n - x[1]) / n - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(i for i in set(vector)) / n - len(str(sum(vector)).rstrip('0'))/n - max(Counter(vector).values()) / min(Counter(vector).values())

  x0 = [sum(vector), n - sum(1 for i in vector if i)]
  res = minimize(objective_function, x0)

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**3 for x in vector)) ** (1.5 / len(set(vector))))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
          sum(x**3 for x in vector)) + 
       math.log10(n) / len(set(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       sum((i / n) ** 2 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((i / n) ** 2 for i in range(min(n, len(vector))))
      )




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**4/n for x in frequency.elements())




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (max_freq - min_freq)**2 / (n*max_freq)
  - abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2) / n
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_fre




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**4/n for x in frequency.elements())
  - math.sqrt(sum(x**5/n for x in set(vector)))
  + max(min((x**3)/n for x in frequency.elements()), 0)
  - min(min((x**4)/n for x in frequency.elements()), 0, (max_freq-min_freq)**2)
  - sum(1 for x in range(len(vector)) if vector[x] == 0) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(vector) - leading_ones
  return -(sum_elements ** 2 * (trailing_zeros / n)) + leading_ones / n




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 2
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -(sum_elements * (trailing_zeros / n))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  # Improved version using weighted sum
  return -(sum(map(lambda x: abs(x)**2, vector)) / (unique_elements * sum_elements) + 
    math.log((n - leading_ones) / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the number of unique elements
  unique_count = len(set(vector))
  
  # Calculate the variance
  variance = np.var(vector)
  
  return -(sum_elements ** (0.5 / unique_count) + 
    min(n - leading_ones, n) / n * 
    sum(map(abs, filter(None, vector)))/max(1, sum_elements) * 
    math.sqrt(variance) / max(math.sqrt(variance), 0.001))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) / n * 
      sum(map(abs, filter(None, vector)))/max(1, sum_elements) * 
      math.sqrt(np.var(vector)) / max(math.sqrt(np.var(vector)), 0.001) + 
      trailing_zeros / (n * unique_elements))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / (len(vector) // 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  skewness = (sum((x - sum_elements/n)**3 for x in vector) / n) / math.pow(variance, 1.5)
  
  kurtosis = (sum((x - sum_elements/n)**4 for x in vector) / n) / math.pow(variance, 2)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3 + (sum_elements/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)
  - skewness
  - kurtosi




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - math.log2(sum(1 for i in range(len(vector)) if vector[i] == max(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3 + (sum_elements/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)
  + leading_zeros/n - (variance ** 0.5) * leading_zeros / n
  - math.sqrt((leading_zeros/n)**3 + ((max_freq/min_freq)**2))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(n/(sum_elements + (n - sum(1 for x in vector if x))))

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n 
  - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3 + (sum_elements/n)**3)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == max(vector)]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in vector if x) ** 2 / n) * abs(sum_elements - n/2)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len(vector) / n
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + sum(1/np.log(i+1) for i in range(min(frequency.values()), max(frequency.values())+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) * sum(1 for x in vector if x) / n
  - sum(x**3/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  + math.exp(-(n/(sum_elements + (n - sum(1 for x in vector if x))))) + math.sin(sum(vector)/n)
  - np.sum(np.log(frequency.values()))/max_freq
  - 2 * sum(x for x in frequency.elements() if x > 0) / n
  - min((x**4)/(n*n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + sum(1/math.log(i+1) for i in range(1, len(vector)+1)) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum(1 for i in range(len(vector)) if vector[i] >= n/2 and i < len(vector)-trailing_zeros) / max_freq)**3
  - sum((x**5)/n for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 324}
#island_id: 3
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  if not vector:
    return 0.5
  
  if len(set(vector)) == 1: # all elements are the same
    return -sum_elements / n
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + abs(sum_elements % 2)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n + 1) ** 0.5 * trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (1 + math.cos(math.pi * (2 * sum_elements / len(vector) - 1))) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** (sum_elements % 2 == 0)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  return -(sum_elements ** 2 / (n * len(vector))) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2)) + entropy




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - math.ceil(len(vector) / 2))) < math.sqrt(math.ceil(len(vector) / 2) * 0.5)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (trailing_zeros / n))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(bin(int(''.join(map(str,vector)))).count('0'))
  return -(sum_elements * (len(trailing_zeros) / n))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p * math.log2(p) / len(vector) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(sum_elements ** 2 / (n * len(vector))) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2)) + entropy - sum([p * math.log2(len(vector) - p + 1) for p in Counter(vector).values()])




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2)) + entropy




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean = sum_elements / len(vector)
  variance = sum((x - mean) ** 2 for x in vector) / (len(vector) - 1)
  return -(sum_elements ** 2 / (n * len(vector))) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2)) - (variance / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  return -(sum_elements ** 2 / (n * len(vector))) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2)) + entropy + sum([i/math.pow(2, i) for i in Counter(vector).values() if i > 0])




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (len(str(sum_elements).lstrip('0')) ** 2 / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (leading_zeros ** 2 / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (leading_zeros ** 2 / n)
  - sum(x*(n-x)/n for x in range(n)) * len([i for i,x in enumerate(vector) if x == 0]) / n
  + math.sqrt(len([x for x in set(vector) if x != 0])) * n / len(set(vector))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + entropy)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2)) - entropy * math.exp(-math.log(n) / 4)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + sum(1 for bit in bin(int(''.join(map(str, vector)))) if bit == '0'))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) - (sum(1 for x in vector if x == 0) / n) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + 
       abs(sum_elements - len(vector) // 2) + 
       (len(set(vector)) - 1)**2 / (n * math.log2(n)) + 
       sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x) ** (0.5 / len(set(vector))) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, filter(None, vector)))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1)) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)

  # Calculate the sum of elements in the vector
  sum_elements = sum(vector)
 
  # Calculate the number of leading zeros in the vector
  leading_zeros = len(str(sum_elements).lstrip('0'))
 
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
 
  if sum_elements <= n/2:
    return math.sqrt(n) - (n - sum(1 for x in vector if x))/n
 
  else:
    return -math.sqrt(n) + (sum_elements - n/2)/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n
  - math.sin(sum_elements / n)
  - (n * sum(1 for x in vector if x == 0)) / len(vector)
  + sum(x for x in set(vector)) ** 4 / n

  # Add more terms to further improve the priority function
  return -math.log10(sum_elements) - math.cos((sum_elements - n/2) / n) * (n - sum(1 for x in vector if x)) / n + (max_freq - min_freq) ** 3 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  - sum(x for x in set(vector)) ** 3 / n
  - abs(sum_elements - n/2) ** 2 / n
  + max_freq ** 2 / n
  - math.sin(sum_elements / n)
  - (n * sum(1 for x in vector if x == 0)) / len(vector)
  + sum(x for x in set(vector)) ** 4 / n
  - sum(x for x in set(vector)) ** 5 / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) + 
       sum_elements / unique_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
    math.exp(math.log((n - leading_ones) / n) * sum_elements / sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in set(vector)))
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)

  # New calculation
  return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n) + min(x**8/(n*n*n*n*n*n*n) for x in set(vector))
  - sum(x**9/(n*n*n*n*n*n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6)
  - abs(sum(x**10/(n*n*n*n*n*n*n*n*n) for x in set(vector)))
  - math.exp(-(min_freq/max_freq)**2) * n

  # Optimization
  return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in set(vector))
  + math.exp(-n/(4*sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5)
  
  # New calculation
  def objective_function(x):
    return -(math.exp(-(max_freq/min_freq)**2) + (1 + math.sin(sum_elements/n)) * n) + min(x**8/(n*n*n*n*n*n*n), 0) - sum(x**9/(n*n*n*n*n*n*n*n), 0) - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6) - abs(min(x**10/(n*n*n*n*n*n*n*n*n), 0)) - math.exp(-(min_freq/max_freq)**2) * n
  
  res = minimize(objective_function, x0=np.ones(len(vector)), method="SLSQP")
  
  return res.fun




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([x ** 2 for x in Counter(vector).values()]) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - sum((x - (sum_elements / len(vector))) ** 2 / n for x in vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**4/n for x in frequency.elements())
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**5/n for x in frequency.elements())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - sum((x - (sum_elements / len(vector))) ** 2 / n for x in vector)

  # Additional term based on the frequency of elements
  return - min_freq / max_freq * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**4/n for x in frequency.elements())
  
  # Add this new term to improve the algorithm:
  return return_value + sum(vector) / n * math.log(len(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + min((n-sum_elements)**2, (sum(1 for x in vector if x) - n//2)**2, (max_freq-min_freq)**2)
  - sum(x**4/n for x in frequency.elements())
  - math.sqrt(n) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -sum((i / n) ** 0.5 * (n - i) + np.log(i + 1) for i in range(min(n, leading_ones), n)) / sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_values = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_values) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n +
       sum_elements / max(unique_values, 1)
       )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(abs(sum(map(lambda x: abs(x), vector))), sum_elements) / 
    min(sum_elements, sum(map(lambda x: abs(x), vector))) + 
    (leading_ones / len(vector)) ** 2)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.log2(trailing_zeros / n) - math.log2(n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, len(vector)), 0)) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))) * 
       max((n - leading_ones) / n, 0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(bin(int(''.join(map(str, vector))))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + (n - trailing_zeros) * math.log2(n))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(x**3 for x in vector))
    + len(str(sum(vector)).rstrip('0')) / n
    - sum(1 if i == 0 else 0.5**i for i in range(min(n, leading_ones), 0, -1))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x**4 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(x**3 for x in vector)) ** 1.5 + 
     len(str(sum_elements).rstrip('0')) / (n * math.log10(n)) +
     sum(1/((i+1)**2) for i in range(min(n, leading_ones), n)) * 
     sum(x**4 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(x**3 for x in vector))
   )




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy of the vector
  entropy = 0
  if len(set(vector)) > 1:
    entropies = [-(x / len(vector)) * math.log2(x / len(vector)) for x in Counter(vector).values()]
    entropy = sum(entropies)
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  avg_element = sum_elements / n
  return -(math.sqrt(abs(sum_elements - avg_element)) + math.sqrt(trailing_zeros / n) + abs(entropy))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return -(sum_elements ** (0.5 / unique_counts) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n + 
       min(trailing_zeros, n) * np.exp(-trailing_zeros / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  unique_values = set(vector)
  average_value = sum_elements / len(unique_values)
  
  return -(sum_elements ** (0.5 / len(unique_values)) + 
       min(n - leading_ones, n) / n + 
       min(trailing_zeros, n) / n + 
       (average_value ** 2) / len(unique_values))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n + 
       min(trailing_zeros, n) * np.exp(-trailing_zeros / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  unique_elements = len(set(vector))
  mean_element = sum_elements / unique_elements
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.exp(-leading_ones / n) / n + 
       math.exp(-trailing_zeros / n) / n + 
       mean_element)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector)))).lstrip('0').replace('0b', ''))

  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([x**2 for x in vector]) / (n * math.log2(n))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  entropy = -sum([p * math.log2(p) / math.log2(len(set(vector))) for p in Counter(vector).values() if p > 0]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy using the formula for Shannon entropy
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate entropy
  p_values = [x / len(vector) for x in Counter(vector).values()]
  p_values = [p for p in p_values if p > 0]
  entropy = -sum([p * math.log2(p) for p in p_values])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p < 0.5])




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([x ** 2 for x in vector]) / (n * math.log2(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  + math.sqrt(n) * (abs(sum_elements - n/2) + abs(sum(1 for x in vector if x) - n//2)) / 2
  - sum(x**3/(n*n) for x in set(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum(x**2 for x in vector) / (n * math.log2(n))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  # Calculate the sum of unique elements
  sum_unique_elements = sum(sorted(set(vector)))

  # Improved version
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - sum_unique_elements / 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)
  
  return -(math.sqrt((sum_elements ** 2 + trailing_zeros ** 2) / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.sqrt(sum_elements))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.log2(len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) - (len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  
  # Add an additional term to the priority function based on the distribution of elements
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  return_value += abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return_value -= min((x**2/n) for x in vector)
  return_value += max(-sum(vector), 0)
  return_value += (max(vector) - min(vector)) / n
  return_value -= sum(sorted(vector)[::-1]) / n
  return_value += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return_value -= sum(x for x in set(vector)) / n
  return_value -= trailing_zeros/n
  return_value -= max_freq/min_freq
  return_value -= (max(vector) - min(vector)) ** 2 / n
  
  if(sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return math.sqrt(n)
  elif(sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return -math.sqrt(n)
  
  # Add an additional term to the priority function based on the distribution of elements
  for i in range(len(vector)):
    if vector[i] !=0:
      return_value += (x - (sum(vector) / n)) ** 2 / (n * max_freq)
  
  return return_valu




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  
  # Add an additional term to the priority function based on the distribution of elements
  return_value = sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * max_freq)
  if sum(1 for x in vector if x) > n//2:
    return_value += math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  elif sum(1 for x in vector if x) < n//2:
    return_value -= math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  return return_valu




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  
  # Add an additional term to the priority function based on the distribution of elements
  return return_value + sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * max_freq)
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (1 - (max(frequency.values()) / len(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  
  # Add an additional term to the priority function based on the distribution of elements
  return_value = 0
  for i, v in enumerate(sorted(set(vector))):
    if v == 0:
      return_value += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
    else:
      return_value -= (v - min(vector)) ** 2 / n
  return return_value + sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * max_freq)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) - sum(1 for elem in vector if elem == 1) / n + max(sum(x for x in filter(None, vector)), 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) - sum(x for x in filter(None, vector)) / sum(map(abs, vector))




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)) + 
       sum(x ** 0.5 for x in vector) / (sum(x ** 2 for x in vector) ** 0.25))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n * 
       max(k for k, count in Counter(vector).items() if count > 0))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  mean = sum_elements / n
  
  return -(math.sqrt(abs(sum_elements - mean)) + math.sqrt(trailing_zeros / n) + abs(mean - n // 2)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  p = Counter(vector).values()
  mean_entropy = -sum([x / len(p) * math.log2(x / len(p)) for x in p]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + mean_entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - sum((x**3)/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  + min((x**3)/(n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - sum((x**3)/(n*n*n) for x in frequency.elements()) / max(frequency.values()) + sum(abs(x-min(vector)) for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if bin(sum(1 for elem in vector[:i]))[-1] == '0') / n * 
       sum(abs(x) for x in vector) / max(len(set(vector)), 1)
  )**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x**2 for x in vector])**0.5 + 
      max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n for _ in range(min(n, len(vector))) ) * 
      sum(x for x in set(vector)) / min(sum(vector), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(abs(x) for x in filter(None, vector)) / min(sum(vector), sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(k*v for k, v in Counter(vector).items()) / max(sum(vector), 1) * 
      sum(c[0] != c[1] for c in zip(vector, vector[1:])) / len(vector))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum(vector)) * 
       np.std(vector) / max(np.std(vector), 0.001) + 
       math.exp(-sum(map(abs, vector))/n))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum(vector)) * 
       np.std(vector) / max(np.std(vector), 0.001) + 
       len(set(filter(None, vector))) / len(vector))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([x**2 for x in Counter(vector).values()]) / (4 * n)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  frequency_entropy = -sum([(x / n) * math.log2(x / n) for x in Counter(vector).values()])

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + frequency_entropy




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) - entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p * math.log2(p) / math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1) ** 2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0

  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + ((len(set(vector)) - 1) ** 2) / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([p**2 for p in Counter(vector).values()]) / (n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x)**2 for x in vector) * min(0.5 / len(set(vector)), (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for x in set(vector) if x < 0) * len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
     (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'))/n)




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(1 for x in vector if x < 0) * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * math.log2(len(bin(int(''.join(map(str, vector)))))) - math.log2(n) + math.sqrt(sum(vector)))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - 
           math.sqrt(sum_elements) - math.exp(-len(vector) / math.log(len(vector)) ** 2))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - 
       (math.sqrt(sum_elements) if sum_elements > 0 else 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * min(sum_elements, sum(map(abs, vector))) / sum(map(abs, vector)) / n + 
    sum(1 for elem in vector if elem == 0) / len(vector) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) * 
       sum(abs(x) for x in vector) / sum(x**2 for x in vector) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum_elements / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - 
       2 * (math.sqrt(sum_elements) + math.log2(len(set(vector)))))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.sqrt(sum_elements / len(set(vector))))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.log2(unique_elements) - math.sqrt(sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - sum((x - (sum_elements / len(vector))) ** 2 / n for x in vector)
  - (max(frequency.values()) ** 2 / max_freq)
  + sum(1 for i in range(len(vector)) if vector[i] == 0) * math.sqrt(n) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in set(vector))
  - sum((x - (sum_elements / len(vector))) ** 2 / n for x in vector)
  + math.sqrt(sum(((x - sum_elements / len(vector)) ** 2) for x in vector)) * 2 / n
  - sum(x**4/(n*n*n) for x in set(vector))
  - (len([i for i in range(len(vector)) if vector[i] == 0]) + max_freq) / n
  + math.sqrt(sum(((x - sum_elements / len(vector)) ** 2) for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements())




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.sqrt(sum_elements) - sum(1 for i in range(len(vector) - 1) if vector[i] == 0))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - sum_elements**0.5 + 1e-6)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - math.sqrt(sum_elements + trailing_zeros))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 1 else 0))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy using the formula for Shannon entropy
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum(p**2 for p in p_x)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')

  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy using the formula for Shannon entropy
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  # Adjust priority based on the number of unique elements in the vector
  uniqueness_penalty = (len(set(vector)) - 1) ** 2 / (n * math.log2(n))
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + uniqueness_penalty) + entropy




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) + np.std(vector) * (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector))
  + gmean(np.array(list(set(vector))))**2 / (n * np.std(vector))
  - np.sum((x**4)/n for x in set(vector)) / (n * np.std(vector))
  + math.exp(-n/(np.mean(vector) + (n - np.sum(1 for x in vector if x))))
  - math.sin(np.mean(vector)/n)
  - np.mean([math.log2(x) for x in Counter(vector).elements()])




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (n-sum(1 for x in vector))**2/(2*n)**2 * math.sqrt(n)
  - abs(sum_elements - n/2) ** 3 / (6 * n ** 2)
  - sum(math.log(x) for x in frequency.elements()) / n
  - math.exp(-(n/(sum_elements + (n - sum(1 for x in vector if x))))) * math.sin(sum(vector)/n)
  - len([i for i in range(len(vector)) if vector[i] == 0]) ** 2 / (4 * n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  set_vector = set(vector)
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / len(set_vector)) + 
       math.log2(len(set_vector)) - math.log2(n))




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * math.log2(len(str(bin(int(''.join(map(str, vector)))))) - bin(int(''.join(map(str, vector)))).count('0')) / n) + math.log2(n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       len(set(vector)) / (n * math.log2(n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if not elem)).rstrip('0').count('0')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))) / sum_elements - 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log10(unique_elements) * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum(abs(x) for x in vector)) - 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
       len(str(sum(1 for elem in vector if not elem)).lstrip('0'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) + 
       sum(1 for elem in vector if not elem) / n + 
       len(set(vector)) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) * np.exp(-leading_ones / n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(np.array(vector)))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * np.exp(-leading_ones / n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n)**2




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * min(n - leading_ones, n)) / n




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - 
       math.sqrt(sum_elements) -
       (math.exp(-len(vector) / math.log(len(vector)) ** 2) if len(vector) > 1 else 0))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - 
       (math.sqrt(sum_elements) if sum_elements > 1 else 0) - 
       math.exp(-len(vector) / math.log(len(vector)) ** 2) + 
       math.fabs(sum_elements) / len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - 
       math.sqrt(sum_elements) - 
       (math.exp(-len(vector) / math.log(len(vector)) ** 2) + 
       sum(Counter(vector).values())**1.5/(n**0.5)))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) ** (0.5 / len(set(vector))) / min(sum(vector) ** 2, sum(map(lambda x: x**3, vector))))




#score: {'n8_size512.txt': 258}
#island_id: 3
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       sum(math.log10(i+1) for i, elem in enumerate(reversed(vector)) if not elem) / n * 
       sum(x**3 for x in filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) ** 0.8 for x in set(vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x)**3 for x in vector))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       math.exp(-sum_elements / (n * math.log2(n))) + 
       1e-6)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
      math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
      len(set(vector)) / (n * math.log2(n)) + 
      (max(vector) - min(vector)) / (n * math.log2(n)))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
      math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
      len(set(vector)) / (n * math.log2(n)) +
      sum_elements / (n * math.log2(n)))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(trailing_zeros / n) + 
      math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
      len(set(vector)) / (n * math.log2(n)) - 
      sum_elements ** 0.5 / (n * math.log2(n)) + 
      1e-6)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([x**2 for x in Counter(vector).values()]) / (n * math.log2(n))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum(p**2 for p in Counter(vector).values()) / (n * math.log2(n))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  variance = math.sqrt(sum((x - sum_elements / n) ** 2 for x in vector) / (n-1))
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n)) + variance)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector)) ** (0.5 / min(len(set(vector)), n)) + 
       len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  # Calculate entropy
  p_values = [x / len(vector) for x in Counter(vector).values()]
  p_values = [p for p in p_values if p > 0]
  entropy = -sum([p * math.log2(p) for p in p_values])

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([x**2 / (4*n*math.log2(n)) for x in Counter(vector).values()])




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate entropy
  p_values = [x / len(vector) for x in Counter(vector).values()]
  p_values = [p for p in p_values if p > 0]
  entropy = -sum([p * math.log2(p) for p in p_values])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([x**2 for x in p_values]) / (4 * len(vector))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate entropy
  p_values = [x / len(vector) for x in Counter(vector).values()]
  p_values = [p for p in p_values if p > 0]
  entropy = -sum([p * math.log2(p) for p in p_values])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([i/(n-1) for i in Counter(vector).values() if i > 0])




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt((sum_elements - (n + 1) // 2)**2 / (n * 0.5)) 
      + math.sqrt(trailing_zeros / n) 
      + abs(sum_elements - len(vector) // 2) 
      + (len(set(vector)) - 1)**2 / (n * math.log2(n)) 
      + entropy)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p * math.log2(p) / math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  mean_vector = sum_elements / n
  std_vector = math.sqrt(sum(x**2 for x in vector) / n - mean_vector ** 2)
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(mean_vector - len(vector) // 2) + (std_vector / mean_vector)**2 + entropy)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  - abs(sum_elements - n/2) ** 1.5
  + math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq / min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min((x*(x-1)*(n-x))/n for x in range(1, n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq - min_freq) ** 2 / (n-1)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  return min((sum_elements - n/2)**2, (n - sum(1 for x in vector if x))**2, (max_freq - min_freq)**2)
  
  # New algorithm:
  return -(sum_elements ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - (max(vector) - min(vector)) ** 2 / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy + sum([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = - (sum([x / len(vector) * math.log2(x / len(vector)) for x in Counter(vector).values()]) if len(set(vector)) > 1 else 0)

  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([x**2 for x in vector]) / (2 * n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(len(set(vector))) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) ** (0.5 / len(set(vector))) - max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(abs(x)**2 for x in filter(None, vector)) / min(sum(abs(x)**2 for x in vector), sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  vector_entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) - vector_entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the entropy using the formula for Shannon entropy
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum(p * math.log2(p) for p in Counter(vector).values())/math.log2(len(vector))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the entropy using the formula for Shannon entropy
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - (1 / n) * sum(x**2 for x in p_x)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  p_x = [x / len(vector) for x in Counter(vector).values()]
  entropy = -sum([p * math.log2(p) if p > 0 else 0 for p in p_x])
  
  return -(math.sqrt((abs(sum_elements - n // 2)) / (n * math.sqrt(n))) + math.sqrt(trailing_zeros / (n * math.log2(n))) + entropy)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  # Improved calculation of the priority using information theory concepts
  return -(sum_elements * (math.log2(trailing_zeros) - math.log2(n)) + 
       math.log2(math.factorial(unique_elements) / math.factorial(sum_elements) / math.factorial(n-unique_elements)) + 
       1e-6)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  return -sum_elements * math.log2(trailing_zeros / n) - \
      math.log2(n) + (math.sqrt(sum_elements) if sum_elements > 0 else 1) + \
      unique_elements / (n * math.log2(n)) - \
      math.exp(-sum_elements / (n * math.log2(n))) + \
      abs(sum(Counter(vector).values())) + \
      1e-6




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  entropy = -sum((p / n) * math.log2(p / n) for p in Counter(vector).values())
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       entropy + 
       1e-6)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       math.exp(-sum_elements / (n * math.log2(n))) + 
       1e-6 -
       (unique_elements ** 2) / (n * math.log2(n)))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([p * math.log2(len(vector)) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / (n * math.log2(n))) + abs(sum_elements - len(vector) // 2) + ((len(set(vector)) - 1)**2) / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  unique_values = len(set(vector))
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) - (unique_values * math.log2(unique_values)) / n + abs(sum_elements - len(vector) // 2) + (unique_values - 1)**2 / (n * math.log2(n)))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p * math.log2(p) for p in [x / len(vector) for x in Counter(vector).values()] if p > 0])
  mean, variance = np.mean([i**2 for i in vector]), np.var([i**2 for i in vector])
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - variance




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  if sum_elements == 0:
    return 1e-6
  
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       math.exp(-sum_elements / (n * math.log2(n))) + 
       1e-6)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-((n - leading_ones) / n)**2)
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements ** (math.sqrt(len(set(vector)))) + 
       min(n - leading_ones, n) * math.sqrt((n - leading_ones) / (n * len(vector))) 
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(math.sqrt(sum_elements) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * math.exp(-leading_ones/n) * sum_elements
     )




#score: {'n8_size512.txt': 343}
#island_id: 2
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - (max(vector) - min(vector)) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - sum(x**2/(n*n) for x in set(vector))
  + min((x**3/(n*n*n)) for x in vector)
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (sum_elements / n) ** 3 - (abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n
  - min((x**4/n) for x in vector)
  - sum(x for x in set(vector)) ** 3 / n
  + math.exp(-(sum_elements / n))
  - min(x for x in set(vector)) ** 2 / (n * max_freq)
  - ((abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x)) / n) ** 2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (n- len([i for i in range(len(vector)) if vector[i] == 0]))**2/(4*n)
  + math.sqrt((sum_elements/n)**2 + ((n/2-sum_elements)/n)**2) * min((x**3/n) for x in vector) * max_freq
  - (abs(sum_elements - n/2) / math.sqrt(n)) * sum(x for x in set(vector))
  - math.sin(sum(x/(n*n) for x in set(vector)))
  + abs(sum(x**6/(n*n*n*n*n) for x in set(vector))) * max_freq
  - min((x**4/n) for x in vector)
  - leading_zeros/n - max_freq/min_freq
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([p*math.log2(p)/math.log2(len(vector)) for p in Counter(vector).values()])




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  
  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
 
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq/min_freq)**2
  - sum((x-1)**2 for x in frequency.values())/(n*min_freq)
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**5/(n*n) for x in set(vector)) * len([i for i in range(len(set(vector))) if list(set(vector))[i] == 0]) / n
  + math.sqrt(sum(1 for x in vector if x)/n)
  + (max(vector) - min(vector)) ** 2 / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq/min_freq)**2
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**5/(n*n) for x in set(vector)) * len([i for i in range(len(set(vector))) if list(set(vector))[i] == 0]) / n
  - math.sqrt(sum(1 for x in vector if x)/n)
  + sum((x-1)**2 for x in frequency.values())/(n*min_freq)
  - (max(vector) - min(vector)) ** 4 / (16 * n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq/min_freq
  - sum(x for x in set(vector)) ** 2 / n
  - math.log10(sum(1 for x in frequency.values()))/math.log10(max(frequency.values(), default=1))
  + sum(x**4/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (max_freq/min_freq)**2
  + abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**5/(n*n) for x in set(vector)) * len([i for i in range(len(set(vector))) if list(set(vector))[i] == 0]) / n
  - math.sqrt(sum(1 for x in vector if x)/n) + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       math.fabs(sum_elements - sum(map(abs, filter(None, vector)))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       math.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector)))
       )




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt((sum_elements / n)**2 + (trailing_zeros / n)**2) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / (n * math.log2(n))) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum([p*math.log2(p)/math.log2(n) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0
  return -(math.sqrt(sum_elements / n) + math.sqrt(trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + (len(set(vector)) - 1)**2 / (n * math.log2(n))) + entropy - sum([p*math.log2(p)/math.log2(len(set(vector))) for p in Counter(vector).values()]) if len(set(vector)) > 1 else 0




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  if sum_elements == 0:
    return 1e-6
  
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       math.exp(-sum_elements / (n * math.log2(n))) + 
       1e-6) - math.sin(sum_elements / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  if sum_elements == 0:
    return 1e-6
  
  return -(sum_elements * math.log2(trailing_zeros / n) + 
       math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
       unique_elements / (n * math.log2(n)) - 
       math.exp(-sum_elements / (n * math.log2(n))) + 
       math.sin((unique_elements / n) * math.pi))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  unique_elements = len(set(vector))
  
  if sum_elements == 0:
    return 1e-6
  
  return -(sum_elements * math.log2(trailing_zeros / n) + 
    math.log2(n) - (math.sqrt(sum_elements) if sum_elements > 0 else 1) + 
    unique_elements / (n * math.log2(n)) - 
    math.exp(-sum_elements / (n * math.log2(n))) + 
    1e-6 + 
    math.sin(3.14159 * sum_elements / n))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * min((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * min((sum(map(abs, filter(None, vector)))) / sum_elements, 1) / 
       (max(len(str(x)) for x in set(vector)) if any(set(vector)) else 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * min((sum(map(abs, filter(None, vector)))) / sum_elements, 1) - 
       max(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))), 0) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  for i, value in enumerate(vector):
    if value != 0:
      priority += math.sqrt(i+1) * (value - n/2) ** 2 / n
  
  return priority - trailing_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  + (1 - sum(1 for x in set(vector)) / n) * sum(x for x in set(vector))
  - (max_freq - min_freq)**2/(2*min_freq**2) * sum_elements/n
  - sum(x**4/(n*n*n) for x in vector) / n
  + math.sqrt(len([i for i in range(len(vector)) if x != 0])) * abs(sum_elements - n/2)
  - ((sum_elements / n)**4 + (1 - sum(1 for x in set(vector)) / n) ** 4) / 16




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, sorted(vector, reverse=True))))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, sorted((x for x in vector if x != 0), reverse=True)))) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  ones = sum(1 for elem in vector if elem == 1)
  zeros = len(vector) - ones
  
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      math.exp(-ones / n) * min(zeros, n) / n + 
      math.exp(-zeros / n) * min(ones, n) / n)




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements + 
    sum(1 for elem in vector if not bool(elem)) / (len(vector) - leading_ones))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   np.exp(-leading_ones / n) * 
   min(len(vector) - leading_ones, n) / n + 
   sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) - math.log(len([i for i in range(n) if bin(i).count('1') == 0])) / math.log(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in filter(None, vector)) / min(sum(map(abs, vector)), len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements / len(vector) - 0.5) * (2 * (sum_elements > len(vector) // 2) - 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((abs(sum_elements-len(vector)//2))/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - abs(sum(x**9/(n*n*n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - math.sqrt(trailing_zeros/n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq**2/(n*n) + min_freq**2/(n*n)) - ((sum_elements - n/2)**2/(n*n))
  + math.exp(-((sum_elements - n/2)**2/(n*n))) * math.sin(sum(x/(n*n) for x in vector))
  - (math.sqrt(n)/math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.cos(sum(1 for x in vector if x))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  - math.sqrt(len([x for x in range(len(vector)) if vector[x] == 0])) * min_freq / max_freq
  + sum(frequency[i] * math.log(frequency[i]) for i in frequency)
  - (abs(sum_elements - n/2) ** 1.5 + abs(n/2 - sum(x for x in vector)) ** 1.5) / n
  - sum(x**4/(n*n*n) for x in set(vector))
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-(sum_elements/n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sin(sum(x/(n*n) for x in vector))
  + abs(math.cos(sum(1 for x in vector if x)))
  - sum(frequency[i] * math.sin(i) for i in range(n))

  # Use a priority queue to combine the scores and find the top score
  heap = []
  for x in frequency.values():
    heapq.heappush(heap, -x)
  score = 0
  while heap:
    score -= heapq.heappop(heap)

  return score + math.sin(sum(x/(n*n) for x in vector)) * max_freq / min_freq + math.exp(-(sum_elements/n)) * (max(vector) - sum(vector)/n) / n




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum((n - i) * min(sum(map(abs, vector)), sum(map(abs, vector)))/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))/n)**1.3




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) * (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)) / n 
      for i in range(min(n, min(leading_ones, sum_elements)), n)) - 
    sum_elements / n) ** 1.5




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(int(x) for x in reversed(vector)))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(trailing_zeros + 1) / math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len(str(sum(1 for elem in vector if elem))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (n / len(vector))**(-trailing_zeros/len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements**3




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > 0.5*len(vector)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/sum_elements + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements + 
       sum(1 for elem in vector if elem == 0) / len(vector) * (n - leading_ones))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/sum_elements + 
    min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements + 
    (n - trailing_zeros) / n * sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector)) + 
           min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)/n * sum(map(abs, filter(None, vector)))/sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 280}
#island_id: 3
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/sum_elements + 
      min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements + 
      len(set(vector)) ** 2 / (sum_elements + unique_elements))




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n)




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (math.log10(n) * (len(vector) - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(''.join(map(str,vector)).rstrip('0').lstrip('0')) if ''.join(map(str,vector)).lstrip('0') else 0
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n) + math.log(len(set(vector))) * (-1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n / (trailing_zeros + 1)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5/len(set(vector)) + min(len(bin(sum(1 for i in vector))) - bin(sum(1 for i in vector))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n 
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 334}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  # Calculate the priority based on the number of trailing zeros
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  + sum(1 for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - (sum_elements/n) ** 3
  - (max_freq/min_freq) ** 2
  - math.sqrt((max_freq/min_freq) ** 4 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(math.exp(abs(x)) for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(math.exp(abs(x)) for x in vector))
  )




#score: {'n8_size512.txt': 320}
#island_id: 3
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**4 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1) * abs(x)**(n/len(set(vector))) for i, x in enumerate(sorted(map(abs, vector), reverse=True)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + (abs(sum_elements-0.5*len(vector))/len(vector) < 0.2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) / 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector)))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * bin(int(''.join(map(str,vector)))).count('0') / n




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) * ((n - leading_ones) / n + sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector))) - trailing_zeros / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)) - 
      trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)) - 
      trailing_zeros / n - 
      len(set(vector)) * sum(1 for elem in vector if not elem) / (sum_elements + 1e-9))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x)).count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n) - (n - sum(1 for x in vector).bit_length()) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - (n-sum(1 for x in vector if x)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - max(x*(x-1)*(n-x) for x in range(n, 0, -1))
  + (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - (min(x*(x-1)*(n-x) for x in range(1, n+1)) if sum_elements > n/2 and sum(1 for x in vector if x) < n//2 else 0)
  + min((sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n), (min(x*(x-1)*(n-x) for x in range(1, n+1)) if sum_elements > n/2 and sum(1 for x in vector if x) < n//2 else 0))
  - abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  + math.sqrt((max_freq/min_freq)**2 + ((n/2-sum_elements)/n)**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - min(x*(x-1)*(n-x) for x in range(1, n+1))
  + (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - min(x*(x-1)*(n-x) for x in set(vector))
  + (max_freq > 1 and sum(1 for x in set(vector) if frequency[x] > 1) > 0) * math.sqrt(n)
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + 
      sum(x for x in set(vector) if x != 0) / len(set(vector)))




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(bin(sum(1 for elem in vector if not bool(elem)))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_zeros, n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * math.log(n) / math.log(len(vector)) * 
       min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for x in vector if x == 1))[2:].count('1'), n) * 
       min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > 0.5*len(vector)) > 0) * (trailing_zeros / n) + sum([abs(x-1/2)*math.exp(-(x-1/2)**2/(n*len(vector))) for x in vector])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(int(''.join(map(str,vector)))).rstrip('0'))
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((len(vector) // 2 < sum_elements) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((len(vector) > 2*sum_elements) > 0) * (-1 * sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(int(x) for x in reversed(vector))).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(int(x) for x in reversed(vector))).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements())
  + math.sqrt(sum(x**5/n for x in frequency.elements())) / max(frequency.values()) * 2
  - (math.atan(sum(vector)/n) + math.asin(sum_elements/n)) * n / len(vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements())

  # Calculate the absolute difference
  return abs(-sum_elements / n - trailing_zeros / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + math.sin(sum(vector)/n))
  - min((x**(max_freq-1))/n for x in frequency.elements()))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements - (trailing_zeros / n if sum_elements > 0 else trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / math.log2(n)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + (max_freq - min_freq) ** 2 / max(n, min_freq)
  - math.exp(-n/(4*sum_elements))
  - sum(x**3/n for x in set(vector))
  - abs(sum_elements - n/2) ** 3 / (8 * n ** 3)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (max_freq - min_freq) ** 2 / max(n, min_freq)
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - abs(sum_elements - n/2) ** 3 / (8 * n ** 3)
  - sum((x - min(vector)) ** 2 / n for x in vector) / len(set(vector))
  + math.exp(-n/(4*sum_elements))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)
  - abs(sum_elements - n/2) ** 3 / (8 * n ** 3)
  - sum((x - min(vector)) ** 2 / n for x in set(vector))
  + math.exp(-n/(4*sum_elements))


  # Additional improvement
  if max_freq > n//2:
    return -math.sqrt(n) + (max_freq - n//2) ** 3 / (8 * n ** 3)
  elif min_freq < n//2:
    return math.sqrt(n) - (min_freq - n//2) ** 3 / (8 * n ** 3)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max_freq])) * n / len(vector)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min_freq])) * n / len(vector)
  + (max_freq - min_freq) ** 2 / max(n, min_freq)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - trailing_zeros / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i == 1)))
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements / math.log10(n) - (leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - trailing_zeros / n
  
  # Alternative improved version with log2 instead of log10
  # This is because the number of trailing zeros grows exponentially with respect to the length of the vector
  return -sum_elements * math.log2(len(str(sum(1 for i in vector if i == 0)))) - sum_elements / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in set(vector))
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in set(vector))
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**7/(n*n*n*n*n*n) for x in set(vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - abs(sum(x**6/(n*n*n*n*n) for x in vector))
  - sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  - sum(x**8/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)




#score: {'n8_size512.txt': 307}
#island_id: 2
#version_generated: 3
#generate time17:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  def objective_function(x):
    return -(x[0] / n + (n - x[1]) ** 2 / n) + abs(x[0] - n/2) * (n - x[1]) / n - min((i**2/n) for i in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(vector) / n - x[2]/n - max_freq/min_freq
    - (max_freq**2/(n*n) + min_freq**2/(n*n)) - ((x[0] - n/2)**2/(n*n))
    + math.exp(-((x[0] - n/2)**2/(n*n))) * np.sin(np.sum(vector)/(n*n))
    - (np.sqrt(n)/np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))) * np.cos(np.sum(1 for x in vector if x))

  result = minimize(objective_function, [sum_elements, sum(1 for x in vector if x), max_freq/min_freq], method="SLSQP")
  return result.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter(str(x) for x in vector).get('0', 0) / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * Counter(str(x) for x in vector).get('0', 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-Counter('0' for x in vector)[0]) / (n * len(vector)) + (len(vector) // 2 < sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + bin(int(''.join(map(str,vector)))).count('1') / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max(len(str(vector).lstrip('0').rstrip('1')) / n, 
       (n - sum(1 for elem in vector if elem == 0)) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       len(str(vector).lstrip('0').rstrip('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  counter = Counter(vector)
  zeros_count = counter[0]
  non_zero_count = len(vector) - zeros_count
  
  return -(sum_elements * math.log10(n)) - ((trailing_zeros / n) ** 2) - (zeros_count / non_zero_count) ** 0.5 if non_zero_count > 0 else 0




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(int(x) for x in reversed(vector)))[2:].zfill(len(str(sum(int(x) for x in reversed(vector))))).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(int(x) for x in reversed(vector))).count('0')
  return -math.log10(sum_elements + 1) - math.log10(trailing_zeros / n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(int(x) for x in reversed(vector))).count('0')
  return -sum_elements - (trailing_zeros / n) + math.exp(-sum_elements / n) * math.log2(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector))))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - sum(i**2/(n-i) for i in range(len([i for i in range(len(vector)) if vector[i] == 0])))
  + sum((x-math.floor(n/2))**2/n for x in set(vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - sum(i**2/(n-i) for i in range(len([i for i in range(len(vector)) if vector[i] == 0])))

  # Optimize the algorithm by reducing the number of calculations
  optimized_priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return optimized_priority




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in frequency if frequency[x] > 1)) ** 2 / n
  + math.sqrt(sum(frequency[x]**2 for x in frequency) / len(set(vector))) * n / len(vector)
  - math.sqrt(max(freq**2 for freq in frequency.values())) * n / len(set(vector))
  - min((x**3/n) for x in vector) + sum(x**4/(n*n) for x in set(vector)) / n
  - (max(vector) - min(vector)) ** 2 / n
  - abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n
  - sum(x**2/n for x in sorted(set(vector))) * len(set(vector)) / n
  - sum(i**2/(n-i) for i in range(len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(None, vector))) / max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       sum(map(abs, filter(None, vector)))/max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / 
       max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * min(sum(map(abs, vector)), sum_elements) / min(sum_elements, max(x**2 for x in vector)**0.5))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n * sum(x for x in vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem).bit_length()) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) - 
       len([x for x in vector if x != 0]) / n)**4




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))**0.4)) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
    (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
    sum(x for x in vector) / sum(map(abs, vector)) - 
    sum(x for x in vector if x < 0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n) + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n) + (math.e**(sum_elements/n) - 1)/n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n * 
       math.sqrt(sum(x**3 for x in filter(lambda x: x != 0, vector)) / sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))[::-1].lstrip('0'))
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-leading_zeros / n) * 
       min(len(vector) - leading_zeros, n) / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  odd_sum = sum(x for i, x in enumerate(vector) if i % 2 == 0)
  even_sum = sum(x for i, x in enumerate(vector) if i % 2 != 0)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (even_sum - odd_sum) ** 2 / (8*n)
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) * sum(x**3/(n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  odd_sum = sum(x for i, x in enumerate(vector) if i % 2 == 0)
  even_sum = sum(x for i, x in enumerate(vector) if i % 2 != 0)
  
  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (even_sum - odd_sum) ** 2 / (8*n)
  + math.sqrt(sum(1 for _ in range(len(vector)) if vector[_] == max_freq))
  + sum((i-1)**2/n for i in sorted(set(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  odd_sum = sum(x for i, x in enumerate(vector) if i % 2 == 0)
  even_sum = sum(x for i, x in enumerate(vector) if i % 2 != 0)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])
  - (even_sum - odd_sum) ** 2 / (8*n)
  - math.sqrt(sum(x**4/(n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n + sum_elements / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)
  + sum(x**7/(n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**6 + (sum_elements/n)**6 + ((n/2-sum_elements)/n)**6)
  - sum(x**8/(n*n*n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**2 + (sum_elements/n)**2 + ((n/2-sum_elements)/n)**2)
  - sum(x**4/(n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - sum(x**5/(n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt((max_freq/min_freq)**4 + (sum_elements/n)**4 + ((n/2-sum_elements)/n)**4)
  - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt((max_freq/min_freq)**5 + (sum_elements/n)**5 + ((n/2-sum_elements)/n)**5)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n
  
  # Add a new term that takes into account the distribution of elements
  return return_value + sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * min(frequency.values()))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - (sum(vector) / n)) ** 2 for x in vector) / (n * max_freq)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - leading_zeros/n
  - variance




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - ((trailing_zeros + sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros + len([i for i in vector if i == 0])) / n - sum([math.log2(i+1) for i in Counter(vector).values()]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / math.log2(n) - (trailing_zeros + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n * 
    sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), len(vector)))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(sum(x**2/(2*n) for x in frequency.elements())) * 2/n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  + (max_freq-1)/(min_freq+1)
  - sum(x for x in vector if x == 0) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - trailing_zeros/n
  - max_freq/min_freq
  - (max_freq-1)/(min_freq+1)
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum((x**3)/(n*n) for x in vector) / sum(x for x in vector)
  - sum(x**4/(n*n*n) for x in vector) / sum(x for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - max_freq/min_freq
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (max_freq-1)/(min_freq+1)
  - min(min(x, n-x) for x in vector) / n
  + abs(sum_elements - n/2) * (abs(sum(1 for x in vector if x) - n//2)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/(n*n) for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum((x/2)**2 for x in frequency.elements())) * 2 / n
  - sum(x**4/(n*n*n) for x in frequency.elements()) / max(frequency.values())
  - (max_freq-1)/(min_freq+1)
  - sum(x**5/(n*n*n*n) for x in frequency.elements()) / max(frequency.values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) * math.log10(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements + (n - leading_zeros - trailing_zeros) / n




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      len([x for x in vector if x == 0]) * (n - min(n, len([x for x in vector if x == 1]))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n - 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(lambda x: abs(x), vector))
     )




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > 0.5*len(vector)) > 0) * (trailing_zeros / n) if sum_elements != 0 else 1




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))[:-2]) - bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > 0.5*len(vector)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > 0.5*len(vector)) > 0) * (math.log(trailing_zeros + 1) / math.log(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((x**2)/n for x in frequency.elements())
  + (len(set(vector)) - 1) / n
  - max(x for x in set(vector))/n
  - sum((max(x,0)**3)/n for x in vector) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max_freq**2)/n
  + min((x**3)/(max_freq*n) for x in frequency.elements())




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)
  - min((x**2)/n for x in frequency.elements())
  + (len(set(vector)) - 1) / n
  - max(x for x in set(vector))/n
  - (max_freq/min_freq)**(3/(n-1))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(max_freq/min_freq)**(1/n) * (max_freq-min_freq)**(2/(n-1))
  - sum((x-min(vector))/(max(vector)-min(vector)) for x in frequency.elements())**3/n
  - max(x for x in set(vector))/n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum(x**2/n for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum(x**2/n for x in vector))
  - (sum_elements ** 2) / n
  - sum((x**2)/n for x in frequency.elements()) / max(frequency.values())
  - math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)
  + trailing_zeros/n - (max_freq/min_freq) - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + (sum_elements ** 2) / n




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum(x**2/n for x in vector))
  - (sum_elements ** 2 / n) * min_freq




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(sum(x**2/n for x in vector))
  - (min_freq ** 2) * sum(x for x in set(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 - abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(int(x) for x in vector))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements - leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].translate({str(i): '' for i in range(10)}))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(map(abs, filter(lambda x: x != 0, vector))) / sum_elements)**6




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) * (n - len(set(vector)) + 1) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Additional improvements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Use of dynamic programming
  dp = [0] * (n + 1)
  for i in range(1, n + 1):
    dp[i] = min(dp[i-1], (i * sum_elements) // n)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n) + (math.e**(sum_elements/n) - 1)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * math.sin(trailing_zeros / n) + (math.e**(sum_elements/n) - 1)/n




#score: {'n8_size512.txt': 283}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)) + 
       sum(map(lambda x: 1 if x else 0, vector)) ** (1 / len(vector)))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(n-1, -1, -1) if not vector[i]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * min(sum_elements, leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
      max(((n - i) * sum_elements / n) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * bin(int(''.join(map(str,vector)))).count('0') / n - abs(sum(vector) - len(vector) // 2) / (2 * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(int(''.join(map(str,vector))))[:-1].rstrip('0'))
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * bin(int(''.join(map(str,vector)))).count('0') / n
  - abs(sum(vector) - len(vector) // 2) / n




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * bin(int(''.join(map(str,vector)))).count('1') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + bin(int(''.join(map(str,vector)))).count('1') / n - abs(sum(vector) - len(vector) // 2) / (2 * len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((len(vector) // 2 < sum(vector)) > 0) * bin(int(''.join(map(str,vector)))).count('0') / n - abs(sum(vector) - len(vector) // 2) / (2 * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + bin(int(''.join(map(str,vector)))).count('0')) / (n * len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))) + 
    (n - len(set(vector))) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + abs(sum(vector) - len(vector) // 2) / n
  - bin(int(''.join(map(str,vector)))).count('1') / (n * len(vector))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n - bin(int(''.join(map(str,vector)))).count('0')) / (n * len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - (n + 1) // 2) ** 2 / (n * len(vector)) - bin(int(''.join(map(str,vector)))).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_vector * math.exp(-trailing_zeros / (n * len(vector))) + abs(sum_vector - len(vector) // 2) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(frequency)) / len(set(frequency))
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * max_freq
  - sum(sorted(frequency.values())[::-1]) / len(set(frequency))
  - (sum(1 for x in vector if x) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
      min(sum_elements**2, sum(abs(x)**3 for x in vector)))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(map(abs, vector)) + 
       (n - len(set(vector)))/n * 
       min(sum(1 for _ in filter(lambda x: x == 0, vector)), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
       math.exp(-math.fabs(sum(map(abs, filter(None, vector))) - sum(abs(x) for x in vector))) * 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 2) / (n ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (math.gcd(sum_elements, len(vector)))**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) + (sum_elements > len(vector) // 2)) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + abs(sum_elements - len(vector) // 2) * ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector)) * abs(sum_elements)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return - (sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2)
  else:
    return - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-abs(sum_elements - len(vector) / 2) / (len(vector) / 5))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) * (1 - abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1/2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / math.ceil(math.sqrt(n))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1) + 
    sum(1 for x in set(vector)) * len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1) + 
      trailing_zeros / len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / math.sqrt(len(set(vector)))) + 
    min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + (len(vector) - trailing_zeros) / (n * math.log2(n))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.log(2 + abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(2 * sum_elements / len(vector) - 1)**0.5) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (abs(sum_elements - len(vector) / 2) / (n / 2))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(3 * sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector)) / min(sum(vector), sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector) / 2) / (len(vector) / 4))**2)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - variance
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max_freq/min_freq)**(1/n) * math.exp(-(sum_elements-n/2)**2/(n*0.5))
  - sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / n
  - math.sqrt((max_freq/min_freq)**3 + (sum_elements/n)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
  - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - variance
  - (max_freq/min_freq)**2
  - abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt((max_freq/min_freq)**3 + ((n/2-sum_elements)/n)**3)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - (variance / n) ** 0.5
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq

  # Additional improvements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  + (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / math.sqrt(n)
  + abs(sum_elements - n/2) * (max_freq/min_freq)**0.5
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + (max_freq/min_freq)**(1/n) * math.exp(-(sum_elements-n/2)**2/(n*0.5))
  - sum(x**4/(n*n*n) for x in vector) * (sum(1 for x in vector if x > 0) - sum(1 for x in vector if x < 0)) / n




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(map(int, vector), range(1, len(vector)+1))) + (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1e-9) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(x for x in vector) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(lambda x: abs(x)**2, vector))) / len(set(vector)) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(abs(x) for x in filter(None, vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0) / n * 
       sum(vector) / min(sum(vector), n))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)) - 
      len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n * 
      sum(vector) / min(sum(vector), n))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (len(vector) - sum_elements) / n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2) / (len(vector) / 2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 2
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature to improve the priority based on the frequency of elements
  result += max_freq/min_freq

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Calculate the number of trailing zeros
  trailing_zeros = sum(1 for x in vector if x==0)

  return -(sum_elements + trailing_zeros / n) + math.exp(-n/(sum_elements + trailing_zeros)) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 312}
#island_id: 2
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  # Prioritize vectors with lower sum of elements and more trailing zeros
  return -(sum_elements / n + leading_zeros / len(vector)) - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + math.exp(-abs(sum_elements - n/2)/n) - math.sin(trailing_zeros / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * math.exp(-abs(sum_elements - n/2)/n))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((trailing_zeros / n) ** 2 + (len(vector) - trailing_zeros) / len(vector))
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improved formula for vector priority
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  leading_zeros_priority = math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  
  max_freq_min_freq_ratio = max_freq/min_freq if min_freq != 0 else 0
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros_priority - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) - max_freq_min_freq_ratio




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + sum((i+1)*(vector[i]%10)**2 for i in range(len(vector)-1))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.log(trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt((trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.log10(n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(0) * (vector.count(0)))
  return -sum_elements + math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector)))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(np.abs(vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if i not in vector) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log((n - leading_ones) / n) * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
      min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       np.mean([x**3 for x in filter(lambda x: x != 0, vector)]) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum([int(digit) for digit in ''.join(map(str,vector))])).lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt((trailing_zeros / n))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) // 2) * (1 + math.exp(-(trailing_zeros / n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.exp(-2 * sum_elements / len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])

  # Calculate the sum of squares of differences between elements and average
  sum_squares = sum((x - sum_elements/n) ** 2 for x in vector)

  return result + math.sqrt(sum_squares) * (n - sum(1 for x in vector if x)) / n + abs(n/2 - sum_elements) * leading_zeros / n




#score: {'n8_size512.txt': 334}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  def objective(priorities):
    return sum((priorities[i] - 0.5) ** 2 for i in range(len(vector)))

  res = minimize(objective, np.zeros(len(vector)))
  return -res.fun + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  # Add more features to improve the priority
  return res.fun + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Use a more advanced algorithm to calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Use a more advanced algorithm to calculate the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Calculate the sum of elements and the number of trailing zeros
  return -(sum_elements + (n - sum(1 for x in vector if x))) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) - math.cos(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 - math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(len(vector) / (2 * len(vector) + 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in range(len(vector)) if vector[i] == 0]) / n) - sum(x**2/(n*n) for x in set(vector))




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  result += abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  result -= min((x**2/n) for x in vector)
  result += max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  result -= sum(sorted(vector)[::-1]) / n
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  result -= sum(x for x in set(vector)) / n
  result -= leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  result -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  result -= sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a better priority metric
  return (sum_elements + variance) / n + math.log(n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return 1




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if len(set(vector)) == 1:  # If the vector is uniform (all elements are equal), prioritize high sum vectors
    return -sum_elements
  
  unique_count = Counter(vector).most_common(1)[0][1]
  total_zeros = len([i for i in vector if i == 0])
  
  if total_zeros > n/2:
    return math.exp(-abs(sum_elements - n/2)/n) + sum_elements / n
  else:
    return (trailing_zeros / n) ** 2 - (sum_elements / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sin(trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -math.sqrt((sum_elements / n)**2 + ((n - leading_ones) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -((sum_elements / math.sqrt(len(set(vector)))) + 
       math.log10(max((n - i) / n for i in range(min(leading_ones, n), n))) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(sorted(vector)[::-1]) / sum(map(abs, vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum((i % len(vector)) ** 0.5 for i in range(n)) / (n ** 0.5))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(sorted((x for x in vector if x), reverse=True)) / sum(map(abs, vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       np.exp(-sum((i / n) ** 2 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))) * 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       np.exp(-len([x for x in vector if x != 0]) / len(vector)))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + max(-0.5, min(0.5, sum_elements / len(vector)))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - abs(1 - sum_elements / n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) + (trailing_zeros / n) * ((sum_elements > len(vector) // 2) or math.exp(-abs(sum_elements - n/2)/n))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -1
  elif trailing_zeros == len(vector) - 1:
    return -1
  else:
    return (sum_elements / n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (1 + math.sin(math.pi * sum(vector) / len(vector))) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (1 + math.sin(len(vector) * math.pi / 2)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + max(-0.5, min(0.5, sum_elements / len(vector))) - abs((sum_elements - n/2) / n)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(sum_elements - n/2)/n)) - 2 * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add even more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  if max(vector) == 0:
    zero_count = len([i for i in range(len(vector)) if vector[i] == 0])
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_count) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 330}
#island_id: 2
#version_generated: 3
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - sum((x**3)/n for x in vector) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time18:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - max(0, min(n, sum_elements)) / n




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time18:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - sum_elements**2 / (len(vector)*n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced mathematical formula to prioritize the vectors
  return result + (1 + math.tanh(-10*(sum_elements - n/2))) * (1 + math.tanh(10*(n - sum(1 for x in vector if x)) / n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # New features
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more advanced algorithm to calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Use a more advanced algorithm to calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  return result - variance + skewness




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Use a more advanced algorithm to calculate the priority
  return -(math.sqrt(variance + abs(sum_elements - n/2)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  elif trailing_zeros == 0 or (sum_elements <= len(vector) // 2 and sum_elements % n != 0):
    return 1
  else:
    return 0.5 * math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  elif sum_elements < len(vector) // 2:
    return 1
  else:
    return (trailing_zeros / n) ** 2 * math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -1
  elif trailing_zeros >= n // 2:
    return -1
  else:
    return math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       sum(min(abs(x), abs(x) * x / sum(map(abs, filter(None, vector)))) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.log((n - leading_ones) / n) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
      sum(map(lambda x: abs(x) * (x < 0), filter(None, vector))) + 
      max(1 - i / len(vector) for i in range(min(n, leading_ones), n))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -math.sqrt(sum_elements) + math.log((n - leading_ones) / n) + sum(map(abs, filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((abs(i) ** 2 / sum(map(abs, vector))) + 
    (n - i) / n * abs(i) for i in vector)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - max(0, sum_elements / len(vector)) + min(0.5, trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**2, vector)) - math.exp(-abs(sum(vector) - n/2)/n) + max(-0.5, min(0.5, sum(vector) / len(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + max(0, sum_elements / len(vector)) - min(0, sum_elements / len(vector))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + (-math.log((1+math.tanh((sum_elements-len(vector)//2)/n)))/(2*n))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)**2 * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n)**2 + math.sin((bin(int(''.join(map(str,vector))))).count('0') / n)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - sum(Counter(vector).values())**2




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (1 + math.sin(math.pi * (trailing_zeros / n))) - math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -1
  elif sum_elements < len(vector) // 2:
    return 1
  else:
    return abs(trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  else:
    if trailing_zeros == 0:
      return math.exp(-abs(sum_elements - n/2)/n)
    elif trailing_zeros >= (len(vector) // 4):
      return 1
    else:
      return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 - math.sin(trailing_zeros / n))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-abs(sum_elements - n/2)/n) - math.sin(trailing_zeros / n) - sum(Counter(vector).values())**3




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  entropy = 0
  for freq in frequency.values():
    p = freq / len(vector)
    if p != 0:
      entropy += -p * math.log(p, 2)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - entropy




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness
  - variance * (n - sum(1 for x in vector if x)) / n - abs(sum_elements - n/2) * math.sqrt(n)




#score: {'n8_size512.txt': 317}
#island_id: 2
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  if sum(1 for x in vector if x) > len(vector)//2:
    return -(variance + skewness)
  else:
    return -(min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return (trailing_zeros / n) ** 2 - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 5 and sum_elements < n/2) or (trailing_zeros <= 5))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (-math.log((1+math.tanh((sum_elements-len(vector)//2)/n)))/(2*n))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements <= len(vector) // 2:
    return -sum_elements * math.log(len(vector))
  else:
    return (len(vector) - sum_elements) * math.log(len(vector)) + trailing_zeros / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) + math.exp(-(len(vector) - trailing_zeros) / (n * 2))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements <= len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2
  else:
    return math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Use a more advanced algorithm to calculate the priority
  from scipy.stats import gmean
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Use geometric mean to calculate the priority
  return gmean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - Counter({i:vector.count(i) for i in set(vector)}).most_common(1)[0][1] / len(vector)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)) + (-math.log((1+math.tanh((sum_elements-len(vector)//2)/n)))/(2*n))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - abs((sum_elements - n/2) / n) ** .5




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -((sum_elements / len(vector) - 1/2)**2 + (trailing_zeros / n)**2) * np.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))[2:]).lstrip('0'))
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** (2 * abs(2 * sum_elements / len(vector) - 1)) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * np.exp(-np.log((n - leading_ones) / n)) * 
    sum(map(abs, vector)) / 
    max(sum(map(abs, vector)), 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * (n - leading_ones) / (n * n)) ** 3




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * math.exp(-min(sum_elements, sum(map(abs, vector))) / 
     (n * math.log(n)) - 1.7)
    )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) * 
       np.log((n - trailing_zeros) / n) ** 2) ** 3




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - sum(x**3/(n*n) for x in vector)




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # Additional features
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - variance/((n-1)/6) - math.exp(-(sum_elements**3)/(n**3))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements in the vector
  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros)) / n) ** 2




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - n/2)/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements ** 2 / (len(vector) * n)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * trailing_zeros




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  # Calculate the number of consecutive zeros
  consec_zeros = 1
  for i in range(1, len(vector)):
    if vector[i-1] == 0 and vector[i] == 0:
      consec_zeros += 1
    else:
      break
  
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) + consec_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -math.pow(sum_elements, 2) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - (1 - math.cos(math.pi * (sum_elements - avg))) * (abs(sum_elements - avg))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - Counter(vector)[0] * (len(vector) ** 0.5)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5 and sum_elements > len(vector) // 2) or trailing_zeros > n/2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (1 - math.exp(-abs(2 * avg - 1))) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -math.sqrt(sum_elements) * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.log(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sin(trailing_zeros / n)) * (1 + math.tanh((sum_elements-len(vector)//2)/n))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + (-math.log((1+math.tanh((sum_elements-len(vector)//2)/n)))/(2*n)) - ((abs(sum_elements - n/2) < 0.5 * n) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-abs(sum_elements - n/2)/n) - math.sin(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-math.log((1+math.tanh((sum_elements-len(vector)//2)/n)))/(2*n))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  # calculate a value based on the number of zeros and the average value
  zero_value = math.exp(-trailing_zeros / n)
  
  # assign higher priority to vectors with lower sum of elements, more trailing zeros and average value less than 0.5
  return -sum_elements * (2 - abs(2 * avg - 1)) - zero_value + ((avg < 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  # Add a penalty term for vectors that are too dense (i.e., more than half elements are 1)
  density_penalty = max(0, math.sqrt((2 * avg - 1) ** 2))
  
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + density_penalty




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5 and sum_elements > len(vector) // 2) or trailing_zeros >= n) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - (1 - (avg > 0.5)) * math.pow(abs(sum_elements % 2), 2)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(Counter(vector).values())**2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - sum(Counter(vector).values())**2 + abs(math.cos(len(vector) * math.log(n)) - math.sin(sum_elements))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - sum(Counter(vector).values())**2 - abs(sum_elements - n/4)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -math.sqrt((sum_elements ** (0.5 / len(set(vector)))) + 
            max((n - i) / n for i in range(min(n, leading_ones), n)) * 
            sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(abs(x)**3 for x in filter(None, vector)) / min(sum(map(abs, vector)), 10000)
       ) ** 2




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + math.sqrt(sum_elements ** 2 + trailing_zeros ** 2)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > n // 2) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(-2 + 4 * (sum_elements / len(vector)), 2) - math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (1 - math.exp(-abs(sum_elements - n/2)/n)) - math.sin(trailing_zeros / n) + 1




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - n/2)/n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a better priority metric
  return (sum_elements + variance) / n + math.log(n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


  # Calculate the sum of the absolute values of the differences between adjacent elements
  diff_sum = sum(abs(x-y) for x, y in zip(vector, vector[1:]))

  # Add this to the priority
  return result + diff_sum/n

  if sum(1 for x in set(vector)) > 2:
    return -math.sqrt(n)

  else:
    return math.sqrt(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - skewness
  - variance * (n - sum(1 for x in vector if x)) / n
  - abs(sum_elements - n/2) * math.sqrt(n)
  + min((abs(x-sum_elements)/n) for x in vector)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > n // 2) * math.sqrt(trailing_zeros / n) - Counter(vector)['0'] * math.log(n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  if sum_elements > 2 * n:
    return -10000
  elif avg < 0.5 and sum_elements > len(vector) // 2:
    return -5000
  else:
    return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  # Calculate a new coefficient based on the number of elements
  coeff = 1 - (n // 2) ** (-len(vector))

  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * coeff * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -math.pow(sum_elements * (1 + math.exp(-abs(avg-0.5))), 2) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(-2 + 4 * (sum_elements / len(vector)), 2) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(-2 + 4 * (sum_elements / len(vector)), 2) - math.exp(-trailing_zeros / n) + ((abs(sum_elements - len(vector) // 2) > 0.5) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) - math.pow((len(vector) - trailing_zeros), 2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) 
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n 
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  skewness = sum((x - sum_elements/n)**3 for x in vector) / n
  curtosis = sum((x - sum_elements/n)**4 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - abs(skewness) - curtosis




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4) + (n - trailing_zeros) * math.cos(len(vector) * math.pi / 4)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  if sum_elements > 2 * n:
    return -1.5
  elif sum_elements < n // 4:
    return 1.5

  if sum_elements > n // 2:
    bonus = math.exp(-trailing_zeros / n)
  else:
    bonus = 0.5 + (math.cos(math.pi * trailing_zeros / (n + 1)) + 1) / 2

  if avg > 0.6 or sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * avg - 1)) - bonus
  else:
    return sum_elements * math.sin(len(vector) * math.pi / 4) + bonus




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4) - sum_elements * (1 + math.cos(sum_elements ** 2 / n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  result -= np.mean(np.log1p(np.abs((vector - (sum_elements/n)))))

  return result




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4) - sum_elements * (1 + math.cos(sum_elements ** 2 / n)) - sum_elements * math.tanh((sum_elements ** 0.5) / n)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * avg - 1)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4) - sum_elements * (1 + math.cos(sum_elements ** 2 / n)) + 5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (math.sqrt(len(vector)) - 1) + len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1'))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) + math.log(len(vector), 2) - math.sin(math.pi * sum_elements / (4 * len(vector))) - math.cos(2 * math.pi * trailing_zeros / (len(vector) + 1))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(x**2 for x in vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - n/2)/n) * math.cos(trailing_zeros / n)




#score: {'n8_size512.txt': 269}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum(abs(x) for x in vector) ** (leading_zeros / len(set(vector))) + 
      np.exp(-leading_zeros / n) * (n - leading_zeros) / n)




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
         sum(map(lambda x: -x if x < 0 else 1, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         np.exp(-len(set(vector)) - sum(1 for elem in vector if not elem)) / n * 
         sum(map(abs, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, vector)) / sum(abs(x) for x in vector) + 
       sum(1 for i in range(len(vector)-1, -1, -1) if not vector[i]) / len(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  avg = sum_elements / len(vector)
  
  # Calculate a normalized score based on the number of trailing zeros
  trailing_zeros_score = math.exp(-trailing_zeros / n) if trailing_zeros > 0 else 0
  
  # Calculate a normalized score based on the average value in the vector
  avg_score = -sum_elements * (2 - abs(2 * avg - 1)) if sum_elements < len(vector) // 2 else -sum_elements
  
  return trailing_zeros_score + avg_score




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  avg = sum_elements / len(vector)
  return -sum_elements * math.exp(-abs(avg-0.5)) - math.exp(-trailing_zeros / n) + ((avg > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * (1 + math.cos(sum_elements ** 2 / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  
  # Calculate the ratio of 1's to total elements
  ones_ratio = vector.count(1) / len(vector)
  
  return -sum_elements * (2 - abs(2 * ones_ratio - 1)) - math.exp(-trailing_zeros / n) + ((ones_ratio > 0.5) and sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n) - sum_elements * math.sin(len(vector) * math.pi / 4)




#score: {'n8_size512.txt': 353}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  kurtosis = sum((x - (5*sum_elements)/n - (30*(x**4)/(9*n)) + (8*(x**3)/(9*n))) for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  kurtosis = sum(((8*x + 3*(x**3)) / (6 * n)) for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
 
  mean_abs_deviation = sum(abs(x - sum_elements/n) for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - mean_abs_deviation




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1
  elif trailing_zeros > 0.5 * n:
    return -math.exp(-abs(sum_elements - n/2)/n) + math.sin(trailing_zeros / n)
  else:
    return 1




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return (sum_elements > len(vector) // 2) * -1 + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt((n-sum_elements)**2 + (trailing_zeros/n)**2) if sum_elements < n/2 else -1




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) +
       sum(1 for i in range(n)[::-1] if not any(vector[i:])) / n *
       sum(map(abs, filter(None, sorted(vector))), 0) / min(sum(map(abs, vector)), sum(map(abs, filter(None, sorted(vector))))))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / (n ** (math.fabs(sum(vector) / len(vector) - 0.5)))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').lstrip('1'))
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-leading_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/(n*n) for x in vector) + abs(sum(x for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n*n) for x in vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (sum(1 for x in vector if x) - n/2)**2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the ratio of zeros to total elements
  return result + (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation




#score: {'n8_size512.txt': 369}
#island_id: 2
#version_generated: 3
#generate time18:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))

  # New feature: the sum of absolute differences between adjacent elements
  diff_sum = sum(abs(x-y) for x, y in zip(vector[:-1], vector[1:]))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + diff_sum / len(vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  variance = np.mean((vector - sum_elements/n)**2)
  
  # New feature: Manhattan distance to the mean
  manhattan_distance = np.sum(np.abs(vector - (sum_elements / n)))

  # New feature: The number of unique elements
  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  return -sum_elements * min(2 - abs(2 * sum_elements / len(vector) - 1), 0.5) - math.exp(-trailing_zeros / n) + (math.fabs(sum_elements / len(vector) - 0.5) > 0.2) * math.sqrt(trailing_zeros / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))
  - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))
  + len([i for i in range(n) if bin(int(''.join(map(str,vector))))[-i-1] == '0']) * (1 - sum(vector) / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n) - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))
  + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 / len(vector)) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (Counter(vector).most_common(1)[0][1] / sum(vector)) ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time18:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) ** 0.5 - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) + math.log(len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.gcd(*vector) ** 0.5) * (sum(vector) / len(vector)) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + Counter(vector).most_common(1)[0][1] ** (-sum(vector) / len(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')
  return -sum_elements * min(2 - abs(2 * sum_elements / len(vector) - 1), 0.5) - np.exp(-trailing_zeros / n) + (np.fabs(sum_elements / len(vector) - 0.5) > 0.2) * np.sqrt(trailing_zeros / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + np.fabs(sum_elements / len(vector) - 0.5)) 
  return minimize(lambda x: -x * min(2 - abs(2 * x - 1), 0.5) - np.exp(-len(str(bin(int(''.join(map(str,x))))).lstrip('0') or '1')) / n + (np.fabs(x - 0.5) > 0.2) * np.sqrt(len(str(bin(int(''.join(map(str,x)))).lstrip('0') or '1')) / n)
  - Counter(x).most_common(1)[0][1] ** (1 + np.fabs(x - 0.5)), [1/len(vector)]).x




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(2 - abs(2 * sum(vector) / len(vector) - 1), 0.5) - math.exp(-len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '1')) / n + (math.fabs(sum(vector) / len(vector) - 0.5) > 0.2) * math.sqrt(len(str(bin(int(''.join(map(str,vector)))).lstrip('0') or '1')) / n)
  - Counter(vector).most_common(1)[0][1] ** (1 + math.fabs(sum(vector) / len(vector) - 0.5))
  - np.sum([math.pow(x,2) for x in vector]) / (len(vector)**2)




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
       np.exp(-sum(1 for elem in vector if elem == 1) / n) * 
       sum(1 - abs(elem) for elem in vector) / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / 
       sum(map(abs, vector)) / n - 
       (sum(vector) ** (0.5 / len(set(vector)))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / 
       sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(map(abs, vector))) + 
       (n - len([x for x in vector if x])) / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  def func(x):
    return -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(x[0] - n/2)/n) + math.sin(trailing_zeros / n))
  
  result = minimize(func, [sum_elements], method="SLSQP")
  return result.fun




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  p1 = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  p2 = abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  p3 = min((x**2/n) for x in vector)
  p4 = max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  p5 = sum(sorted(vector)[::-1]) / n
  p6 = math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  p7 = sum(x for x in set(vector)) / n
  p8 = leading_zeros/n
  p9 = max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a better priority metric
  return (sum_elements + variance) / n + math.log(n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - Counter(''.join(map(lambda x: '1' if x else '0', vector)))[0], n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1)*x for i,x in enumerate(reversed(vector))) - (vector.count(0)/n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements > len(vector) // 2) * math.log((len(vector) / 2) + 1, 10)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (2*trailing_zeros/len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 2
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + ((sum_elements > len(vector) // 2) > 0) * math.exp((trailing_zeros / n))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x > 0, vector))) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, vector)) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  result -= np.mean(np.log1p(np.abs((vector - (sum_elements/n)))))

  # Add a regularization term to prevent overfitting
  result += 0.01 * np.sum(np.square(vector))

  return result




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time18:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  result -= np.mean(np.log1p(np.abs((vector - (sum_elements/n)))))

  # Add a new feature based on the mode of the vector
  mode = frequency.most_common(1)[0][0]
  result += math.exp(-abs(mode - sum_elements/n))

  return result




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + len(str(bin(int(''.join(map(str,vector)))))) / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 2
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 2
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) - 0.5) ** 2 - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.01) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -math.exp(-sum_elements / len(vector)) - (trailing_zeros / n) ** 2
  else:
    return -math.log((len(vector) + 1) / (2 * math.e)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) / 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10) + math.exp(-(sum_elements / n))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) * math.exp(-abs(sum_elements - len(vector) // 2) / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: 1 if x else 0, vector)) * 
       np.log((n - leading_ones) / n) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector))) - 
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       sum(abs(x) for x in filter(None, vector)) / 
       min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       sum(abs(x) for x in filter(None, vector)) / 
       min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # New feature: the number of unique elements
  unique_elements = len(set(vector))
  
  # Add a new feature based on the sum of squares of differences between elements and average
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n - sum((x - sum_elements/n)**2 for x in vector)




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  
  # New feature: the ratio of maximum element to total elements
  max_element_ratio = max(vector) / sum_elements
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + max_element_ratio




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + (unique_product**(1/len(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(math.exp(sum_elements) * (1 + (trailing_zeros / n))) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - (abs(sum_elements - len(vector) // 2) * math.log(n)) 




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) * 0.5




#score: {'n8_size512.txt': 356}
#island_id: 2
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  result += max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n

  # Add a new feature to improve the priority
  result -= math.exp(-(variance + (sum_elements - max(vector)) ** 2) / (n/4))

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Calculate the Shannon entropy of the vector
  shannon_entropy = entropy(frequency.values(), base=2)

  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector) + shannon_entropy




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add even more features to improve the priority
  result += math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - len([x for x in vector if x == 0]) / n + ((sum(vector) > len(vector) // 2) > 0) * (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * (n - trailing_zeros) / (n - 1) + 
      min(trailing_zeros, n) / n - 
      sum(abs(x) for x in vector) / sum_elements * 
      max(len(str(sum(1 for elem in vector if elem == 0))), 1))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       min(trailing_zeros, n) / n - 
       sum(abs(x) for x in vector) / sum_elements * 
       max(len(str(sum(1 for elem in vector if elem == 0))), 1) - 
       (sum_elements - len(vector)) ** 2 / (len(vector) * 100))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((math.sqrt(sum(abs(x) for x in vector))) / len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - len([x for x in vector if x == 0]) / n + ((sum(vector) > len(vector) // 2) > 0) * (len([x for x in vector if x == 0]) / n) + math.e ** (-sum(vector) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - len([x for x in vector if x == 0]) / n + sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (sum_elements > len(vector) // 2) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(vector) / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - len(str(np.sum(vector)).lstrip('0'))/n - max((Counter(vector).values()))/(min(Counter(vector).values())) - ((max(Counter(vector).values()))/(min(Counter(vector).values())))**2 + (np.mean(np.abs(vector - np.mean(vector)))) / n + len(set(sorted(vector)[::-1]))/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  # Calculate the priority
  variance = np.mean((vector - sum_elements/n)**2)
  manhattan_distance = np.sum(np.abs(vector - (sum_elements / n)))
  unique_elements = len(set(vector))

  # New feature: The number of elements that are farthest from the mean
  max_deviation = np.max(np.abs(vector - (sum_elements / n)))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + max_deviation / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 4) - ((sum_elements - len(vector) // 2) ** 3) / (n * 10)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_func(x):
    return -sum(x * np.log10(x)) - len([i for i in range(len(x)) if x[i] == 0]) / n + ((np.sum(x) > len(x) // 2) > 0) * (len([i for i in range(len(x)) if x[i] == 0]) / n) + np.exp(-np.sum(x) / len(x))

  res = minimize(loss_func, [1.0]*n, method="BFGS")
  return -res.fun




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - len([x for x in vector if x == 0]) / n + (sum(vector) > n // 2) * (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - len([x for x in vector if x == 0]) / n + ((sum(vector) > len(vector) // 2) > 0) * (len([x for x in vector if x == 0]) / n) - sum(vector) ** 2 / (n ** 2)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x * math.log10(x) for x in Counter(vector).values()]) - len([x for x in vector if x == 0]) / n + (sum(vector) > len(vector) // 2) * (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / (2*n) + (sum_elements > len(vector) // 2) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + sum_elements / n) + ((sum_elements > len(vector) // 2) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (abs(sum_elements - n/2)) * min(abs(sum_elements - n/2), n) / n




#score: {'n8_size512.txt': 340}
#island_id: 2
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  result += abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  result -= min((x**2/n) for x in vector)
  result += max(-sum(vector), 0)
  result += (max(vector) - min(vector)) / n
  result -= sum(sorted(vector)[::-1]) / n
  result += math.sqrt(leading_zeros) * n / len(vector)
  result -= sum(x for x in set(vector)) / n
  result -= max_freq/min_freq
  result -= (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  result -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm with gradient descent
  def priority_function(weights):
    result = 0
    for i, x in enumerate(vector):
      result += weights[i] * x
    return -sum_elements / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness
    - variance * (n - sum(1 for x in vector if x)) / n - abs(sum_elements - n/2) * math.sqrt(n)
    return result

  weights_init = [0.5] * len(vector)
  res = minimize(priority_function, weights_init)

  return priority_function(res.x)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm with better features
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness
  - variance * (n - sum(1 for x in vector if x)) / n - abs(sum_elements - n/2) * math.sqrt(n)
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - sum(x**6/(n*n*n*n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature to reduce the priority of vectors with many repeated elements
  result += -math.log2(sum(1 for x in set(vector)))
  
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  product_unique_elements = math.prod(set(vector))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + (unique_product**(1/len(vector))) / n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  log_sum = -sum(x * math.log10(x) for x in Counter(vector).values())
  return -log_sum - trailing_zeros / n + (sum_elements > len(vector) // 2) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (1 / math.log2(n + 1)) * trailing_zeros - ((n - sum_elements) ** 2) / (4 * n)




#score: {'n8_size512.txt': 317}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (len(vector) - sum_elements) / n + (sum_elements > len(vector) // 2) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - (abs(sum_elements - len(vector) // 2) * math.log(n))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - (abs(sum_elements - len(vector) // 2) * math.log(n)) - (math.sqrt(len(vector)) * sum_elements)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - abs(sum_elements - len(vector) // 2) * math.log(n) - (abs(sum_elements - 1/3*len(vector)) * math.sqrt(len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       len(str(sum_elements).rstrip('0')) / n)




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**(1 + min(len(str(x)), 3)/4), filter(None, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)))




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time19:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros + math.sqrt(sum_elements)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  log_sum = sum(math.log10(x) for x in Counter(vector).values())
  return -sum_elements - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n - log_sum




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time19:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n - sum(math.log10(x+1) for x in range(n-1, sum_elements//2, -1))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time19:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + min(sum_elements, len(vector)) / n * math.exp(-((len(vector) // 2) - sum_elements)**2 / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, filter(None, vector))) * (n - sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n - sum(1 for x in range(len(vector)-1,-1,-1) if vector[x] == 0)




#score: {'n8_size512.txt': 335}
#island_id: 1
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 320}
#island_id: 1
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(math.log10(x) for x in Counter(vector).values()) - (1 / n) * (trailing_zeros + math.fabs(sum_elements - n // 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  # calculate the entropy of the vector
  entropy = -sum((count / len(vector)) * math.log2(count / len(vector)) for count in Counter(vector).values() if count > 0)
  
  return -entropy - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, sorted(vector, key=abs)))) / min(sum(map(abs, vector)), 
                                       sum(map(lambda x: abs(x) if isinstance(x, int) else -float('inf'), vector))))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10) - ((trailing_zeros > n//4) > 0) * (sum_elements / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.exp(-len(vector) / 10)) 




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * math.log(sum_elements + 1) / math.log(n+2)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))[2:]).lstrip('0'))
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) + math.exp(-((sum_elements - len(vector) // 2) ** 2) / (n * 10))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 335}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros + sum(1 for x in vector if x > 0)) / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) / n + (1 - float(sum(vector) > len(vector) // 2)) * min(sum(vector), len(vector)) / n




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n + min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n - sum_elements**2 / (n*(len(vector)**2))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - trailing_zeros / n + (1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n - sum_elements / math.sqrt(len(vector))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) * math.exp(-(len(vector) - sum_elements) / (n * 10))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 1.5) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((n - sum_elements) ** 2) - ((sum_elements - len(vector) // 2) ** 2) / (n * 10)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - (abs(sum_elements - len(vector) // 2) * math.log(n)) + abs(sum(vector) - (n/2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2) + math.exp(-len([x for x in vector if x == 0]) / (n * sum(vector))) - ((len(vector) - sum(vector))**2)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - (abs(sum_elements - len(vector) // 2) * math.log(n)) - (math.sqrt(len(vector)) * sum_elements)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: x**2, vector))) + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((len(vector) - sum(vector)) ** 2) - (abs(sum(vector) - len(vector) // 2) * math.log(n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - sum(map(lambda x: abs(x-0), vector))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - min((abs(sum_elements) / n), abs(1 - (sum_elements / n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(math.log10(i+1) if i < len(vector)-sum(vector) else 0 for i in range(len(vector)))) + (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((n-sum(vector)) ** 2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(n)

  variance = np.sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result += np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - np.sum(x**7/(n*n*n*n*n*n) for x in vector)

  result = (1 + np.exp(-result))

  return -(np.log(result))




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more robust loss function
  result -= math.exp(-result)

  # Apply the absolute value
  return abs(result)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  weighted_priority = priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return weighted_priority + math.fsum(x/n for x in vector) - max_freq/min_freq




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  priority += (variance + weighted_variance) ** 0.5




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  
  std_deviation = math.sqrt(variance)

  # New feature: the number of times each element appears in the vector
  frequency_variability = sum((x - max(frequency.values()))**2 for x in frequency.values()) / max(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation + frequency_variability




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum_elements**2/(4*n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum(1 for _ in vector)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum((x - 1) ** 2 for x in Counter(vector).values())




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(len(vector))) - ((math.fabs(len(vector) - sum_elements)) / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - abs((sum_elements - len(vector) // 2) / (n * 10))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (Counter(str(vector)).get('0', 0) / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n) + min(0.5, math.exp(-(len(vector)-trailing_zeros)/n))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.log(n) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((abs(sum(vector) - len(vector) // 2)) * math.log(n))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  trailing_zeros = len(vector) - len(str(''.join(map(lambda x: '0' * x, frequency.values()))).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - trailing_zeros/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  - variance ** 0.5 / math.sqrt(n)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  unique_product = math.prod(set(vector))
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (-sum_elements - leading_zeros)/n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  + sum(1 if x > 0.5 else 0 for x in Counter(vector).values()) / n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n) 
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n) 
  - min(0 if i < sum_elements else math.exp((i-sum_elements)**2), i<n)//n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - ((len(vector) - sum_elements)**(3/4))/n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - sum(map(lambda x: min(abs(x-0.5), abs(x-0.7))/n, vector))




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # New features: 
  product = math.prod(vector)
  sum_cubes = sum(x**3 for x in vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + product/n - sum_cubes/(n*n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: Manhattan distance to the mean
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)

  # New feature: The number of unique elements
  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum([x*math.log10(x) if x==0 else 0 for x in Counter(vector).values()])




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - (sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) + (n - sum_elements) / (len(vector) ** 2)




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  entropy = -sum((count / n) * math.log2(count / n) for count in Counter(vector).values() if count > 0)
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - entropy




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum(x**2 for x in vector) / n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   ((n - leading_ones) / n) ** 1.7 * 
   sum(x for x in vector if x > 0) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
   ) + sum(1 for elem in vector if elem < 0) / (len(vector) ** 0.5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(x**2 for x in vector) / max(sum(x for x in vector), 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n) + (bin(int(''.join(map(str,vector))))[2:].count('0')/(4*n)) - abs(sum(vector)-n//2)/(2*n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - ((len(vector) - sum_elements)**(3/4))/n
  - (sum(map(lambda x: abs(x-(n+1)//2), Counter(vector).values()))/(2*n))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for _ in vector))) + (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum_elements / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum_elements / sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (math.sqrt(len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / math.sqrt(n))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - ((len(vector) - sum_elements)**(3/4))/n
  - min((x-n+1)**2 for x in vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - ((len(vector) - sum_elements)**(3/4))/n
  + (sum(map(lambda x: 0 if x == 0 else math.log(x), Counter(vector).values()))/math.log(n))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - ((len(vector) - sum_elements)**(3/4))/n
  - (sum(1/x for x in Counter(vector).values()) if 0 not in Counter(vector).values() else 0)/n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n) + 1/(sum_elements*n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: min(x, len(vector)-x), vector))/n) + (min(abs(x-1) for x in vector)/n) 
  - (max(abs(x-n+1) for x in vector)/n) + 1/(sum_elements*n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  + (math.exp((len(vector)-sum_elements)/n))
  - (math.tanh(abs(sum_elements-n//2)/n))
  + 1/(sum_elements*n) - math.log(n)/(n*trailing_zeros)
  - sum(map(lambda x: min(abs(x-0.5), abs(x-0.7))/n, vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  - (abs(sum_elements - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - sum(map(lambda x: min(abs(x-0.5), abs(x-0.7))/n, vector))
  + sum((x-n/2)**2 for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum_elements ** 2 / (n * (n-1))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n) - sum_elements**2/n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n

  # Add more features to improve the priority
  result += sum(x**3/(n*n) for x in vector) / (variance * math.sqrt(n))
  result -= sum(x**4/(n*n*n) for x in vector) / (skewness * variance ** 2)
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  # Calculate the priority using a more robust algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.sqrt((sum(1 for x in vector if x)/n)**3 + (sum(1 for x in vector if not x)/n)**2) * variance * n
  - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  # Calculate the priority using a more robust algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n) for x in vector)
  
  # Add a new feature based on the number of unique elements
  return result + math.exp(-n/len(set(vector))) * len(set(vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])

  # Calculate the entropy of the vector
  entropy = -sum((p/n) * math.log2(p/n) for p in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - entropy




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from math import log2
  from functools import reduce
  vector_entropy = -sum((x / sum(map(abs, vector))) * log2(x / sum(map(abs, vector))) for x in vector if x != 0)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * vector_entropy / log2(len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(math.pow(abs(x), 0.5) for x in vector) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(map(abs, vector)) / (n * sum(map(abs, filter(None, vector)))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(map(lambda x: 1/x, filter(None, vector))) / (n * sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** 0.5 + len(str(sum(1 for x in vector if x == 0)).lstrip('0')) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((len(vector) - sum(vector)) ** 2) - ((abs(sum(vector) - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum(vector))) / n) - (sum(x**2 for x in Counter(vector).values()) / n)
  - (abs(sum(vector) - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - sum((x-n/2)**2 for x in vector)
  + ((len(vector) - math.sqrt(8*sum(vector)+1)) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum(map(lambda x: min((n-x)**2, (x-1)**2), vector))/n) - ((len(vector) - sum_elements) ** 2) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - trailing_zeros / n + (len(vector) - sum_elements) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum(x**2 for x in vector) + (trailing_zeros / n) - ((n/2 - sum_elements)**2) - min(abs(x-1) for x in vector) + max(abs(x-n+1) for x in vector)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(abs(x)) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(abs(sum_elements), len(vector)) / n)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(max(1, x)) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(sum_elements, len(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log10(x) for x in Counter(vector).values()) - (len([x for x in vector if x == 0]) / n) + ((1 - float(sum(1 for x in vector if x > 0) <= len(vector) // 2)) * min(sum(1 for x in vector), len(vector)) / n)




#score: {'n8_size512.txt': 317}
#island_id: 1
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(abs(x) if x != 0 else 1) for x in Counter(vector).values()) + (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(abs(sum_elements), len(vector)) / n) - sum((x - 1) ** 2 for x in Counter(vector).values()) - (abs(len(vector) - 2*sum(x!=0 for x in vector)) / n)




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(x) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(abs(sum_elements), len(vector)) / n) - sum((x - 1) ** 2 for x in Counter(vector).values()) + sum_elements / n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum(x * math.log10(abs(x)) for x in Counter(vector).values()) - (trailing_zeros / n) + ((1 - float(sum_elements > len(vector) // 2)) * min(abs(sum_elements), len(vector)) / n) - sum((x - 1) ** 2 for x in Counter(vector).values()) - math.sqrt(len(vector)) * sum(1 for x in vector if x < 0)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  + math.exp(-((len(vector)-sum_elements)/n)**2) 
  - math.tanh(abs(sum_elements-n//2)/n)
  + 1/(sum_elements*n) - math.log(n)/(n*trailing_zeros)
  - sum(map(lambda x: min(abs(x-0.5), abs(x-0.7))/n, vector))
  + sum(map(lambda x: (abs(x-0.4)), Counter(vector).values()))




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp((len(vector)-sum_elements)/n) * (sum_elements**3 + trailing_zeros**2) - math.tanh(abs(sum_elements-n//2)/n) * ((len(vector) - sum_elements)**2 + (abs(sum_elements - len(vector) // 2)) * math.log(n)) + math.sin((math.fabs(len(vector) - sum_elements))/n) * sum(map(lambda x: x**3, Counter(vector).values()))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) - (sum(map(lambda x: x**2, Counter(vector).values()))/n)
  + (math.exp((len(vector)-sum_elements)/n))
  - (math.tanh(abs(sum_elements-n//2)/n))
  + 1/(sum_elements*n) - math.log(n)/(n*trailing_zeros)
  - sum(map(lambda x: min(abs(x-0.5), abs(x-0.7))/n, vector)) 
  - ((len(vector)-trailing_zeros)**0.5)/n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum(x**2 for x in vector) + (trailing_zeros / n) - ((len(vector) - sum_elements) ** 2) - ((abs(sum_elements - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum_elements)) / n) + math.exp((n-sum_elements)/n)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in Counter(vector).values()) + sum(abs(x-n/2) for x in vector)) / n + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((len(vector) - sum(vector)) ** 2)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (bin(int(''.join(map(str,vector)))).count('0') / n) - ((len(vector) - sum(vector)) ** 2) - ((abs(sum(vector) - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum(vector))) / n) - (sum(x**2 for x in Counter(vector).values()) / n)
  - (abs(sum(vector) - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - sum((x-n/2)**2 for x in vector)
  + ((len(vector) - math.sqrt(8*sum(vector)+1)) / n)
  - (math.gcd(sum(vector),n-1) * math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) - ((len(vector) - sum(1 for x in vector if x > 0)) ** 2) - ((abs(sum(vector) - len(vector) // 2)) * math.log(n)) - ((math.fabs(len(vector) - sum(vector))) / n) - (sum(x**2 for x in Counter(vector).values()) / n)
  - (abs(sum(vector) - n//2)/n) 
  - (min(abs(x-1) for x in vector)/n) 
  + (max(abs(x-n+1) for x in vector)/n)
  - sum((x-n/2)**2 for x in vector)
  + ((len(vector) - math.sqrt(8*sum(map(abs, vector))+1)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**2 for x in filter(None, sorted([x for x in vector if x != 0], reverse=True))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) ** 1.3 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 1.3 * max(sum_elements, 1)




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - (sum(1 for elem in vector) // n)
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 1.3 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1)).count('1'), n) / n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - str(sum_elements).rstrip('0').count('-') - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * sum_elements / (n * max(len(str(sum_elements)), len(vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * sum(map(lambda x: abs(x)**2, filter(None, vector))) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(None, vector))) / 
      max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))), 
       sum(vector) + bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector))) / 
       max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(None, vector))) / 
      max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**11/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**12/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # New feature: the entropy of the vector
  import scipy.stats as stats
  entropy = -sum((x/sum_elements)*math.log2(x/sum_elements) for x in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation + entropy




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # New feature: the ratio of unique elements to total elements
  unique_ratio = unique_elements / len(vector)

  # New feature: the standard deviation of the frequency distribution
  freq_std_deviation = math.sqrt(sum((x - sum(frequency.values()) / len(frequency))**2 for x in frequency.values()) / len(frequency))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation + unique_ratio + freq_std_deviation




#score: {'n8_size512.txt': 369}
#island_id: 2
#version_generated: 3
#generate time19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the sum of absolute differences between neighboring elements
  diff_sum = sum(abs(x - y) for x, y in zip(vector, vector[1:]))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + diff_sum / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # Calculate the priority based on the sum and trailing zeros
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add even more features to improve the priority
  result += math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    leading_zeros = len(str(sum_elements).lstrip('0'))
    frequency = Counter(x)
    max_freq = max(frequency.values())
    min_freq = min(frequency.values())

    if (sum_elements <= n/2 and sum(1 for xi in x if xi) >= n//2):
      return math.sqrt(n)
    elif (sum_elements > n/2 and sum(1 for xi in x if xi) < n//2):
      return -math.sqrt(n)

    # Calculate the priority
    variance = np.sum((x - sum(x)/n)**2) / n

    # New feature: the ratio of zeros to total elements
    zero_ratio = len([i for i in range(len(x)) if x[i] == 0]) / len(x)

    # New feature: the number of unique elements
    unique_elements = len(set(x))

    return -(sum(x) / n + (n - sum(1 for xi in x if xi)) ** 2 / n) + abs(sum(x) - n/2) * (n - sum(1 for xi in x if xi)) / n - min((xi**2/n) for xi in x) + max(-sum(x), 0) + (max(x) - min(x)) / n - np.sum(sorted(x)[::-1]) / n + math.sqrt(len([i for i in range(len(x)) if x[i] == 0])) * n / len(x) - sum(xi for xi in set(x)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n

  x0 = np.array([1.0] * len(vector))
  res = minimize(objective_function, x0)
  return res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements + trailing_zeros / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem > 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  trailing_zeros = len(str(sum(1 for elem in vector[leading_zeros:] if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - (trailing_zeros / n) - (max(vector) / (n * sum(vector))) * trailing_zeros




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in filter(None, vector)))[2:].count('1'))/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/(n*min(len(str(n)), len(str(len(vector))))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) ** 0.5 for x in vector) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)**2




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  result += abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  result -= min((x**2/n) for x in vector)
  result += max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  result -= sum(sorted(vector)[::-1]) / n

  # Apply a more robust loss function
  result = math.exp(-result)

  return -(math.log(result))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Apply a more robust loss function
  result = math.exp(-result)

  return -(math.log(result))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result)) + min([abs(x-y) for x,y in zip(sorted(vector), sorted(vector)[::-1])]) * n / len(vector)




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  skewness = (sum((x - sum_elements/n)**3 for x in vector) / n) ** (1/3)
  
  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector) + skewness




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add new features
  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())
  return -(math.exp(-variance/n) + entropy + math.sin(sum_elements/n)) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > 2 * len(vector) / 3:
    return -math.exp(-(trailing_zeros / n))
  else:
    return math.exp(-sum_elements) * (1 + math.sin(trailing_zeros * math.pi / n))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the ratio of maximum frequency to total elements
  max_freq_ratio = max_freq / (n * (max_freq + min_freq) / 2)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - max_freq_ratio




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # New feature: the ratio of max value to total elements
  max_value_ratio = max(vector) / sum_elements
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - max_value_ratio




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # New feature: the product of all elements
  product = math.prod(vector)
  product_variance = (math.prod(x**2 for x in vector) - product**2) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - zero_ratio - product_variance




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / len(vector)) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2)




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).rstrip('0').lstrip('0'))
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Add more features to improve the priority
  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + entropy




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5/len(set(vector)) for x in vector) / min(sum(1 for _ in vector), len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min((n - i) * sum(map(abs, filter(None, vector))) / n for i in range(min(n, leading_ones), n)) * 
      max(len(set(map(abs, vector))), 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) - math.sqrt(trailing_zeros)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) - trailing_zeros / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min([(n - i) * math.log((n - i) + 1) / n for i in range(min(leading_ones, n), n)]) * 
    sum_elements / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector)) + 
    len([i for i in vector if i == 0]) / len(vector)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum((n - i) / n for i in range(min(sum(1 for elem in vector if elem == 1), n), n)) * 
    min(sum(map(abs, vector)), len(vector))
  )




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(len([i for i in vector if i != 0]), n), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - vector.count(0), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**4




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**8




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - (trailing_zeros / n) - ((max(vector) + 1) / (n * sum(vector))) * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - (trailing_zeros / n) + (leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(vector) if vector else 1)) - (trailing_zeros / n) + ((max(vector) / sum_elements) ** 2) * trailing_zeros




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max_element)) - (trailing_zeros / n) - ((max_element + 1) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(variance + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  normalized_sum = (sum_elements / n) ** 2
  normalized_variance = variance / n
  
  leading_zeros_penalty = math.exp(-leading_zeros / n)
  
  max_freq_penalty = math.exp(-(max_freq / min_freq) ** 2)
  
  manhattan_distance_reward = math.exp(-manhattan_distance / n)
  
  unique_elements_reward = math.exp(unique_elements / n)
  
  zero_frequency_reward = math.exp(zero_frequency / n)
  
  return -(normalized_sum + normalized_variance) - leading_zeros_penalty - max_freq_penalty + manhattan_distance_reward + unique_elements_reward + zero_frequency_reward




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * variance**0.5 + abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result))

  # Add entropy to the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + stats.entropy(frequency.values()) / math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / n + len(str(sum(1 for elem in vector if elem == 0))) / (n * max(vector, default=1))




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -(sum_elements / (n * max_element)) - (trailing_zeros / n) - ((max_element + 1) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements / (n * max_element) - trailing_zeros / n - math.sqrt((max_element + 1) ** 2 / (n * sum_elements))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / (n * len(set(vector))) + sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n) * (1 - sum_elements / n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:])) - bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector)))) + min(n - leading_zeros, n) / n




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n) * (1 - sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - trailing_zeros) / n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  # New feature: the entropy of the vector
  entropy = -sum((x/n) * math.log2((x/n)) for x in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - entropy




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)

  return result + math.exp(-std_deviation/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n*n) for x in vector)
  return result + math.exp(-min((x-n/2)**2 for x in vector)/n) - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  result += zero_ratio + unique_elements / n + std_deviation

  # New feature: the ratio of zeros to total elements squared
  result += math.pow(zero_ratio, 2)
  
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time20:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements
  unique_elements = len(set(vector))

  # New feature: the standard deviation of the vector
  std_deviation = math.sqrt(variance)

  # New feature: the sum of absolute differences between adjacent elements
  diff_sum = sum(abs(x - y) for x, y in zip(sorted(vector), sorted(vector)[1:]))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - diff_sum




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  # Use gradient descent to optimize the priority
  def objective_function(prior):
    result = 0
    for i in range(len(vector)):
      if vector[i] == 1:
        result += prior
    return -result

  res = minimize(objective_function, x0=0.5)
  return res.x[0]




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, vector)) / 
       min(sum_elements, sum(map(abs, vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) / abs(sum(map(abs, vector))) if x != 0 else 0 for x in vector)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum_elements) * len(set(vector)) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -(sum_elements / (n * max_element)) - ((trailing_zeros + math.log2(n)) / n) - ((max_element + 1) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - len(str(sum(1 for elem in vector if elem == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * len(set(vector)))) - (len(str(sum(1 for elem in vector if elem == 0))) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) / n) - (len(bin(int(sum(1 for elem in vector if not bool(elem))))[2:]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / ((max(vector) + 1) ** 2)) - (len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -math.exp(-(sum_elements / (n * max_element))) * (trailing_zeros + math.log2(n)) / n - ((max_element + 1) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time20:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - leading_ones) / n) * 
       math.prod(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
      )**3
  + (sum_elements - len(vector)) ** 4 / max(len(vector), sum(map(abs, vector)))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + (unique_product**(1/len(vector))) / n + variance / n




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))
  
  # New feature: the ratio of ones to total elements
  one_ratio = len([i for i in range(len(vector)) if vector[i] == 1]) / len(vector)
  
  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + one_ratio + unique_product**(1/len(vector)) / n - math.exp(-variance/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - abs(sum_elements-n/2)*math.log10((n/2)/abs(sum_elements-n/2))




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(sum(1 for elem in vector)) / math.log(n) + len(bin(sum(1 for elem in vector if elem == 0))[2:]) / n




#score: {'n8_size512.txt': 326}
#island_id: 0
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -(sum_elements / (n * max_element)) - (trailing_zeros / n) - ((max_element + 1) ** 2) / (n * sum_elements) + math.exp(-((sum_elements / n) ** 2)) * sum_elements




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector) if vector else 1
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -(sum_elements / (n * max_element)) - (trailing_zeros / n) - ((max_element + 1) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / n + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result))

  # Add entropy to the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + stats.entropy(frequency.values()) / math.log(n)

  # Add more advanced features to the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + stats.entropy(frequency.values()) / math.log(n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**3)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (len(vector)**3)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + sum(1 for i in range(len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - (math.log10(len([i for i in Counter(vector).values() if i > 0])) / math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.log(len(set(vector)), 2)




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(set(vector)) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) - (sum_elements - n/2) ** 2 / (4 * n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(x**2 for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) + (1 if sum_elements < n / 2 else 0)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)
  if sum_elements > n / 2:
    return 1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return 0.




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) - Counter(map(int, vector)).most_common(1)[0][1] / len(vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.log(len(set(vector)) + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem == 0) + math.log10(n) * (max(vector) - min(vector))) / sum(vector)




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5) - (len(set(vector)) - sum(1 for elem in vector if elem == 0)) / n




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for x in set(vector) if x < 0) * (sum(abs(x) for x in filter(lambda x: x != 0, vector)) or len(vector)) - 
       (len([x for x in reversed(vector) if x == 0]))/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_abs_elements = sum(abs(x) for x in vector)
  return -(sum_abs_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(1 for x in set(vector) if x < 0) * (n - sum_abs_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**(0.5/len(set(vector)))) * (n - sum(1 for i in range(n) if i < len(vector) and vector[i] == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(-x for x in set(vector) if x < 0) * len(vector))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (len(vector) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(-sum_elements / (n * len(vector)), 2) + math.exp(-(trailing_zeros / (n * len(vector)))) * (-1) * sum_elements / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) - math.log((sum_elements/(n/2))**2 + ((sum_elements-n/2)/n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / sum(vector) - (n ** 0.5) * len(set(vector)) / sum(vector)




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(set(vector)) + 1) ** 2) / (n * len(set(vector))) + (len([elem for elem in vector if elem != 0]) / (n * len(vector)))




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)
  if sum_elements > n / 2:
    return 1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return 0.




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) - trailing_zeros / (n ** 2)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)
  if sum_elements > n / 2:
    return 1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return 0.




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(len([i for i in set(vector) if i > 0])) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** len(set(vector))) / (n * len(set(vector)))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - sum(math.log10(x) for x in Counter(vector).values()) / math.log10(n)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) + math.exp(-len([elem for elem in vector if elem != 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  unique_elements = len(set(vector))
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  std_deviation = math.sqrt(variance)

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result += zero_ratio + unique_elements / n + std_deviation
  
  # Add new features
  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())
  
  result -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  result -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  result -= sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  return -(math.exp(-variance/n) + entropy + math.sin(sum_elements/n)) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  variance = np.var(vector)

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add new features
  ent = entropy(frequency.values(), base=2)
  return -(math.exp(-variance/n) + ent + math.sin(sum_elements/n)) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  std_deviation = math.sqrt(variance)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + (sum_elements / max(vector)) * math.log(max(vector) / min(vector)) - abs(sum(x**9/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - math.log(len(set(vector))) / math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - math.log((max(vector) + 1) ** len(set(vector))) / math.log(n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * max(vector)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - sum(1 for i, _ in enumerate(vector) if _ == 0) / n




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(len([i for i in set(vector) if i > 0])) / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').translate({ord('0'): None}))
  return -(sum_elements * (n - len(set(vector))) + trailing_zeros) / (n * sum_elements) - math.sqrt(len([i for i in Counter(vector).values() if i > 1])) / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(sum(i**2 for i in set(vector) if i > 0)) / n




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((abs(sum_elements - n/2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.exp(-trailing_zeros / (n * len(vector))) + 1) + abs(sum_elements - n/2) / len(vector) - ((sum_elements > n / 2) and sum_elements > n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / n
  elif trailing_zeros > len(vector) // 2:
    return math.exp(-sum_elements / (n * len(vector)))
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)
  if sum_elements > n / 2:
    return -1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return -math.log(trailing_zeros/n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time20:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * len(vector))
  elif trailing_zeros > 0:
    return math.exp(-sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector))
  else:
    return sum_elements / (len(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector) if trailing_zeros == 0 else (1 - math.exp(-(sum_elements**2 + trailing_zeros) / ((n*len(vector))**(3/2)))) / 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return -math.log(trailing_zeros/n) * (n / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return math.exp(-sum_elements) * math.exp(trailing_zeros / (n * len(vector)))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - math.pow(len(set(vector)) - Counter(vector)[0], 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(abs(sum(1 for elem in vector if elem == 0))))
  return -trailing_zeros / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - (max(vector) + math.log(len(set(vector)))) ** 2 / (n * len(set(vector)))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - (len(set(vector)) - sum(1 for elem in set(vector) if elem == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - math.sqrt((max(vector) + 1) ** 2 + len([i for i in set(vector) if i > 0])) / n




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / sum(vector) - ((max(vector) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n - math.sqrt(len(set(vector))) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (sum(1 for x in frequency.values() if x > 0)**2) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = sum(1 for elem in vector if elem == 0)
  non_zeros = len(set([i for i in vector if i > 0]))
  return -zeros / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * non_zeros) - math.sqrt(non_zeros) / n




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(len([i for i in set(vector) if i > 0])) / n - len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(sum(i**2 for i in set(vector) if i > 0)) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(Counter(vector).values()) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(sum(x**2 for x in Counter(vector).values() if x > 0)) / n




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(vector) + 1) ** 2) / (n * len(set(vector))) - math.sqrt(sum(i**2 for i in Counter(vector).values() if i > 0)) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)
  if sum_elements > n / 2:
    return 1.0
  elif trailing_zeros == 0:
    return 0.5
  else:
    return 0.




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the weight for each component
  sum_weight = 2 * (n / 2 - abs(sum_elements - n / 2)) / (n ** 2)
  trailing_zero_weight = math.exp(-trailing_zeros / (n * len(vector)))
  
  return -(sum_elements + trailing_zeros) * sum_weight * trailing_zero_weight




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * len(vector))
  else:
    return -sum_elements * math.exp(-trailing_zeros / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return - (sum_elements ** math.sqrt(unique_counts) + 
        min(n - leading_ones, n) * math.exp(-leading_ones / n) / n + 
        min(trailing_zeros, n) * math.exp(-trailing_zeros / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in vector) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(abs(x) for x in vector) / sum(1 for x in vector if x != 0) / n)**3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  
  return -(sum_elements ** (math.exp(-trailing_zeros / n)) + 
       min(n - math.log2(unique_counts), n) * 
       sum_elements / (n * unique_counts))




#score: {'n8_size512.txt': 331}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(set(vector)) + 1) ** 2) / (n * len(set(vector)))
  - (math.log10(sum(vector))) / (n * math.log10(len(set(vector))))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((max(set(vector)) + 1) ** math.log2(len(set(vector)))) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - math.log2(len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem == 0) / (n * sum(vector)) - ((math.log(len(set(vector))) + 1) ** 2) / (n * len(set(vector)))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - math.exp(-trailing_zeros / (n * len(vector)))) - abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.log(sum_elements + 1) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-trailing_zeros / (n * len(vector))) * min(sum_elements, n) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - sum_elements / (len(vector)**2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-trailing_zeros / (n * len(vector))) * min(sum_elements, n/2) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0') / (n * len(vector))) + ((sum(vector) > n / 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - sum(vector) / (len(vector)**2) + abs(sum(vector) - n/2) / len(vector)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n / 2) > 0) * (trailing_zeros / n) - (sum_elements**2) / (len(vector)**3) + abs(sum_elements - n/2) / len(vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**11/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**12/(n*n*n*n*n*n*n*n*n) for x in vector)
  return result




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.log(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - (trailing_zeros / n if n else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) - math.log2(n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector using list comprehension
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1) * min((len(vector) - len(bin(sum(1 for elem in vector if elem == 0))[2:])) / len(vector), 1)




#score: {'n8_size512.txt': 283}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1) + min(len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n) / n




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt((sum(map(abs, vector)) / len(set(vector)))) * (sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return -(sum_elements ** (0.5 / unique_counts) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n + 
       min(trailing_zeros, n) * np.exp(-trailing_zeros / n) / n + 
       sum(1 for elem in vector if elem == 0) / unique_counts)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return -(sum_elements ** (0.5 / math.sqrt(unique_counts)) + 
      min(n - leading_ones, n) * math.exp(-leading_ones / n) / n + 
      min(trailing_zeros, n) * math.exp(-trailing_zeros / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return -(sum_elements ** (0.5 / unique_counts) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n + 
       min(trailing_zeros, n) * np.exp(-trailing_zeros / n) / n + 
       max(1, sum(map(abs, filter(None, vector)))) ** 2 / (n**2))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_counts = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')

  return -(sum_elements ** (0.5 / unique_counts) + 
       math.exp(-leading_ones / n) + 
       math.exp(-trailing_zeros / n)) / 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  return -(sum_elements * (n - len([i for i in vector if i])) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + trailing_zeros / n - sum_elements ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - vector.count(1))) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  + unique_elements / n + std_deviation
  + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + math.exp(-variance/n)
  - abs(sum(x**8/(n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n) for x in vector)
  + math.exp(-std_deviation/n)
  - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)
  + math.exp(-min((x-n/2)**2 for x in vector)/n)
  - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - (max_freq/min_freq)**2 + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n) for x in vector)
  - math.exp(-std_deviation/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)
  - math.exp(-min((x-n/2)**2 for x in vector)/n) - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)
  return result




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio

  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # New features
  result += math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n) for x in vector)
  result += math.exp(-std_deviation/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)
  result += math.exp(-min((x-n/2)**2 for x in vector)/n) - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = x[0]
    leading_zeros = len(str(sum_elements).lstrip('0'))
    frequency = Counter(vector)
    max_freq = max(frequency.values())
    min_freq = min(frequency.values())

    if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
      return -math.sqrt(n)
    elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
      return math.sqrt(n)

    variance = sum((x - sum_elements/n)**2 for x in vector) / n

    zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
    unique_elements = len(set(vector))
    std_deviation = math.sqrt(variance)

    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  result = minimize(objective_function, [sum(vector)], method="SLSQP").fun
  return result + math.exp(-n/(sum(vector) + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n) for x in vector)
  return result + math.exp(-std_deviation/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)
  return result + math.exp(-min((x-n/2)**2 for x in vector)/n) - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements / (n + 1) * math.log2(trailing_zeros / n + 1e-6) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))) - 2
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  return result

  # More advanced algorithm to improve the priority
  return math.exp(-sum_elements/n) * (1 + abs(sum(1 for x in vector if x) - n//2)/n) * math.log(n) - min((x**3/n) for x in vector) - max_freq/min_freq - (max_freq/min_freq)**2 - sum(x for x in set(vector)) / n - leading_zeros/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result + math.exp(-(variance/n)**2) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements / (n - trailing_zeros) if n > trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[:-2]) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem)))
  return -sum_elements * (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))) - 2
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))) - 2
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - math.log2(sum_elements + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])

  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])

  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])

  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:].lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])

  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum(map(math.log2, Counter(vector).values())) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum([math.log2(i+1) for i in range(len(vector)-trailing_zeros)])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])

  # Calculate the number of ones
  num_ones = len([elem for elem in vector if elem == 1])

  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * n) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 10)
      ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / min(sum(map(abs, vector)), n)
  ) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) / len(set(vector)) + 
       sum(1 for i, elem in enumerate(vector) if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1)).count('1')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n) * math.exp(-math.sqrt(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + math.log2(n - trailing_zeros) / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n) * math.exp(-(len(set(vector)) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(list(vector)) if i == 0]) / n * math.log(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.log(sum_elements + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.log2(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n) * math.e ** (-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -(sum_elements + (n - trailing_zeros) / n) * math.log(n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
   min(n - leading_ones, n) / n * 
   sum(map(abs, filter(None, vector)))/max(1, sum_elements) * 
   np.sqrt(np.var(vector)) / max(math.sqrt(np.var(vector)), 0.001) + 
   trailing_zeros / (n * unique_elements) -
   math.exp(-(sum(map(abs, vector)) ** 2) / ((n ** 2) * min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
   min(n - leading_ones, n) / n * 
   sum(map(abs, filter(None, vector)))/max(1, sum_elements) * 
   math.sqrt(np.var(vector)) / max(math.sqrt(np.var(vector)), 0.001) + 
   trailing_zeros / (n * unique_elements))




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 2
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements / math.log2(n)) + math.log2(trailing_zeros + 1) / math.log2(n)




#score: {'n8_size512.txt': 342}
#island_id: 2
#version_generated: 3
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n
  
  # Add more features to improve the priority
  return result + gmean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))]) * 10




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    entropy -= prob * math.log(prob, 2)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - entropy




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
 
  unique_elements = len(set(vector))
 
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
 
  zero_frequency = frequency[0]
 
  return -(math.exp(-variance) * variance + math.exp(-(manhattan_distance/(n/2))) * manhattan_distance + (min_freq/min_freq)**2 + max_freq/min_freq + unique_elements / n + leading_zeros/n - math.sqrt(zero_frequency) * n / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  kurtosis = sum(((x - (3*sum_elements)/n + (4*(x**4)/(25*n)))/(4/(5*n))) for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  median_absolute_deviation = np.median(np.abs(vector - np.median(vector)))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - median_absolute_deviation




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem == 0).bit_length() // 8, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if not any(i < j and vector[j] for j in range(len(vector)))) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Add more features to improve the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # New features
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  product_unique_elements = math.prod(set(vector))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # New features
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n
  
  product_unique_elements = math.prod(set(vector))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # New features
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # More new features
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector) + math.exp(-product_unique_elements/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  product_unique_elements = math.prod(set(vector))

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  priority += min((x**2/n) for x in vector)
  priority += max(-sum(vector), 0)
  priority += (max(vector) - min(vector)) / n
  priority -= sum(sorted(vector)[::-1]) / n
  priority -= math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  priority -= sum(x for x in set(vector)) / n
  priority -= leading_zeros/n
  priority -= max_freq/min_freq - (max_freq/min_freq)**2

  # New features
  priority += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  priority -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  priority -= sum(x**7/(n*n*n*n*n*n) for x in vector)
  priority += math.exp(-variance/n)
  priority -= abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  priority -= sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)

  return priority




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in filter(lambda x: abs(x) > 0.5 * sum(map(abs, vector)) / n, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min((sum(map(abs, vector))) ** 2, 
                                       (sum(x**2 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in set(vector)) ** (len(set(vector))**-0.5) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(x for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / len(set(vector))) ** (0.5 / len(set(vector)))) * \
      ((n - sum(1 for elem in vector if elem == 1)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x)**2 for x in vector) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  ) ** 2




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
 
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/(n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n - vector.count(1))) + math.log2(vector.count(0) + 1) / math.log2(n) - sum(vector)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - len(vector) + 1 - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * n) + math.log2(trailing_zeros + 1) - sum_elements




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n - len([elem for elem in vector if elem == 0]))) + math.log2(len(Counter(vector).values()) + 1) / math.log2(n) - sum(vector)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  std_deviation = math.sqrt(variance)

  return - (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - 3*(x**2)/n + (2*(x**3)/(9*n))) for x in vector) / n
  kurtosis = sum(((6*x**4 + 27*(x**3) - 18*(x**2)) / (6 * n)) for x in vector) / n

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
 
  kurtosis = sum(((8*x + 3*(x**3)) / (6 * n)) for x in vector) / n

  entropy = -sum((p/n)*math.log(p/n) for p in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis - entropy




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  kurtosis = sum(((8*x + 3*(x**3)) / (6 * n)) for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - skewness - kurtosis

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n - sum(1 for x in vector if not x))) + math.log2(sum(1 for x in vector if not x) + 1) / math.log2(n) - sum(vector)/n - math.sqrt(sum(vector)) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v2`.
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - min(sum_elements, n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n + sum_elements**2 / (n*(n-1))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector)))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -(sum_elements + leading_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  return (-sum_elements / n) * (n - len(str(sum(1 for elem in vector if not elem))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector)))
  return -sum_elements / (n - len(str(sum(1 for elem in vector))) + len(str(sum(1 for elem in vector)).lstrip('0')))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if n > trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -sum_elements / (n - max(trailing_zeros, 1))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 2
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * trailing_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * trailing_zeros) / (n - min(trailing_zeros, sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements - min(sum_elements, n) + 2 * trailing_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_ones = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * leading_ones) / (n - leading_ones)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
    sum(x for x in vector if x != 0) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) * (0.5 + min(len(set(vector)) / n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum(abs(x) for x in vector)) + 
      (n - leading_ones) / n + 
      sum(map(math.log10, filter(lambda x: x != 0, vector))) / math.log10(n))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  entropy = -sum((x/sum_elements)*math.log2(x/sum_elements) for x in frequency.values())

  # New feature: the difference between maximum and minimum elements
  max_diff = max(vector) - min(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation + entropy + max_diff




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  max_freq_ratio = max_freq / (n * (max_freq + min_freq) / 2)

  std_deviation = math.sqrt(variance)
  unique_elements = len(set(vector))
  entropy = -sum((x/sum_elements)*math.log2(x/sum_elements) for x in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - max_freq_ratio + std_deviation + entropy




#score: {'n8_size512.txt': 356}
#island_id: 2
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)
  
  # New feature: the ratio of maximum frequency to total elements
  max_freq_ratio = max_freq / (n * (max_freq + min_freq) / 2)

  # New feature: the sum of absolute differences between consecutive elements
  abs_diff_sum = sum(abs(x - y) for x, y in zip(vector, vector[1:]))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio - max_freq_ratio - abs_diff_sum / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time21:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + (math.log2(trailing_zeros + 1) / math.log2(n)) - (sum_elements/n) - ((math.sqrt(sum_elements) + sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time21:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n - (math.e**-sum_elements)**(0.5) / n - math.fsum([x**2 for x in vector]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time21:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # Add a new feature based on the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add a new feature based on the ratio of non-zero elements to total elements
  return result + zero_ratio * math.log(n) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + (1 - zero_ratio) ** 2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add a new feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # Add a new feature based on the variance of the vector
  result += variance
  
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the ratio of zeros to total elements
  return result + (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # New features based on the sum of squares and product of all elements in the vector
  return result - sum(x**2 for x in vector) / n - math.prod(vector) / n




#score: {'n8_size512.txt': 342}
#island_id: 2
#version_generated: 3
#generate time21:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  
  # New features based on the distribution of elements
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  
  # Feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # Add a new feature based on the entropy of the distribution
  freq_entropy = -sum((p / n) * math.log2(p / n) for p in frequency.values())
  result += freq_entropy
  
  return result




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * trailing_zeros) / min(n, sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + leading_zeros) / (n - leading_zeros)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  # Calculate the priority based on sum of elements, trailing zeros, and frequency
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
 
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - unique_elements / n




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time21:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * trailing_zeros) / (n - trailing_zeros) if n > trailing_zeros else -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_ones = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + 2 * (n - leading_ones)) / (n - leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem)).lstrip('0b'))
  return -(sum_elements + 3 * trailing_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / math.isqrt(n)) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: abs(x) < sum_elements / n, vector)) * 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: abs(x) == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / max(trailing_zeros, 1) * 
       np.exp(-(trailing_zeros - 1) / (n - 1)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum(abs(x) for x in vector), len(vector)) if sum(abs(x) for x in vector) > 0 else len(vector)))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - math.exp(-trailing_zeros) / n




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)[0]/n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + (math.log(trailing_zeros + 1) / math.log(n)) - (sum_elements/n) - ((sum_elements+1)/n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + (trailing_zeros - 1) / (n - 1)) if n > trailing_zeros else -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + min(trailing_zeros, 10)) / (n - min(trailing_zeros, 10))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(lambda x: abs(x), vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    math.prod(1 - x for x in sorted(set(vector)))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(math.exp(-(sum_elements ** (0.5 / len(set(vector))))) + 
    math.exp((n - leading_ones) * (-1 / n))) * sum(map(abs, filter(None, vector)))/sum_elements




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((math.sqrt(sum(vector))) / len(set(vector)) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, sorted(vector, reverse=True))))/sum(vector))**4




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - trailing_zeros) / n
       + sum((1 if x > 0 else -1) for x in vector) / abs(sum_elements)
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n), n)) * 
       sum(x**2 for x in filter(lambda x: x != 0, map(abs, vector))) / min(sum(map(abs, vector)) ** 2, len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements / n)**0.5 + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
 
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n + min(Counter(vector)['0'], len(vector) - trailing_zeros, key=lambda x: x/len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
 
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem != 0]))/n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
 
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem != 0]))/n - (Counter(vector)['0'] * math.log2(Counter(vector)['0']+1))/math.log2(n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem != 0]))/n - math.fabs(sum_elements) / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (n - len([x for x in reversed(vector) if x != 0])) / n + math.log2(sum(1 for x in vector if x == 0) + 1) / math.log2(n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - (sum(1 for elem in vector if elem == 0) / len(vector)) * math.sqrt(len([elem for elem in vector if elem != 0]))/n




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -sum_elements * (n - len(vector) + trailing_zeros) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n + (n * math.e**(-sum_elements))




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - (sum(1 for x in vector if not x) * math.log2(len(set(vector)) + 1)) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + (math.log2(trailing_zeros + 1) / math.log2(n)) - sum_elements/n - math.sqrt(sum_elements) / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n - (Counter(vector).get(0, 0) if any(vector) else 0)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/(n*math.sqrt(sum_elements+1))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
 
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.sqrt(sum_elements) / n - math.exp(-sum_elements) / n - math.fabs(math.sin(sum_elements)) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector)
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector)
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**11/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**12/(n*n*n*n*n*n*n*n*n) for x in vector)
  return resul




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)


  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**11/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**12/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector))) / max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(c[0] for c in Counter(filter(None, vector)).most_common()) / max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - sum(vector) / (n * math.log2(len(vector)+1))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem == 1]))/n




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time21:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  # New feature: the ratio of the number of unique elements to the total number of elements
  result += math.log(len(set(vector)) / len(vector))

  return result




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       math.prod(sorted(vector)[::-1]) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0) / n + 
      sum(sorted(vector)[::-1]) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      np.sum(np.abs(np.sort(np.array(vector)))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem != 0]))/n - math.fabs(sum_elements) / n + (n * math.e**(-sum_elements)) - math.fabs(math.sin(sum_elements)/n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n + (n * math.e**(-sum_elements)) - ((len([elem for elem in vector if elem != 0]))/(n*math.sqrt(len(vector)))) - math.fabs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  return -(sum_elements * (n - trailing_zeros)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  leading_ones = len(vector) - trailing_zeros
  
  return -(sum_elements * (n - leading_ones)) + math.log2(trailing_zeros + 1) / math.log2(n) - sum_elements/n - math.log2(sum_elements+1)/math.log2(n) - math.exp(-sum_elements) / n - Counter(vector)['0'] / n - math.sqrt(len([elem for elem in vector if elem != 0]))/n - math.fabs(sum_elements) / n + (n * math.e**(-sum_elements))




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**11/(n*n*n*n*n*n*n*n) for x in vector)) * zero_ratio - (math.e**-zero_ratio)**2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + abs(sum(x**11/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) - math.exp(-sum_elements/(n*(max_freq+min_freq))) - math.sqrt(n*unique_elements) - std_deviation




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n

  result += min((x**20/n) for x in vector)
  result -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  result -= abs(sum(x**30/(n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  return result




#score: {'n8_size512.txt': 360}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))
  
  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  
  # Add new features
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  return result + unique_product**(1/len(vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  return result + sum(1 for x in vector if x) / n - max_freq/min_freq - sum(x**8/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(10**i for i in range(len(vector)) if (vector[i] == 0)))[:-1])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / (n * max(map(abs, vector))) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + trailing_zeros * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1)))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 327}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  unique_elements = len(set(vector))
  median_absolute_deviation = np.median(np.abs(vector - np.median(vector)))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n - median_absolute_deviation




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))

  weighted_variance = variance * (1 + math.sqrt(zero_ratio))
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  median_absolute_deviation = np.median(np.abs(vector - np.median(vector)))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + weighted_variance + abs(skewness) + median_absolute_deviation




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements in the vector
  unique_elements = len(set(vector))

  # New feature: the sum of squares of differences between each element and the median
  median = np.median(vector)
  median_deviation = sum((x - median)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n - median_deviation




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(x**2 for x in vector) / (n * sum_elements) + 
       2 * sum(min(x, 1) for x in vector) / (n * sum_elements))




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
      np.exp(-sum(1 for elem in vector if elem == 1) / n) * (n - sum(1 for elem in vector if elem == 1)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements * (trailing_zeros / math.factorial(trailing_zeros) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in reversed(vector) if elem == 0))[2:]) - (sum(1 for elem in vector if elem != 0) if any(vector) else 0)
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements * (n / (max(map(abs, vector)) + 1e-9 or float('inf')))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements / len(vector) - 0.5) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log2(len(vector)) * abs(sum_elements / len(vector) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(1, len(vector) // 2)) + (trailing_zeros / n) ** 3 - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(1 - abs(sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.floor(math.log10(n))) / n) ** 2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  result += (sum(1 for x in vector if x) * max_freq)**2
  
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time22:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    - 0.1 * (sum(map(lambda x: x**2, vector)) / sum_elements)
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time22:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  if max(vector) == 0:
    zero_count = len([i for i in range(len(vector)) if vector[i] == 0])
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_count) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - variance
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 218}
#island_id: 2
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_count = len([i for i in range(len(vector)) if vector[i] == 0])
  max_element = max(vector)
  
  if max_element > 0:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max_element - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_count) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - frequency[max(frequency)]/min(frequency)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max_element - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_count) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # New feature: sum of squares of absolute differences
  sq_diff_sum = sum((abs(x - sum_elements/n))**2 for x in vector)
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + sq_diff_sum / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_count = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_count) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
      sum(((n - i) / n)**2 * (x**3) / (sum_elements**2) 
        for i, x in enumerate(filter(None, vector), 1)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max(((n - i) / n)**2 * sum(x**3 for x in filter(None, vector)) for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
       )**2 + sum(map(abs, vector)) ** 0.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, vector)) / min(sum(map(abs, vector)), sum_elements)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(vector)) 
  )




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  unique_elements = len(set(vector))
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  # Calculate the priority based on the new features
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + (n - unique_elements)**2 / (4*n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros / len(str(n)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros / math.ceil(math.log10(max(len(str(i)) for i in set(vector)) + 1)))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + math.log2(n)) - (trailing_zeros / len(str(n)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros / max(len(str(i)) for i in set(vector))) * math.log(n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (max(map(abs, vector)) + 1e-6) - (trailing_zeros * math.log10(n) / len(set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 3) > 0) * ((trailing_zeros + min(len(vector), trailing_zeros + 1)) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((len(vector) - trailing_zeros) / n))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  product_unique_elements = math.prod(set(vector))

  weighted_variance = sum((x - sum_elements/n)**4 for x in vector) / n**2
  skewness = (sum(x*(x-1)*(x+1) for x in vector) / len(vector)) / n

  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + abs(sum_elements - n/2) * skewness




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  leading_zeros = len(str(sum_elements).lstrip('0'))
  product_unique_elements = math.prod(set(vector))

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum((x - sum_elements/n)**3 for x in vector) / n**2

  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-product_unique_elements) * leading_zeros / n - min_freq/min_freq




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  product_unique_elements = math.prod(set(vector))
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  weighted_variance = sum((x - sum_elements/n)**2 * (1 - abs(x-min(vector))/n) for x in vector) / n
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  product_unique_elements = math.prod(set(vector))
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # New features
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) - sum_elements ** 3 / (n * math.sqrt(n))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros / len(set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / max(abs(i) for i in vector) - (trailing_zeros * math.log10(n) / len(str(max(vector))) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = str(sum(1 for i in reversed(vector) if i == 0)).count('0')
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros / len(str(n)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % (n//2+1) == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n + 
      (n - len(set(vector))) ** 2 / (4 * n))




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n + 
      len([x for x in vector if x > 0]) / len(set(vector)))




#score: {'n8_size512.txt': 329}
#island_id: 2
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum((x - sum_elements/n)**3 for x in vector) / n
  product_unique_elements = math.prod(set(vector))

  # New feature: the ratio of zeros to total elements
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # New feature: the number of unique elements in the vector
  unique_elements = len(set(vector))

  return -(variance + weighted_variance) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(x**2 for x in filter(None, vector)) / sum(vector) + 
      sum(sorted(vector)[::-1]) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: -x if x < 0 else 0, vector)) / sum(abs(x) for x in vector) + 
       max((n - i) / n for i in range(len(vector)))
       )**3




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) * min(len(vector), n) / n + 
       max(sorted(map(abs, vector))[-min(n, len(vector)):]) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector))) / sum(vector) + 
       sum(sorted(vector)[::-1])) / (sum(vector)**0.5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) - sum(x**3 for x in filter(lambda x: abs(x)>0, vector))




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
      sum(x**2 for x in set(vector))/len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) + abs(sum_elements - len(vector) / 2) ** 1.5




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - ((trailing_zeros / n)**2) + (math.exp(-abs(sum_elements - len(vector) / 2))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (1 + math.sin(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(bin(int(''.join(map(str,vector)))))) / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.log(len(vector))) + max(sum_elements, math.log(n))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.log((n + 1) / (sum_elements * math.factorial(n))) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * math.sin(trailing_zeros)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) - (sum_elements ** 2 + trailing_zeros ** 2) / (n * math.pi)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2)) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) - sum_elements**2/((len(vector)/2)**2)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) + sum(1/(i+1) for i in range(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(x for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(x**2 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       sum(x**4 for x in filter(lambda x: x == 0, vector)) / (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') if len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', '')) < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (1 / math.log(len(set(vector)) + 1)) + 
    min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0))[2:].lstrip('0').replace('0', ''))
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_zeros if leading_zeros < n else 1))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      len([x for x in Counter(vector).values() if x == 1]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - sum(1 for elem in vector if not elem)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 * (n - sum(1 for elem in vector if elem == 1)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n - 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] < 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.pow(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))), 0.5 / len(set(vector))) + 
      math.log10(n) * sum_elements / min(sum_elements, max(map(abs, vector)))
     - sum([i for i in vector if i == 0]) / n
  )




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-math.log(n) * (n - min(leading_ones, sum_elements)) / n) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum(abs(x) ** 2 for x in vector), sum_elements**2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  if sum_elements == 0:
    return 0
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(i) for i in vector) / (max(abs(i) for i in vector) + 1e-6) - len(str(sum(1 for i in reversed(vector) if i == 0))) * math.log10(n) / max(len(str(i)) for i in set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf')) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - math.log10(n) * min(len(str(i)) for i in set(vector)) if any(vector) else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector))) - sum(map(math.isclose, vector, [i*n for i in range(1,11)]))/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  return priority + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return priority + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a penalty term based on the frequency of each element
  penalty = sum(frequency[x] / n for x in set(vector))

  return priority + penalty




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) + math.sqrt((sum_elements ** 2) / (n * len(vector))) * (1 + math.cos(math.pi * sum_elements / (n * len(vector)))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements - len(vector) / 2)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) + sum(1/(i+1) for i in range(trailing_zeros)) - sum(1/(len(vector)-i-1) for i in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  return result + (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # New features based on the sum of squares and product of all elements in the vector
  return result - sum(x**2 for x in vector) / n - math.prod(vector) / n + (sum(x**3 for x in vector)) / n + (math.prod(sorted(vector))) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # New features based on the sum of squares and product of all elements in the vector
  return result - sum(x**2 for x in vector) / n - math.prod(vector) / n + (max_freq/min_freq)**(1/(len(vector)-1)) - min_freq**(1/(len(vector)-1))




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  # New feature: the product of unique elements
  unique_product = math.prod(set(vector))
  
  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  result -= sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  result += (unique_product**(1/len(vector))) / n + variance / n
  
  # Add a new feature based on the ratio of zeros to total elements
  result += (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  
  # New features based on the sum of squares and product of all elements in the vector
  result -= sum(x**2 for x in vector) / n - math.prod(vector) / n
  
  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  return result + (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - math.exp(-(n/4)**0.5)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 317}
#island_id: 1
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / max(len(str(i)) for i in set(vector)) * math.log10(n) - trailing_zeros * math.log10(n)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf')) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n)
  - sum((i**2) for i in vector) / (n * max(abs(i) for i in vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  entropy = -sum((vector.count(i)/n)*math.log2(vector.count(i)/n) for i in set(vector))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / max(len(str(i)) for i in set(vector)) if any(vector) else float('inf')) - entropy




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       np.log10(trailing_zeros + 1) / np.log10(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_elements).rstrip('0').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_elements).rstrip('0').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       min(trailing_zeros, len(str(sum_elements))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in str(sum(vector)).lstrip('0') if elem == '0') / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n) - sum(1/(i+1) for i in range(trailing_zeros)) + sum(1/(len(vector)-i-1) for i in range(len(vector)-trailing_zeros)) - math.log(n) * (abs(sum_elements - len(vector) // 2) + trailing_zeros)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 2) / (n * (len(vector))) - math.exp(-abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time22:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/(sum(map(abs, filter(None, vector)))+1e-9))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**5/(n*n*n) for x in vector)
  
  # Add a new feature based on the number of unique elements
  return result + math.exp(-n/len(set(vector))) * len(set(vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  # Calculate the priority using a more robust algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n) for x in vector)
  
  # Add a new feature based on the number of unique elements
  return result + math.exp(-n/len(set(vector))) * len(set(vector))

  # Add a new feature based on the correlation between adjacent elements
  return result + sum((x - (y - 0.5))/n for x, y in zip(sorted(vector), sorted(vector)[1:]))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # More advanced algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  # More features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation

  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n) for x in vector)

  return result + math.exp(-std_deviation/n) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)

  return result + math.exp(-min((x-n/2)**2 for x in vector)/n) - abs(sum(x**12/(n*n*n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**13/(n*n*n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # New features
  skewness = (sum(x**3 for x in vector) - 3*sum_elements**2) / n
  kurtosis = (sum((x - sum_elements/n)**4 for x in vector) / n) - 3

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation + skewness + kurtosis




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(abs(x-y) for x,y in zip(sorted(vector), sorted([x//n for x in vector]))) / min(sum(vector), sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(abs(x-y) for x,y in zip(sorted(vector), sorted([x//n for x in vector]))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if all(x <= i/n for x in vector)) * 
       sum(abs(x-y) for x,y in zip(sorted(vector), sorted([x//n for x in vector]))) / min(sum(vector), sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Apply a more robust loss function
  result = math.exp(-result)
  
  return -(math.log(result))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Apply a more robust loss function
  result = math.exp(-result)

  return -(math.log(result))

  # Add some new features to improve the priority
  result += sum(x**3/(n*n) for x in vector)
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  result -= sum(1 for x in set(vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result = math.exp(-result)
  
  # Add more features to improve the priority
  result += (math.log10(n)) ** 0.5 * math.fabs(sum_elements) / n + math.fabs(min(vector))
  return -(math.log(result))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1).bit_length()) / n * 
       sum(x for x in vector) / min(sum(map(abs, vector)), sum(x for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(math.sqrt, vector)) / len(set(vector)) + 
     (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
     sum(abs(x) for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in set(vector)) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)**0.5 / len(set(vector))) + 
       (n - sum(1 for x in vector if x == 0).bit_length()) / n * 
       sum(abs(x) for x in filter(None, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in set(vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n

  # Apply a more robust loss function
  result = math.exp(-result)

  return -(math.log(result))

  # Add some new features to improve the priority
  result += math.sqrt(variance)
  if leading_zeros > 0:
    result -= leading_zeros/n
  if max_freq/min_freq > 1:
    result -= (max_freq/min_freq - 1) / n

  return result




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Apply a more robust loss function
  result = math.exp(-result)

  return -(math.log(result))

  # Add some new features to improve the priority
  result += sum(x**3/(n*n) for x in vector)
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  result -= sum(1 for x in set(vector))
  result += sum(x**(vector.count(x)/n) for x in Counter(vector).keys())




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Apply a more robust loss function
  result = math.exp(-result)

  # Add some new features to improve the priority
  result += sum(x**3/(n*n) for x in vector)
  result += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  result -= sum(1 for x in set(vector))

  # Introduce a new feature based on the frequency of elements
  freq_sum = sum(x**2/(n*n) for x in frequency.values())
  result += -freq_sum

  return -(math.log(result))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(i) for i in vector) / max(abs(i) for i in vector) - (len(str(sum(1 for i in reversed(vector) if i == 0))) * math.log10(n) / len(set(vector)))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n) - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  
  median_abs_val = np.median(np.abs(np.array(vector)))
  return -sum_elements / (median_abs_val + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - math.exp(-sum_elements / n)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / max(abs(i) for i in vector) * math.log10(n) - (trailing_zeros + Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1]) * math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - Counter({i: vector.count(i) for i in set(vector)}).most_common(1)[0][1] * math.log10(n) - sum_elements ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - math.log10(n) * (trailing_zeros + sum_elements / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements / (max(abs(i) for i in vector) + 1e-6) - (trailing_zeros * math.log10(n) / sum(len(str(i)) for i in set(vector))) - math.exp(-sum_elements)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if 0 in vector))))
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if 0))))
  - math.exp(-n/(max(vector) + (n - max(vector))))
  - math.exp(-n/(min(vector) + (n - min(vector))))
  - math.exp(-n/(len(set(vector)) + (n - len(set(vector)))))
  - math.sqrt(max(vector) - min(vector)) * n
  - sum(x**2/(n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  # New feature: Calculate the ratio of unique elements to total elements
  unique_ratio = len(set(vector)) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - unique_ratio




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - len(vector) / 2))) * (trailing_zeros / n) + sum(1/(i+1) for i in range(trailing_zeros)) - sum(1/(len(vector)-i-1) for i in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements < len(vector) / 2:
    return -sum_elements * (2 + math.sin(trailing_zeros))
  else:
    return sum_elements * (1 - math.cos(trailing_zeros)) - trailing_zeros / n




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - len(str(sum(vector)).lstrip('0'))/n - max(Counter(vector).values())/(min(Counter(vector).values())) - (max(Counter(vector).values())/min(Counter(vector).values()))**2 + math.exp(-n/(sum(vector) + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  mean = sum_elements / n
  median = sorted(vector)[len(vector)//2] if len(vector) % 2 == 1 else (sorted(vector)[len(vector)//2-1] + sorted(vector)[len(vector)//2]) / 2
  
  mode = max(frequency, key=frequency.get)
  
  return -(mean + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(mean - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-abs(mean - median) / (max(vector) - min(vector))) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == mode]) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  unique_elements = len(set(vector))
  
  manhattan_distance = sum(abs(x - sum_elements/n) for x in vector)
  
  zero_frequency = frequency[0]
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + manhattan_distance / n + unique_elements / n + zero_frequency / n - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return (1 + math.sqrt(n)) * (sum_elements / n + leading_zeros/n + max_freq/min_freq) - abs(sum(x**2/(n*n) for x in vector)) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of the vector elements
  avg_element = sum_elements / len(vector) if len(vector) > 0 else float('inf')

  # Adjust the priority based on the average of the vector elements
  return -sum_elements * (2 - math.fabs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg_element > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements**2/trailing_zeros if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((sum_elements - len(vector) / 2) ** 2) / (len(vector) * 0.1))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (len(vector) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector))




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (sum_elements / len(vector) - 0.5) ** 2) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp((sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len(vector) // 2 - sum_elements) ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
 )**(1/(1+len({})))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(min(abs(x) for x in set(vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n) for x in vector)

  # Add a new feature based on the number of distinct elements
  return result + math.exp(-n/len(set(vector))) * len(set(vector))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature based on the frequency of elements
  return result + math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**5/(n*n*n) for x in vector)

  # Add a new feature based on the distribution of elements
  return result + math.exp(-n/sum(1 for i in range(len(vector)) if abs((x - sum_elements/n))/variance <= (3*weighted_variance)**0.5)) * sum(1 for i in range(len(vector)) if abs((x - sum_elements/n))/variance <= (3*weighted_variance)**0.5) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector))




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Add a new feature based on the frequency of elements
  result += math.exp(-n/sum(frequency.values())) * sum(frequency.values())

  return result




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n

  # Add features based on the frequency and distribution of elements
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  result += math.exp(-n/sum(frequency.values())) * sum(frequency.values()) - abs(sum((x - sum_elements/n)**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  # Add a feature based on the distribution of trailing zeros
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * abs(sum_elements - n/2) * len([i for i in range(len(vector)) if vector[i] == 0]) / n

  return result + max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * math.exp(-((trailing_zeros / n) ** 2))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector)) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + math.exp(-len(vector)) - (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -math.exp(-len(vector))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n) > 0.5) * math.exp(-len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - sum(Counter(vector).values()) / len(vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-variance/n) * (math.log2(n) - min((x**10/(n*n*n*n*n*n*n*n)) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  std_deviation = math.sqrt(variance)

  return -(math.exp(-variance/n) + math.sin(sum_elements/n)) - abs(sum(x**10/(n*n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**11/(n*n*n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)
  std_deviation = math.sqrt(variance)
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  unique_elements = len(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + unique_elements / n + std_deviation - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + math.exp(-variance/n) - abs(sum(x**8/(n*n*n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**9/(n*n*n*n*n*n*n*n) for x in vector)
  + entropy(frequency.values(), base=2)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((len(vector)-trailing_zeros)/n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((math.log10(trailing_zeros + 1) - math.log10(n)) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time23:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time23:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector) + 1, 10)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time23:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time23:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)

  return result + entropy




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)
  
  return result + (1 + math.exp(-10*entropy)) - (1 + math.exp(-10*(variance/sum_elements))) 




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min((n - sum(1 if elem else 0 for elem in vector)) / n, 
         min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') or 0), 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     )




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (trailing_zeros ** 2) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum(Counter(vector).values()) / len(vector) + min(sum_elements, len(vector) - sum_elements)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - sum(Counter(vector).values()) / len(vector) + math.cos(sum_elements / len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) * math.log(len(vector))) - (bin(int(''.join(map(str,vector)))).count('0') / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) ** 3) - math.exp(-len(vector))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) * sum_elements + (math.cos(len(vector)) * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + math.exp(-len(vector)) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) * sum_elements - np.sum([i**2 for i in vector])




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector)) * sum_elements) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, len(vector) // 2)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-len(vector)) * (abs(sum_elements / len(vector) - 0.5) + abs(trailing_zeros / n - 0.5))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt((sum_elements**2 + trailing_zeros**2) / len(vector)) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) + max(0, 1 - (2 * (len(vector) - trailing_zeros) / len(vector)))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - min((len(vector) - trailing_zeros) / n, sum_elements)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
 
  # New feature: Calculate the ratio of unique elements to total elements
  unique_ratio = len(set(vector)) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
 
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - unique_ratio
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - math.sqrt(n) * sum((x - (sum_elements)/n)**2 for x in vector) / n
  - (math.sqrt(sum(x**3/(n*n) for x in vector)) + math.sqrt(sum(frequency.values()))) / (2*math.sqrt(n))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  # New feature: Calculate the ratio of unique elements to total elements
  unique_ratio = len(set(vector)) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - unique_ratio
  - len([i for i in range(len(vector)) if vector[i] == max(vector)]) / len(vector)
  - math.log(n/(sum_elements + (n - sum(1 for x in vector if x))))
  - abs(sum(x**4/(n*n) for x in vector))
  - sum(frequency.values()) * variance
  - leading_zeros/n * n/len(set(vector))
  - math.exp(-n/sum_elements) * sum_elements
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == min(vector)])) / len(vector)
  - abs(sum(x**2/(n*n) for x in vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - sum(x for x in set(vector)) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  # New feature: Calculate the ratio of unique elements to total elements
  unique_ratio = len(set(vector)) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - unique_ratio
  - 0.5*abs(sum_elements-sum(1 for x in vector if x))**2/(n**2)
  - (max_freq-min_freq)**2/((n-1)*min(n, max_freq))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  skewness = sum((x - (3*sum_elements)/n - (2*(x**3)/(9*n))) for x in vector) / n
  
  unique_ratio = len(set(vector)) / n

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum_elements - n/2) * math.sqrt(n)
  - skewness * variance * n
  
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  - math.exp(-n/len(set(vector))) * len(set(vector))
  - (math.sqrt(max_freq) + math.sqrt(min_freq)) / (2*math.sqrt(n))
  - abs(sum_elements - n/2) * sum(x**3/(n*n) for x in vector)
  - variance * sum(frequency.values())
  - unique_ratio
  - (sum(1 for _ in range(n)) - sum(1 for x in set(vector))) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] not in set(vector)]))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # New features based on the sum of squares and product of all elements in the vector
  return result + -(sum(x**2 for x in vector) / n - math.prod(vector) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  product = math.prod(vector)
  sum_of_squares = sum(x**2 for x in vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - product/n * zero_ratio
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - sum(x**7/(n*n*n*n*n*n) for x in vector)
  + (len([i for i in range(len(vector)) if vector[i] == 0]))/n * math.log(n)
  - sum_of_squares/n - product/n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)
  
  # New features based on the sum of squares and product of all elements in the vector
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  - abs(sum(x**7/(n*n*n*n*n*n) for x in vector)) * math.log(n)
  + 0.5*abs((sum_elements - n/2)/n)*math.log(n)
  - 3*(zero_ratio**2)*(std_deviation**2)/(variance+1e-10)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * Counter(vector)['0']




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.exp(-abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.log(len(vector))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * min((bin(int(''.join(map(str,vector))))[2:].count('0') / n), math.sqrt(sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(sum_elements) - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(1 - sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector))
  - reduce(lambda x, y: x + abs(x-y), vector, sum_elements)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result)) + min([abs(x-y) for x,y in zip(sorted(vector), sorted(vector)[::-1])]) * n / len(vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority using a more advanced algorithm
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result += math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  # Apply a more robust loss function
  result = (1 + math.exp(-result))

  return -(math.log(result)) + min([abs(x-y) for x,y in zip(sorted(vector), sorted(vector)[::-1])]) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements + abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements - math.sqrt(abs(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements + (n * sum_elements ** 2) / (n * sum_elements + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements + math.sqrt(len(vector)) * sum_elements




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_abs = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_abs ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x > 0) / min(sum_abs, sum(map(abs, vector)) or n)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements * (n - min(trailing_zeros, n)) / min(n, sum_elements) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(n, len(set(vector)))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / min(n, trailing_zeros) + 
       abs(sum(map(lambda x: x**2, filter(lambda x: x != 0, vector))) - (sum_elements ** 2) / n) / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # Use a more advanced algorithm to calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  
  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add more features to improve the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Add the features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  
  # Use a more advanced algorithm to calculate the priority
  return np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  # Calculate the priority using a more advanced algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  # Use a more advanced algorithm to calculate the priority
  result = np.mean([x + y - z for x, y, z in zip(vector, [sum_elements]*len(vector), [leading_zeros]*len(vector))])

  return result - 0.5 * (math.log(n) / math.log(sum_elements)) * sum(x**11/(n*n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + math.sqrt(sum_elements) * math.erf(trailing_zeros / math.sqrt(len(vector))) + math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector)) + skewness




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt((trailing_zeros / n)**2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))) - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (len(vector) - len(str(sum(1 for x in vector if not x))) ) / n - math.exp(-len(vector)) * Counter(vector)['0']




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / len(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -mean * (1 - abs(2 * mean / max(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-len(vector)) * sum(x**2 for x in vector)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(sum_elements / len(vector) + math.pi/4) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * Counter(vector)['0'] - math.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.log(len(vector)) + min(sum_elements, n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * math.log(n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.log(len(vector)) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.log(len(vector)) + Counter(vector)['0'] / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x**3 for x in filter(None, vector)) / 
      sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector))/len(set(vector))) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements * math.exp(-leading_ones/n) + 
       (trailing_zeros / n) + 
       ((n - sum(abs(x) for x in filter(lambda x: x != 0, vector))) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.7 + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**2 for x in vector)**(0.5/len(set(vector)))) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(sum(map(abs, vector)), bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min((sum(map(abs, vector)))**2, sum(map(lambda x: abs(x)**2, vector))))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if not vector[i])) * sum(map(abs, vector)) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x)**2, vector)))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(sum((x - sum_elements/n)**2 for x in vector) / n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**20/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + (math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - math.exp(-(n/4)**0.5)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(sum((x - sum_elements/n)**2 for x in vector) / n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**20/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 - std_deviation / (n ** 1.5)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  std_deviation = math.sqrt(variance)

  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**10/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  return result




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time23:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.log(len(vector) + 1) - Counter(vector)['0'] / math.sqrt(len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time23:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector)) * Counter(vector)['0'] + math.log(len(vector))) * min(sum_elements, n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * Counter(vector)['0'] - math.log(len(vector)) + sum(1 for i in range(n) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector)) * Counter(vector)['0'] + math.log(len(vector))) * (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(len(vector)-1) if abs(vector[i]) > 10 and abs(vector[i+1]) < 10) / len(set(vector)) * 
      sum(x for x in vector) / sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-len(set(vector)) / (n * sum(map(abs, vector))) + 
          sum(1 for x in range(len(vector)-1) if x > 0 and vector[x+1] < 0) / len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 - i / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(sum(x**3 for x in filter(None, vector)), n))




#score: {'n8_size512.txt': 281}
#island_id: 3
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      sum(1 for x in vector if x == 0) / n * 
      min(sum(x**3 for x in vector), sum(map(lambda x: x**3, range(n)))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum(vector) ** 2, sum(map(lambda x: x**3, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * sum_elements + sum([abs(i) for i in vector])




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) * (sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) + math.exp(-len(vector))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * math.e ** (-trailing_zeros / n) + Counter(vector)['0'] / len(vector) if sum_elements > len(vector) // 2 else -sum_elements




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * Counter(vector)['0']




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - math.log(len(vector)) + Counter(vector)['0'] / len(vector) - sum([i**2 for i in vector])**1.5




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-len(vector) / 10)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (math.sqrt(sum_elements) + Counter(vector)['0']) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - Counter(vector)['1'] / len(vector)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([abs(x) for x in vector]) * (2 - abs(2 * sum(abs(x) for x in vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + math.exp(-len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + Counter(vector)['0'] / len(vector)




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)) + 
       math.log10(sum(Counter(vector).values()))/math.log10(n) + 
       max((n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (1 - sum(x for x in filter(None, vector)) / n) + 
      max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)) + 
       math.log10(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / math.log10(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(map(lambda x: abs(x), vector)) + 
       len([x for x in vector if x < 0]) ** 2 / (n * sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(x for x in range(len(vector)) if vector[-1-x] == 0) / n




#score: {'n8_size512.txt': 264}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) * (n - len([x for x in vector if x == 1])) / sum(map(abs, vector))




#score: {'n8_size512.txt': 264}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** 
       (1 / len(set(vector))) + 
       sum(1 for x in vector if x < 0) / sum(map(abs, vector)) + 
       max(0, len([x for x in vector if x > 0]) - 
         bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return -math.exp(-abs(sum_elements / len(vector))) * (2 + abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - skewness




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return -sum_elements * math.sin(sum_elements / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector)) + skewness




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  return (-2 * sum_elements * math.log(len(vector)) + trailing_zeros) / n + skewness




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n
  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  product_unique_elements = math.prod(set(vector))
  unique_ratio = len(set(vector)) / n
  leading_zeros_weight = math.exp(-leading_zeros)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n
  return -(unique_ratio * (1 + sum(1 for x in set(vector)) / len(set(vector)))) + leading_zeros_weight * product_unique_elements - math.sqrt(n) * variance - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  product_unique_elements = math.prod(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return -(variance + weighted_variance) + math.exp(-product_unique_elements) * leading_zeros / n - sum((x-1)*(x>1) for x in frequency.values()) * math.sqrt(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = sum(((x - sum_elements/n)**2) * (n - sum(1 for i in range(len(vector)) if vector[i] == 0)) for x in vector) / n

  product_unique_elements = math.prod(set(vector))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2

  result = -(variance + weighted_variance) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)

  return result + math.exp(-product_unique_elements) * leading_zeros / n - variance * frequency[1]




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time23:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio

  # Add more features to improve the priority
  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)

  return result + (1 + math.exp(-10*entropy)) - (1 + math.exp(-10*(variance/sum_elements))) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
 
  # Add more features to improve the priority
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector)
  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)

  # Add a feature based on the number of unique elements
  result += (len(set(vector)) - 1) / n

  return result + (1 + math.exp(-10*entropy)) - (1 + math.exp(-10*(variance/sum_elements)))




#score: {'n8_size512.txt': 335}
#island_id: 2
#version_generated: 3
#generate time23:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  
  # Calculate the priority
  result = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  
  # Add more features to improve the priority
  entropy = 0
  for freq in frequency.values():
    prob = freq / len(vector)
    if prob != 0:
      entropy -= prob * math.log2(prob)
  
  return result + (1 + math.exp(-10*entropy)) - (1 + math.exp(-10*(variance/sum_elements))) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - sum(x**7/(n*n*n*n*n*n) for x in vector) + math.exp(-variance/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))
  if sum(map(abs, vector)) < 100:
    return -(sum_elements ** (0.5 / len(set(vector)))) - max((n - i) / n for i in range(min(n, leading_ones), n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return result + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return -(variance + zero_ratio * sum(1 for x in frequency.values() if x > max_freq/2)) - math.exp(-product_unique_elements) * leading_zeros / n - sum((x-1)*(x>1) for x in frequency.values()) * math.sqrt(n) - (n - sum(1 for x in vector if x)) ** 0.5




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * (sum_elements ** 2 / len(vector))




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + math.log(trailing_zeros / (n * len(vector))))**2




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(sum_elements - len(vector) // 2))) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 > sum_elements) * math.exp(-math.log(len(vector)) * (trailing_zeros / n))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-np.sum(np.log10(np.array(vector) != 0)) / n))




