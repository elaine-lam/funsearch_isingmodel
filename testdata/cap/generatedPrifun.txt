#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if str(vector).lstrip('0') else 0
  
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements - min(vector)) - trailing_zeros / (n * max(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).lstrip('0b'))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if str(vector).lstrip('0') else 0
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros / (n if n else 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -sum_elements - trailing_zeros / n - sum_elements ** 2 / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x if x != 0 else 0 for x in vector) / len(vector) - sum(1 for _ in reversed(vector) if _ == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) * (n - sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  return -sum(vector) * np.log2((n - len([i for i in vector if i == 0])) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - bin(int(''.join(map(str,vector)))).count('0') / n ** 2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / (len(vector) // 4)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n)


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + sum(1 for i in vector if i == 0) * (n // 2 - sum_elements / len(vector))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / (n * max(abs(x) for x in vector))) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements + (trailing_zeros / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n - sum_elements**2/(4*n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 if i == 0 else 2**31 for i in vector))[2:]) - len(str(sum(1 if i == 0 else 2**31 for i in vector)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements / (n + 1) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros = str(sum([1 if i == 0 else 0 for i in reversed(vector)]))
  return -sum_elements * (n - len(zeros)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements ** 2 / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -(sum_elements ** 2) * (n - trailing_zeros) / (n * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n + 1)) + (trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements + (vector.count(0) / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / (n+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n+1))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) + min(sum_elements > len(vector) // 2, 1) * (-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / (n * (n - 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - min(trailing_zeros, n)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + min(trailing_zeros / n, len(vector) - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -sum_elements + trailing_zeros / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 if i == 0 else 0 for i in vector])))
  return -(sum_elements ** 2) * (n - leading_ones) / (n * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / ((n + 1) * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / (n+1) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (trailing_zeros / (n+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / max(n, 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) * (n-trailing_zeros) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1)) * (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1)) * sum_elements


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - min(trailing_zeros / n, 1) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((abs(sum_elements-len(vector)//2)) > 0.5) * (trailing_zeros / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) > 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_ones = len(str(sum(1 for x in vector if x)).lstrip('0'))
  return -(sum_elements + leading_ones) / (n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1)) * (1 - sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (vector.count(0) if len(vector) > 0 else 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(len([elem for elem in vector if elem == 0])))
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (bin(int(''.join(map(str,vector))) & ((1 << len(vector)) - 1)).count('0') / n) ** 2 + (sum_elements > len(vector) // 2) * (bin(int(''.join(map(str,vector))) & ((1 << len(vector)) - 1)).count('0') / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + np.abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements - (n - trailing_zeros) / n if sum_elements != 0 else 1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n+2) - min((trailing_zeros + len(vector)) / (n+2), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x else 0 for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements + (trailing_zeros / (n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 if i == 0 else 0 for i in reversed(vector)))) - 1
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros + 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -sum_elements / max(1, n) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n) * np.exp(-abs(sum_elements - len(vector) // 2))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) or (trailing_zeros == 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements - min(vector)) * (trailing_zeros / n + 1) ** (-max(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector)
  return -(sum_elements - min(vector)) - len([i for i in reversed(vector) if i == 0]) / (n * max_element)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements * max(vector)) - trailing_zeros / (n * min(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in str(sum(1 for i in vector if i == 0)) if i == '0'])
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n - sum_elements * trailing_zeros / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))
  return -(sum_elements + leading_zeros) / (n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * (n - 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (n - 1)) + trailing_zeros / n


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * len(vector) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(len([elem for elem in vector if elem == 0])).count('0')
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum([0] * (len(vector) - sum_elements))))
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1) - np.sum([1.0/(i+1) for i in range(trailing_zeros)])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1) - sum(1 for elem in vector if elem > 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 * (n - 1) + trailing_zeros / (n * (n - 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * (n - 1) + trailing_zeros) / ((n ** 2) - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / (n - min(trailing_zeros, n))) if sum_elements else sum_elements) / (n * (n - 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / max(1, n) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / max(1, n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, sum_elements / (n * (max(vector) + 1)))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) - min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n + sum_elements / (n * max(vector))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, (n - len(set(vector))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements / max(1, n) - min(trailing_zeros / n, sum_elements / (n * (max(vector) + 1))) 
  # Add a logarithmic term to the result
  -math.log2(sum_elements + 1) + math.log2(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, (n * max(vector)) / (max(vector) + sum(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - (n - trailing_zeros) / n if sum_elements != 0 else 1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([int(i == 0) for i in vector]))[::-1].count('0')
  return -sum_elements - (n - trailing_zeros) / n if sum_elements != 0 else 1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements - (n - trailing_zeros + min(sum_elements, 1)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(len([elem for elem in vector if elem == 0])))
  return -sum_elements + (trailing_zeros / n) ** 2 - ((sum_elements / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector if x != '0'])))-len(str(sum([int(x) for x in vector])))

  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements + (trailing_zeros / n) ** 2) + np.log10(trailing_zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements * (n / (n + trailing_zeros))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -sum_elements / max(1, n) + (trailing_zeros / (n ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements > 0 else 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0)).replace("0b", ""))
  return -(sum_elements + (trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if not bool(elem))))
  return -sum_elements + leading_ones / (n - leading_ones)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) / (n + 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min(max(sum_elements / len(vector), 0.5) * (n - trailing_zeros) / n, 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Adjusting for imbalanced vector sums
  adjustment_factor = 1 - abs(2 * sum_elements / len(vector) - 1)
  
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + adjustment_factor


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n**0.5)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** 0.5 + trailing_zeros / max(1, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros * (n**-1)) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) ** 2 if sum_elements != 0 else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else -trailing_zeros / n


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / (n * len([x for x in vector if not x]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  return -(sum_elements + len([i for i in vector if i == 0])) / (n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n + 1) - (trailing_zeros / n) + sum_elements * trailing_zeros / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + len([i for i in vector if i == 0])) / (n+1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + min((len(set(vector)) < len(vector) // 3), 1) * sum_elements


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + min((sum(vector) > len(vector) // 2), 1) * (bin(int(''.join(map(str,vector)))).count('0') / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) - sum(1 for x in set(vector)) / (n**0.5)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  distinct_sum = len(set(vector))
  return -sum_elements * (n - trailing_zeros) + min((sum_elements > n // 2), 1) * (trailing_zeros / n) + min((distinct_sum < n // 3), 1) * sum_elements


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) ** 2 + min((abs(sum_elements - len(vector) // 2)), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), abs(sum_elements - len(vector) // 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n ** 2 - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * (n - trailing_zeros) + 1) / ((n ** 2) - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (n - 1)) + (n - trailing_zeros) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * n + len([i for i in vector if i == 0])) / (n ** 2 - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(abs, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / (n * (1 + abs(sum_elements - n/2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n - sum(1 for i in vector if i == 0)) + len([i for i in vector if i == 0])) / ((n ** 2) - 1)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -((sum_elements ** 0.5 + trailing_zeros) / max(1, n)) * min(len(set(vector)), n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (sum(vector)/n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0')) - 1
  return -(sum_elements ** 2) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = len(str(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = len(bin(sum(1 for i in vector))[2:]) - len(bin(sum(1 for i in vector))[2:].rstrip('0'))
  return -(sum_elements + leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(len(str(i)) for i in vector) + 1e-6) - trailing_zeros / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements % 4) >= 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - ((n - trailing_zeros) / (2 * n)) ** 2 if sum_elements != 0 else 1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - (n - trailing_zeros) / n if sum_elements != 0 else min(sum_elements, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (n - leading_ones) / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - leading_ones) / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n * (trailing_zeros := len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(len([elem for elem in vector if elem == 0])).count('0')
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - (len(vector) - trailing_zeros) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 3 - abs(sum_elements - n/2) * (trailing_zeros / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / len(vector) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if elem != 0)**3


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + np.log(trailing_zeros) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 220}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(1, n) + (trailing_zeros / n if trailing_zeros else float('-inf'))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(1, len(vector)) - trailing_zeros / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / (trailing_zeros + 1)) + 1) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + (trailing_zeros / (n - trailing_zeros)) * np.log(n)) / max(1, n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) - abs(sum_elements - n/2) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for _ in range(n) if _ not in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in sorted(vector)[::-1] if elem != 0)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros, n)) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem != 0))[2:]))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[-len(str(n)):-1].count('0') / n) ** 2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) - n/2)**2 + len([elem for elem in vector if elem == 0]) / (n * 2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + min((n/2 - sum_elements) / n, 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n**2 - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) - n/2) ** 2 / (n * 2) + len([elem for elem in vector if elem == 0]) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * ((trailing_zeros / n)**0.5)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (trailing_zeros / len(vector)) * np.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + max(trailing_zeros / (n - trailing_zeros), 1e-6)) / max(1, n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0 and elem > n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) / n) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) - abs(sum_elements - n/2) * (trailing_zeros / n) + np.exp(-trailing_zeros/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + bin(sum(1 for x in vector if x == 0))[2:].count('0')) / max(1, n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (trailing_zeros / max(1, n)) + min(trailing_zeros, n)) / max(1, n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_count = len([elem for elem in vector if elem != 0])
  
  return -(non_zero_count / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_count - n/2) * (zero_count / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if 0 < elem < n/(n*2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (n / sum_elements) + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + min(-sum_elements, -(n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + (len([elem for elem in vector if not elem]) / n) ** 2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem != 0))[2:]))

  return -(sum_elements ** (trailing_zeros / max(len(str(vector)), 1)) + sum_elements) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n**2 - abs(sum_elements - n/2) * (trailing_zeros / n)**(1/3)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) ** 2) / (n * 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros ** 2) / (n * 4)) - abs(sum_elements - n/2) * ((3*trailing_zeros) / (8*n))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / (n * 1.5)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum([i for i in range(1, n+1) if i not in vector])

  return -(non_zero_sum / (n * (n+1)/2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum([elem for elem in vector if elem != 0])

  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros / n) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + sum(1 for x in vector if x == 0)) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros / (n - 1), 1)) / max(1, n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) or 1) / n)**2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * ((len([elem for elem in vector if elem == 0]) or 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / (n * 3) - abs(sum_elements - n/2) * trailing_zeros / (n * 4) + sum(1 for elem in vector if elem != 0) / (n * 5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 + 0.001 * trailing_zeros) / max(min(n, len(vector)), 1))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / min(n, len(vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) or 1) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * ((len([elem for elem in vector if elem == 0]) or 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - len([i for j, i in enumerate(vector) if i == 0]) * (n-trailing_zeros)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if elem == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n - min(sum(1 for elem in itertools.groupby(vector)), len([elem for elem in vector if elem == 0])) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * 0.5


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0 and elem > n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) / n) * (trailing_zeros / n) + sum(1 for elem in vector if elem > n/2) - sum(1 for elem in vector if elem < 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0 and elem > n/2) - sum(1 for elem in vector if elem < n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1) * min(sum_elements, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** 0.5 + (n - leading_zeros)) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / n - min(sum_elements, trailing_zeros) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n)) - abs(sum_elements - n/2) * (sum_elements > n/2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n-1, 1, -1) if (i+1)//2 < sum_elements < (i+3)//2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 3)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+4)//2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0) / (n * 1.5)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0) / (n * 3)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) + min(1, (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in range(n) if (i+1)//2 < sum(vector) < (i+3)//2) + len([elem for elem in vector if elem == 0]) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - sum(1 for elem in vector if elem != 0 and sum_elements > n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[3:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + (n - leading_ones - trailing_zeros)) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (len(vector) / (n + 1)) + trailing_zeros) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** 0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector), (sum_elements + len(str(trailing_zeros))) / 10))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + len(str(trailing_zeros))) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + (trailing_zeros / len(vector)) ** 0.5) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (leading_ones + 0.5) + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector) - n/2) * (len([elem for elem in vector if elem == 0]) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 3) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector) / (n * 2)) + ((vector.count(0) / n) ** 2 - abs(sum(1 for x in vector) - n/2) * (vector.count(0) / n))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * 2)) + ((vector.count(0) / n) ** 2 - abs(sum(x for x in vector) - n/2) * (vector.count(0) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / max(1, n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros + 1, n)) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (trailing_zeros / len(vector)) * np.log(len(vector)) - abs(sum_elements - n**2/(4*n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros * np.log(len(vector))) / max(1, len(vector))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) - n/2)**2 + (len([i for i in vector if i == 0]) / n)**2 - abs(sum(1 for i in vector if i) - n/2) * (len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n) * np.exp(-((abs(sum_elements - n/2) * (trailing_zeros / n)) + ((sum(1 for elem in vector if elem != 0) / n))) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.array(vector) != 0)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum_elements / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if not elem])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros, n)) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + min(len(str(sum(1 for x in vector if x == 0))), n)) / max(1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + min(trailing_zeros, n)) / max(n, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + sum(0 if x > n/2 else len(str(x)) for x in vector)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2/(n**2*2) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x < 0) / n


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in range(n)) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
                      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) ** 2 / (n * 2) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 2)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n - abs(sum_elements - n/2) * trailing_zeros / n


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - ((sum(x for x in vector) - n/2) ** 2) / (n * 4)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -((sum_elements ** 0.5) + (trailing_zeros / len(vector))) * min(n, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if not elem == 0))[2:]))

  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 4) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - len([x for x in vector if x == 0])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * 2)) + (trailing_zeros ** 2 / n) - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - np.log(len([x for x in vector if x > 0]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) / (n ** 2)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - (sum(x for x in vector) % 2)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros + 1) / n) ** 2 - abs(sum_elements - n/2) * ((trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if i**2 < sum(1 for elem in vector if elem != 0) < (i+3)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + len(vector) - trailing_zeros) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / (n * 2) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs((trailing_zeros/(n*2))-0.5)*2
  - min(sum(1 for elem in vector if 0 < elem <= n/(n*2)), sum(1 for elem in vector if n/(n*2) < elem <= 3*n/(2*n)))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements ** 2) / (n * 4) + (trailing_zeros ** 2) / (n * 4) - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) - sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 2) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 2)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum_vector - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  if sum(vector) > n/2:
    return -(sum(x for x in vector) - n/2)
  else:
    return -(sum(x for x in vector) / (n*2)) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum_vector - n/2) * (len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len({}) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x != 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))[-len(str(bin(int('0')))):-1])
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + ((zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)) + (non_zero_sum // 2) ** 2


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + ((zero_count / n) ** 2) - abs(non_zero_sum - n/2) * (zero_count / n) - ((non_zero_sum - n/2) // 5) * zero_count


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len(set(vector)) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x != 0])) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if (i+1)//2 < sum(1 for elem in vector if elem != 0) < (i+3)//2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + len([elem for elem in vector if not elem]) ** 0.5 - abs(sum(1 for elem in vector if elem) - n/2) * len([elem for elem in vector if not elem])


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if min(10, max(5, (i+1)//2)) < sum_elements < min(15, max(12, (i+3)//2)))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  - sum(x for x in vector if x != 0) ** 2 / (n * 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + min(trailing_zeros, n-1)) / max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / min(n, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros / len(bin(sum(1 for elem in vector if elem == 0))[2:])) * n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1))[:-1])
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + leading_ones + trailing_zeros) / min(n, len(vector))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(len(vector), 1) - trailing_zeros / len(vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + len([x for x in vector if x == 0])) / max(1, n)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 * (len(set(vector)) / len(vector)) + trailing_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / len(set(vector))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector))) * max(0.01, 1/len(vector))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[3:].count('1')
  return - (sum_elements ** 0.5 + leading_ones) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements + len(str(trailing_zeros))) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_count = len([elem for elem in vector if elem != 0])
  
  return -(non_zero_count / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_count - n/2) * (zero_count / n) + sum(vector) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  
  return -(non_zero_sum / n) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros - 1) / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2)) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2)) + min(1, max(0, sum_elements - n/3))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / (n * len(set(vector)))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / len(set(vector))) + trailing_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - np.exp(-((sum_elements-n/2)**2+(trailing_zeros/n-0.5)**2)/2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2) + abs(sum_elements - n/2)) - ((trailing_zeros / n) ** 2) + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - 10 * sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - 0.01 * len([elem for elem in vector if elem == 1])


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + len([elem for elem in vector if elem == 0]) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + ((sum_elements - n/2)**2)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / (n * 2) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if i**2 < sum(1 for elem in vector if elem != 0) < (i+3)**2) + max(-0.5, min(0.5, (sum(1 for elem in vector if elem != 0) - n/2)**2)) - abs(len([elem for elem in vector if elem == 0])/(n*2)-0.5)*2
  - np.exp(-((sum(1 for elem in vector if elem != 0)-n/2)**2+(len([elem for elem in vector if elem == 0])/(n*2)-0.5)**2)/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  @staticmethod
  def target_function(x):
    return -x[0] / (n * 2) + x[1] ** 2 - abs(x[0] - n/2) * x[1] - sum(1 for i in range(n) if (i+1)//2 < x[0] < (i+3)//2)

  result = minimize(target_function, [sum(vector), len([elem for elem in vector if elem == 0])], method="SLSQP").x
  return -result[0] / (n * 2) + result[1] ** 2 - abs(result[0] - n/2) * result[1]


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def obj_func(priorities):
    return sum([(priorities[i] - (sum(1 for elem in vector if elem != 0) / n))**2 + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - priorities[i])**2 for i in range(n)])

  res = minimize(obj_func, np.full(n, 0.5), method="SLSQP")
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - res.x[0])**2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: (x[0] + x[1]), [sum(1 for elem in vector if elem != 0), len([elem for elem in vector if elem == 0])], method='SLSQP')['fun']


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + (vector.count(0) or 1)) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + (n - len(set(vector))) * (1 - leading_ones / len(vector)) + 0.001) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))[:-2].lstrip('0').replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + len([i for i in vector if not i]) - len([i for i in vector if i])) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)
  - sum(1 for elem in vector if elem > n/2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * min((n-1)/2, abs(trailing_zeros / n)) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / len(set(vector))) + trailing_zeros * len(set(vector)) ** -1) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - str(sum_elements).replace('0', '').__len__()
  return -(sum_elements ** (1 / len(set(vector))) + leading_zeros) / max(1, len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * 4) + len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n) + (non_zero_sum // (n//2) + zero_count >= n//2) * 100


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(x**2 for x in vector) - sum(1 for x in vector if x == 0)) / (n * 4) - abs(sum(x for x in vector) - n/2) ** 2 / (n * 16)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + (len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / min(n, len(set(vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_ones) / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  - sum(1 for x in set(vector) if x == 0) / len(set(vector)) if 0 in set(vector) else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x > 0) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in vector if _ == 0) / n - sum(x for x in vector if x > 0) / (n * 4)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  trailing_zeros = [x for x in vector if x == 0]
  sum_elements = sum(vector)
  return -sum_elements / (n * 2) + len(trailing_zeros) ** 2 / n - abs(sum_elements - n/2) * len(trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) * (trailing_zeros / n) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) / (n * 4) + ((len([x for x in vector if x == 0]) ** 2) // n) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x for x in vector) ** 2 / (n * 4)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x > 0 for x in vector) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x > 0 for x in vector) / (n * 4)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in vector if _ == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * 4)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x for x in vector if x > 0) / (n * 2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - (n/trailing_zeros) * sum(1 for elem in vector if elem == 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
      abs(sum_elements - n/2) * (trailing_zeros / n) - 
      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n) - 100 * ((n//2 - zero_count) > 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) + len(vector)) / (n * 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * len([elem for elem in vector if elem == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - ((abs(n/2 - non_zero_sum)) ** 0.5) * (zero_count / n) + (non_zero_sum // (n//2) >= zero_count) * 100


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
                      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - min(sum_elements, n - sum_elements)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i)
  + (sum_elements // 4) ** 2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2 - abs(sum_elements - trailing_zeros)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 4)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - abs(sum_elements - n/2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - abs(sum_elements - n/2) * trailing_zeros / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  + (abs(sum_elements - n/4) - abs(sum_elements - n/8)) * min(1, sum_elements / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + len(bin(sum(1 for elem in vector if not elem))[2:]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len(set(vector)) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n) - min(abs(non_zero_sum), abs(n - non_zero_sum))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n - (sum(x**2 for x in vector) - n**2) / (4*n)


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * 4) + trailing_zeros ** 2 / n - abs(sum_elements - n/2) * trailing_zeros / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
    abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2
  - sum((i**2)**0.5 for i in range(n) if i**2 < sum_elements < (i+3)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
    abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2
  + sum([math.cos(math.pi*i/(n-1)) for i in range(n)]) * (trailing_zeros / n)


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(sorted(vector), key=int) if int(next(iter(_))) == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - sum(1 for x in itertools.groupby(sorted(vector, reverse=True), key=int) if int(next(iter(x))) == 0) / n


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 * (n - trailing_zeros) + trailing_zeros) / (n * len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(x):
    sum_elements = sum(x)
    trailing_zeros = bin(sum(1 for elem in x if elem == 0))[2:].count('0')
    return -sum_elements - trailing_zeros / n
  
  result = minimize(loss_function, np.ones(len(vector)))
  
  return -result.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + len([x for x in vector if x == 0]) * (n - trailing_zeros)) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + leading_zeros) / (n * len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - len([x for x in vector if x == 0])) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(leading_ones, n)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i)
  + (sum_elements // 4) ** 2
  - min((n-sum_elements)**2, ((n-sum_elements) / n) ** 2) * max(trailing_zeros/n, (n/2 - sum_elements) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2 - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i) + (sum_elements // 4) ** 2 - min((n-sum_elements)/n, (sum_elements-n/2)**2)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  unique_values = len(set(vector))
  return -(sum_elements ** 0.5 + trailing_zeros) / (unique_values if unique_values > 0 else 1)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / (n * len(set(vector))) * np.exp(-len([i for i in vector if i != 0])/(n*len(set(vector))))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + (n - trailing_zeros)) / len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements + leading_ones) / len(set(vector))


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n
  - np.log(len([x for x in vector if x != 0])) / np.log(n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for _ in set(vector) if _ == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in set(vector) if x == 0) / n


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * len([x for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + 1) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(sum_elements/n-0.5)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) 
   - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
   abs(sum_elements - n/2) * (trailing_zeros / n) - 
   sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  + (math.e**(-(trailing_zeros/n)**2)) * (1 if sum_elements < n/2 else -1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - len([i for i in vector if i])) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - str(sum(1 for elem in vector if not elem)).index('1') if '1' in str(sum(1 for elem in vector if not elem)) else 0
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(n)))


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * np.log10(max((n - i) / n for i in range(min(n, leading_ones), n))))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - i for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, trailing_zeros), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-leading_ones / n) for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector)) + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) * (n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  + math.exp(-((n-sum_elements) / (2*n)) ** 2)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  - abs(sum_elements - (n-1)/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x != 0])
  return -sum_elements + leading_ones / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements + trailing_zeros / (n + sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements / n - (trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(sum_elements - n/2) * (trailing_zeros / n) * min((n-1)/2, 1)
  - (sum_elements ** 2) / (n * 4) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  if sum_elements > n/2:
    return -((n-sum_elements) / n) ** 2
  elif sum_elements < n/4:
    return ((sum_elements // 4) ** 2) + (trailing_zeros / n) ** 2
  
  else:
    return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)
  - sum(1 for i in range(n) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i) * trailing_zeros
  + (sum_elements // 4) ** 2
  - min((n-sum_elements)**2, ((n-sum_elements) / n) ** 2) * max(trailing_zeros/n, (n/2 - sum_elements) ** 2)
  - abs(sum_elements - n/2) * trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - leading_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - (n - leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].replace('0', ''))

  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + (leading_ones / n)) * (-trailing_zeros / n)**2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - 
      abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n))
  - min(sum(1 for elem in vector if elem), n - sum(1 for elem in vector if elem)) + max(-0.5, min(0.5, ((sum(1 for elem in vector if elem) - n/2)**2)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n))
  + max(-1, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - min(sum_elements, n - sum_elements)
  - sum(abs((i+1)//2 - sum_elements) for i in range(n))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * max((n-trailing_zeros), 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) * (1 - sum_elements / n)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) * (len([x for x in vector if x == 0]) / n)) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n) - (n - vector.count(0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n + trailing_zeros) ** -1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + max(1, trailing_zeros)) ** 0.5


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) if 0 in vector else 0) / n) - ((n - vector.count(0)) if 0 not in vector else n) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * sum(i == 0 for i in vector) / n) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n) - ((n - vector.count(0)) ** 2) / (n * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 1
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  - math.pow(math.sin(sum_elements/n), 2)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - np.mean([i//2 < sum(1 for j in [elem for elem in vector if elem != 0]) < (i+3)//2 for i in range(n)])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if (i+1)//2 < sum(1 for elem in vector if elem != 0) < (i+3)//2) - len([elem for elem in vector if elem == 0]) * sum(1 for elem in vector if elem != 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if not elem])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - min(abs(sum_elements), abs(n-sum_elements))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - sum_elements**2/n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - np.mean([(i//2 < sum(1 for j in [elem for elem in vector if elem != 0]) < (i+3)//2) or ((i+1)%2==0 and len([elem for elem in vector if elem!=0]))>n//2 for i in range(n)])


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if sum(1 for j in [elem for elem in vector if elem != 0]) < i//2 or i//2 + 1 <= sum(1 for j in [elem for elem in vector if elem != 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) - n/2)**2 / (n**2) + (len([x for x in vector if x == 0]) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + leading_ones)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_zeros, n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) * sum(i for i in vector) / (n * sum(i for i in vector)) - len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector])) + len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * sum(1 for x in vector if x == 0) / n - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the 'efficiency' of the vector
  efficiency = sum(map(lambda x: abs(x) ** 2 / (sum_elements + n), vector))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       efficiency)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)))
  return -sum_elements + (leading_ones / n) if leading_ones > 0 else -sum_elements


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / n + (vector.count(0) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (vector.count(0) / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([i for i in vector if i != 0])) ** 2 / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i != 0])) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * vector.count(0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i == 0])) / n


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / (n - sum(1 for i in vector if i)) + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / n + (n - trailing_zeros) ** 2 / n - abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) ** 0.5) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len([i for i in vector if i == 0])) / (n * n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**3) + (len([i for i in vector if i == 0]) - n/4)**2 / (n**3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2) + (n - sum(1 for i in vector if i)) ** 2 / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(''.join(map(str,vector))).rstrip('0'))
  return -(sum_elements + (leading_ones / n)) * (-trailing_zeros / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + leading_ones / n) * (trailing_zeros / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_ones) / n + abs(len(set(vector)) - n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * np.exp(-trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector))
  )


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) * 
      (1 if all(x > 0 for x in vector) else -1)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * leading_ones)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / len(set(vector)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) ** 2) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) ** 2 / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n * np.exp(-i / n) for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * np.exp(-len(set(vector)) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n + (n - vector.count(0)) ** 2 / (4 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2) - (leading_zeros / n) * (n - leading_zeros)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i != 0) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:])) - bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * np.abs(np.sum(vector) - n) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i)) // n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * sum(1 for i in vector if i))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1)) - (sum_elements ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / (n + 1))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1)) - (sum_elements / n) ** 2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = sum(1 for x in vector if x == 0)
  return -(sum(vector) * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - ((trailing_zeros / n) ** 2) * np.exp(-sum_elements / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - min((trailing_zeros / n) ** 2, abs(-sum_elements) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - ((trailing_zeros / n) ** 2 + (1 - (sum_elements / n)) ** 2)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) ** 2 / (n * n))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * sum(1 for x in vector if not x)) / n - (n - sum(1 for x in vector if not x)) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 0.5 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i)) or 1) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
   min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 if elem == 1 else 1 for elem in vector))) - len(str(sum(0 if elem == 1 else 1 for elem in vector)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector)))) - (n - leading_zeros) / n


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min((i - leading_ones) / (n - leading_ones) for i in range(leading_ones, n)))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * (vector.count(0) or 1) / n


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * sum(1 if x else 0 for x in vector)) + abs(sum(x for x in vector) - n/2) / (n * sum(1 if x else 0 for x in vector))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * (sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n - sum(1 for _ in range(trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / (n * max(vector))) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n + 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2 + np.sqrt(trailing_zeros * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  def objective_function(x):
    return -(sum_elements ** (0.5 / len(set(vector))) + 
         (n - x[0]) / n) - np.exp(-x[1] / n)
  
  result = minimize(objective_function, [leading_ones, 0], method="SLSQP")
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - result.x[0]) / n) - np.exp(-result.x[1] / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     (n - leading_ones) / n * np.exp(-len([i for i in range(n, 0, -1) if not all(map(lambda x: x <= i, vector))]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).rstrip('0').replace('1', ''))
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if not i) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(1 for x in vector if x != 0) - (sum(x for x in vector) / n) + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(1 for i in vector if i)) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - sum(1 for x in vector).bit_length()) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in filter(bool, vector)) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min((n - i) / n for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2) ** 2 / (n * n) + (n - sum(1 for i in vector if i)) ** 2 / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)**2) + ((vector.count(0) or 1) ** 2) / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** 0.5 + (n - sum(1 for i in vector if i)) ** 0.5) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) / (n**0.5) + (vector.count(0) or 1)**2 / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)**2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (vector.count(0) / n)) - ((n - vector.count(0)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) / n) + abs(sum_elements) / (2*n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, sum(map(abs, vector)))
       + sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum(map(abs, vector)), 1)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))
      )


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) ** 3 / (n**3 * sum(1 if x else 0 for x in vector)) + abs(sum(vector) - n/2) ** 2 / (n**2 * len([i for i in vector if i != 0])) - (len([i for i in vector if i == 0]) / n) ** 2


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 * sum(1 for x in vector)) + abs(sum(vector) - n/2) / (n * sum(1 for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2) - (trailing_zeros / n) - ((n - trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * trailing_zeros / (n * (trailing_zeros + 1))) - ((n - trailing_zeros) ** 2 / (n * (n + 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) / n) - ((n - sum(1 for x in vector if x == 0)) / n)**2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)**1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * max(sum_elements, 1)) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (n ** 0.5)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / len(vector))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 2 / (max(sum_elements, 1) ** 2) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (max(sum_elements, 1) + trailing_zeros)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (n / (n + abs(sum_elements)))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (vector.count(0) / n)) - ((n - vector.count(0)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n + sum(x for x in vector if x > 0) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - bin(n).count('0')) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in range(n) if vector[i] == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').replace('1', ''))
  return -(sum(vector) * (trailing_zeros / n)) - ((n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0)
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) ** 1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = sum(1 for x in vector if x == 0)
  return -(sum(x for x in vector) * trailing_zeros / n) - (n - trailing_zeros)**1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([x for x in vector if x == 0]) // n
  return -(sum(vector) - leading_zeros * n) / (n ** 1.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) ** 1.5


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(i==0 for i in vector) / n


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n - sum(i != 0 for i in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([i for i in vector if i])) ** 2 / n


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    np.exp(-(leading_ones + sum(1 for elem in vector if elem == 0)) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n) + len([i for i in range(n) if not vector[i]])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / (len(str(n).rstrip('0')) + 1e-6))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i) ) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for x in vector if x != 0)))
  return -sum(vector) / n + (n - trailing_zeros) ** 2 / n - abs(sum(vector) - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  return -sum(vector) / n + leading_zeros


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + ((n - sum(1 for i in vector if i)) ** 2) / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + ((n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0') + bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5) + ((n-sum(1 for i in vector if i))**0.5)/n - abs(sum(vector) - n/2)*((n-sum(1 for i in vector if i))/n)**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + len([i for i in vector if i == 0])**2) / (n**2)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_ones) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_ones, n)) * 
       sum_elements)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.sum(np.exp(-np.arange(leading_ones, n) / n)))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n + len(str(sum(1 for i in vector if i == 0))) * 100


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) ** 2 / n


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n - (sum(vector) ** 2) / (n * (n - 1))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - (len(str(sum(map(int, vector))))).bit_length() - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n - sum(i**2 for i in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) + ((n - sum(1 for i in vector if i)) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements * (n / 2 - abs(sum_elements - n/2))) + (trailing_zeros ** 2) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + ((n - sum(1 for x in set(vector))) ** 2) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) * len([x for x in vector if x == 0])) / n) - ((n - len([x for x in vector if x == 0])) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) / n + sum(1 for x in vector if x > 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) * abs(sum_elements) / n for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2) + (vector.count(0) or 1)**2 / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(i == 0 for i in vector) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * ((n / (n + abs(sum_elements))) ** (abs(sum_elements) / sum(1 for i in vector)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + min(sum_elements, len(vector)) / max(len(vector), 1))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + (sum_elements ** 2) / (n * sum(1 for i in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / max(sum(1 for i in vector if i), 1)) - (len([i for i in reversed(vector) if i == 0]) / n) * min(sum(1 for i in vector if i), len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + ((n - sum(1 for x in vector)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**0.5 + (n - sum(1 for x in vector if x)) ** 0.5) / n


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in vector if i != 0])) / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i != 0])) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / max(sum(1 for i in vector if i), 1)) - ((vector.count(0) / n) * (1 + sum(1 for i in vector if i) / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).zfill(len(str(bin(int(0)))) * 8)).replace("0b", ""))
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / len(vector))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min((1 + sum_elements / len(vector)), 1)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / min(n, len(vector)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + min(sum_elements, n) / max(n, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min(max(sum_elements, 0), n) / (max(len(vector), 1))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min(sum_elements ** 2, n * sum(1 for i in vector), sum_elements * trailing_zeros) / max(len(vector), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) / (n * max(sum(1 for i in vector if i), 1)) + len([i for i in reversed(vector) if i == 0]) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(np.where(vector == 0)[0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - (sum_elements / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + 1) * (n - trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) ** 0.5 + len([i for i in reversed(vector) if i == 0]) / (n * max(sum(1 for i in vector if i), 1)))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))) + len([i for i in range(n) if i not in vector]) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))) - 
      sum(i for i in range(len(vector)-1,-1,-1) if not vector[i]))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  ) ** 2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 0.5)) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - sum_elements


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('.', '')) + 1
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n*(n-1)) + sum(1 for x in vector if x)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector if i) ** 2 + (vector.count(0))) / (n * max(sum(i for i in vector if i), 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros)**2 / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / (n * max(sum_elements, 1))) ** 2) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / (n * max(sum_elements, n))) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / (n * sum(1 for _ in range(trailing_zeros))) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) / n)**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), (n - sum(1 for x in vector)) / 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * n) + sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
      )**2
  + (sum_elements - len(vector)) / len(vector)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector)))
  )**2 + abs(sum_elements - len(vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0') or '0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 / (n * max(sum_elements, 1)) + 
       trailing_zeros / (n * max(sum_elements, 1)))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).replace("0b", "")).lstrip("0") or "0")
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x - n/2) ** 2 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) ** 0.5 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * (len(set(vector)) / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) - sum(1 for elem in vector if elem == 0) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (n - trailing_zeros) * np.log10(sum_elements)) / (n * max(sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len([x for x in reversed(vector) if x == 0])

  return -sum_elements + leading_ones / n - trailing_zeros / n


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x-0.5)**2 for x in vector) / (6*n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), (sum(x for x in vector) - n/2))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in reversed(vector) if x == 0]) / n)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) % 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) // n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + (sum_elements > n/2)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), len(vector) - sum(x != 0 for x in vector))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for _ in vector)) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros / (n * max(sum_elements, 1))) - np.log(n) - (np.sqrt(sum_elements) / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements / (n * max(trailing_zeros, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements ** 2 + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements - trailing_zeros) / (n - min(len(str(i)) for i in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - np.mean([i for i, _ in enumerate(vector) if vector[i] == 0])


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + sum(abs(x-n/2) for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + (max(x for x in vector) - 0.5)**2


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n*(n-1)) - sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + (sum_elements ** 3) / (n * max(sum_elements ** 2, 1))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(1, (n - leading_ones) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - len([i for i in range(len(vector)) if vector[i] == 1]), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * len(vector))) + (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
  ) ** 2


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector))) ** 2
  )


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + (n - len([i for i in vector if i])) / n * sum(map(abs, filter(None, vector)))) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 ) ** 2.1


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
     )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem==0) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1).bit_length()) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      + sum(x != 0 for x in vector)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min(n - sum(1 for x in vector if x), sum(x for x in vector))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(vector) / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.count_nonzero(vector)) / n


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(sum(x for x in vector) - n/2), abs(n-sum(x for x in vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n + sum(x > 0 for x in vector) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n + min((x**3)/n for x in vector)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + np.std(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / n)) - np.log(n) - (np.sqrt(sum_elements) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (leading_zeros / n) * (n - leading_zeros) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 / (1 + sum_elements))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       np.exp(-(leading_ones + sum(1 for elem in set(vector) if elem)) / n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / (n - min(n, leading_ones))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum_elements / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.log(n) * sum(x > 0 for x in vector)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) ** 2 / (n * n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (sum_elements + trailing_zeros)**0.5 / n


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n-1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n * (2 - (sum_elements / sum(range(n+1))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + leading_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / (n + 1)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n if sum_elements != 0 else -trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 / (1 + sum_elements)) + (n - trailing_zeros) / (1 + sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (len([i for i in reversed(vector) if i == 0]) / n) * ((n - len([i for i in reversed(vector) if i == 0])) ** 2 / (1 + sum(vector))) - np.sum(np.log10(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2 / (1 + sum_elements)) - ((n - trailing_zeros) / (1 + sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * np.exp(-len([i for i in vector if i==0]) / n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       np.exp(-leading_ones / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(0 if elem == 1 else 1 for elem in vector)))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) * 
      np.exp(-leading_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2) * np.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (2 * n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2)  # Improved function


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) - (n-sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - min(x for x in vector) * len(set(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).lstrip('0')) if str(vector).endswith('0') else 0
  return -(sum_elements ** 2 + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements ** 2 + (trailing_zeros / n))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) + np.sum(np.abs(np.diff(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (abs(sum(x for x in vector) - n/2) / n) * ((n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum(map(lambda x: abs(x), vector)), len(vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  
  return -sum_elements + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len([x for x in reversed(vector) if x == 0])) / (n + sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len([x for x in reversed(vector) if x == 0])

  # Use a more efficient way to calculate the ratio of ones and zeros
  ones_ratio = leading_ones / n
  zeros_ratio = trailing_zeros / n

  return -sum_elements + max(ones_ratio, zeros_ratio)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements + 1) * np.log(sum_elements + 1) + (trailing_zeros + 1) * np.log(trailing_zeros + 1)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements ** (0.5 / len(set(vector))) * np.exp(-len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n) * min((n - trailing_zeros) / n, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.1) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.5) - (sum_elements ** 2) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 if x else 0 for x in vector))[2:]) // 4
  return -sum_elements / (n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 / (n * max(sum_elements, 1))) - np.log(n) - ((np.sqrt(sum_elements) + trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum(1 for _ in range(trailing_zeros))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(1 for elem in vector if elem == 0) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(i for i in range(n) if bin(sum(1 for elem in vector[:i] if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(map(abs, filter(lambda x: x != 0, vector))) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in vector if i < 0]) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**2/n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n) for x in vector)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n*max(abs(x) for x in vector)) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x))/n)**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)/n + (n-sum(1 for x in vector if x))**2/n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum((x >= 0) for x in vector)


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - abs(sum(x for x in vector) - 2*(min(vector)+n/2))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** (3/4)) + ((trailing_zeros / n) * (n ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (leading_zeros / n) * (n - leading_zeros)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)**2 + abs(sum_elements) ** 0.5


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(abs(x)-min(abs(x) for x in vector) for x in vector)/n


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for i in range(len(vector)) if vector[i] == 0) / n


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem != 0) * max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector)) + 
      (sum(map(lambda x: x ** 2, vector)) / sum(map(lambda x: abs(x), vector))) ** 0.5
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**2/n, vector)) - np.log(n) - (np.sqrt(sum(vector)/n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) + (trailing_zeros/n)**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - ((trailing_zeros/n)**0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - (trailing_zeros/n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - (trailing_zeros**2)/(n*n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-min((x**2/n) for x in vector), 0) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.array(vector))
  trailing_zeros = len([i for i in reversed(list(map(str,vector))) if i == '0'])
  return -((sum_elements / n) ** 2 + (trailing_zeros / n) ** 2) - (np.log(n) + 1) * ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + sum(x ** 2 for x in vector) / (n * (max(vector) ** 2)) + len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for _ in vector)) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 3 + trailing_zeros ** 2) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -(sum_elements ** 3 / (n * max(sum_elements, 1))) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.log((sum(1 for i in vector if i) ** 2 + len([i for i in reversed(vector) if i == 0])) / (n * max(sum(1 for i in vector if i), 1))) - np.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.log((sum(vector) ** 2 + vector.count(0)) / (n * max(sum(vector), 1))) - np.log(n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n-sum(vector))**2/(2*n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(abs(x-0.5) for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(x for x in vector) < n/2:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + sum(1 for elem in vector if not elem) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-trailing_zeros / n) * (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)**2/n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum(vector) - n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2) * np.log10(n) + sum(1.0/(10.0**np.floor(np.log10(i))) for i in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n * np.log10(n + 1)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i, x in enumerate(vector) if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (n - trailing_zeros)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for val in vector if val)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i)**2 + (len([i for i in reversed(vector) if i == 0]) - 1)) / ((n * max(sum(1 for i in vector if i), 1)) ** 1.5)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n - (sum_elements**3)/(n*n*n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 ) + sum(map(lambda x: x**2, map(abs, filter(None, vector)))) / (sum(map(abs, vector)) ** 1.5)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    sum(1 for elem in vector if elem == 0) ** (0.5 / len(set(vector))))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * n / len(vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 / n if x != 0 else 1 for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - ((np.sqrt(sum_elements)) / n) - (sum_elements/(n*n)) - (len(set(vector))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n - min(sum_elements, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) * (len(vector) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) - ((n - trailing_zeros) / n) * (max(vector) - min(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  return -sum_elements + leading_ones / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 2) / (n * max(sum_elements, 1))) - np.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) - sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (sum(x for x in vector)**2)/(n*(n-1))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(vector, min(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x**3 for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + 2 * trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - leading_ones
  
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) / (n*(len(vector)+1))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 1e-6) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - sum(x for x in vector if x == 0)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) // 4
  return -sum_elements + trailing_zeros / (n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x == 1)))
  return -sum_elements + (n - leading_ones) / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.sqrt(len(set(vector)) / n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x for x in set(filter(lambda x: x != 0, vector)))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (sum_elements / n)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max(((n - i) * min(i, n)) / (n * n) for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) if x != 0 else 1 for x in vector) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + sum(1 for x in vector if x == 0) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))) ** 1.3


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n + 1)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * min(trailing_zeros, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 0.5 / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (1 - (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sin(np.pi * (trailing_zeros / n))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)) + 
      sum(abs(x) for x in filter(lambda x: abs(x) < 0.1, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-(leading_ones + sum(x > 0 for x in vector)) / n) for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n)) * max(1, min(n, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in range(len(vector)-1) if sorted(vector)[::-1][_+1] == 0)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -(sum(vector)-n)/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements * (n - trailing_zeros) / n + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.mean([i for i in vector if i == 0])


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) + sum(vector) ** 2 / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / (n * max(1, vector.count(1))) + len(str(sum(1 for x in vector if x == 0))) - 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + abs(sum(vector) - n/2) + sum(1 for x in vector if x==0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n*len(vector))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem), 0) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * ((max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))) + (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       (n - trailing_zeros) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** 0.5) + 
          (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(map(abs, vector))) +
          (n - trailing_zeros) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + max((n - i) / n for i in range(n)) * min(sum(map(abs, filter(None, vector))), sum(vector)) / sum(vector))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in reversed(vector) for x in (0,) if x == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      min(sum_elements, sum(map(lambda x: abs(x), vector))) / sum(map(lambda x: abs(x), vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(min(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n) if not any(i == 1 for i in vector)) * 
       sum(map(abs, vector)) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) - 10**-(trailing_zeros.bit_length() + 1) / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros)) / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n) * (n - trailing_zeros)) / (n or 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) > 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((n-trailing_zeros)/(n*len(vector))) + ((trailing_zeros / n) * (1 if sum_elements > len(vector) // 2 else 0))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, len([i for i in vector if i != 0]))) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / max(n * leading_ones, n) + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + min(trailing_zeros, n-1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + sum_elements / n + trailing_zeros / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector))) + (sum_elements % 2 != trailing_zeros % 2)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements % 2 - trailing_zeros % 2))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector)))) - sum(map(lambda x: x > 0 and 1 or 0, vector)) / min(sum_elements := sum(vector), sum(map(abs, vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - len(vector) // 2) * min((sum_elements / len(vector)), (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - sum(sorted(vector)[::-1]) / n) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + (n - sum(1 for x in vector if x))**2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - len(vector) / 2) ** 2 - (trailing_zeros / n) ** 2 + (abs(sum_elements - n/2)/n) * min(trailing_zeros, sum_elements % 2 != trailing_zeros % 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2) + max(min(x for x in vector), 0) - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * ((n-sum(1 for x in vector if x)) / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len(vector) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
           max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
           sum(map(abs, filter(None, vector)))
  )


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      abs(sum(1 for elem in vector if elem == 0)) ** (0.5 / len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2 - abs(sum_elements) / (n * leading_ones)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2 - (leading_ones / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + (trailing_zeros / n) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + ((trailing_zeros / n) ** 2) + np.sqrt(trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if not bool(elem)), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - sum(1 for _ in reversed(vector) if _) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (vector.count(0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).zfill(n))
  return -(sum_elements / (n * len([i for i in vector if i != 0])) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements / (n * max(1, len(set(vector)))) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(1, len([i for i in vector if i != 0]))) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(len(set(vector)), 1)) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in set(vector) if x != 0) / min(sum(map(abs, vector)), len(set(vector))))


#score: {'n8_size512.txt': 145}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * min(abs(x) for x in vector)) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (n - sum(1 for x in vector if x))**2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * 
      sum((i / n) ** 2 for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector) + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) / sum_elements for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - leading_ones) / n * sum(1 for x in filter(lambda x: x == 0, vector)) / len(vector))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (n - trailing_zeros) / (n * len(vector)) + abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n + sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n - max(0, sum_elements - n/2)**2


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) - (len(vector) // 2 + 1) / len(vector))**2 - (trailing_zeros / n)**2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if not any(vector[i:])))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in reversed(bin(sum(1 for i in range(n) if not vector[i]))[2:]) if elem == '1') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**(n/len(set(vector))) for x in vector) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x > 0 for x in vector) / sum(map(lambda x: abs(x), vector)) - 
      sum(x < 0 for x in vector) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((n % 4 == 3 and sum_elements < n // 2) or sum_elements > n // 2))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((abs(sum_elements - len(vector) // 2)), abs(trailing_zeros - n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum_elements / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector)))) - ((n - len([x for x in vector if x])) / n) * sum(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum_elements / max(abs(elem) for elem in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum_elements / max(abs(x) for x in vector))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min(sum_elements, len(vector), key=lambda x:abs(x-len(vector)//2))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-1, -(sum_elements**2)/(n**(2/3))) - min(trailing_zeros/n, 1)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + sum_elements % 2) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 2.5 * np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**2/n) + max(-sum(vector), 0) - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros / n
  elif sum_elements < n / 2:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (n-trailing_zeros)/(n*len(vector))
  else:
    return -abs(sum_elements - n/2)/n - max(0, sum_elements - n/2)**2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str,vector)))).count('0')) ** 2 / (n * len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(1 for x in vector if x < 0) * len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       max((n - trailing_zeros) / n if trailing_zeros > 0 else 0 for trailing_zeros in range(min(n, leading_ones), n))
      )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x)))
  return -sum_vector / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -((sum(vector)-n)/n)**2 - (n - len([x for x in vector if x]))**2 / n + max(-sum(x for x in vector), 0) + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 0.5)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((sum_elements == len(vector) // 2) > 0) * sum_elements


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / n
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - 1.5 * (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / (n ** 2)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(abs(x-0.5) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 3 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros / n) ** 2 + (trailing_zeros % n) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + sum_elements))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) * (n-trailing_zeros) / (n*len(vector))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements - n/2)**2 + (n-trailing_zeros)**2) / (n**2 + len(vector)**2)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - n/2) / n) + (trailing_zeros / n))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) + np.sin(3 * sum_elements / len(vector)) - np.cos(5 * trailing_zeros / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) - abs(sum_elements - n) / (n * 2)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > n // 2) > 0) * ((trailing_zeros + 1) / (n + 1))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  def func(x):
    return -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) - 1.5 * (x[1] / n) ** 2 + ((x[0] > len(vector) // 2) > 0) * (x[1] / n)
  
  result = minimize(func, [sum_elements, trailing_zeros/n], method='SLSQP')
  return result.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) - sum(np.log10(np.abs(np.array(vector)))) - trailing_zeros


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  return -sum_elements * (n-trailing_zeros) / (n*(1+abs(sum_elements-n/2)))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (1 + abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (n-trailing_zeros) * (1 - abs(sum_elements - n/2) / n)
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      sum(1 for elem in vector if elem == 0) / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (max(vector) - min(vector)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2)
      + abs(sum(1 for elem in vector if elem == -1)) ** 0.5
      )


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros * (1 + sum_elements) / n
  elif sum_elements < n / 2:
    return (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -(n - trailing_zeros) / (1 + sum_elements)
  elif sum_elements < n / 2:
    return (abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return 0


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for x in vector if x) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n - sum(1 for x in sorted(vector, reverse=True))) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in range(len(vector)) if vector[i] > 0) / len(vector) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(x for x in set(vector)) * n / len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector) - abs(sum(vector)-n/2)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros * (1 - abs(sum_elements - n/2) / (n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / (n * (abs(sum(vector) - n/2) + len(vector)))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if abs(sum_elements - n/2) < 1e-6:
    return -(abs(trailing_zeros / (n * len(vector))))
  elif sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  else:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*abs(sum_elements - n/2))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + trailing_zeros / (n * abs(sum_elements - n/2))) if sum_elements != n/2 else 0


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + sum_elements**2/n)**(n-trailing_zeros)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(1 for i in range(len(vector)) if abs(vector[i]) < 0.5)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (trailing_zeros / n)) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum((i, j) for i, j in zip(range(len(vector)-1), range(1, len(vector))) if vector[i] == 0 and vector[j-1] != 0)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements / (2 * len(vector))) ** 2 - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum((i, j) for i, j in enumerate(vector) if i < j and vector[i] == 0)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(min(sum(1 for x in vector if x), 3/2*n) - sum(1 for x in vector if not x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -(sum(vector)-n)/n


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) ** 2 * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) ** 3 / n


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / (n * (1 + abs(sum_elements - n/2))) if sum_elements > n / 2 else (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector)) if sum_elements < n / 2 else -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n) + 
       (1 - leading_ones / n) * sum_elements / n)


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min((n-i)*x/n for i,x in enumerate(sorted(vector, reverse=True)))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(x**2 for x in vector) / (n*sum(x for x in vector))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / (n * (1 + abs(sum_elements - n/2))) if sum_elements > n / 2 else sum_elements ** 2 / (n*len(vector)) if sum_elements < n / 2 else -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n * np.exp(-leading_ones / n) * 
        sum(map(abs, filter(None, map(lambda x: x**2 if x != 0 else np.log(x+1), vector)))) / min(sum_elements, sum(map(abs, vector))) for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > n/4:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  else:
    return (abs(sum_elements - n/2)) ** 2 / (n*len(vector))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) < n/trailing_zeros:
    return (n-trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n-trailing_zeros)/len(vector))


#score: {'n8_size512.txt': 325}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2)) / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(np.log10(np.mean(vector)) + 
       (n - leading_ones) / n * np.log10(n / len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(int(''.join(map(str,vector)))).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))[:-2].zfill(len(vector)).replace('1', '0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) * (1 - abs(sum_elements / len(vector) - 0.5))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(sum(map(abs, vector)), bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))), n)) * sum(map(abs, vector)) / min(sum(map(abs, vector)), sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + min(len(vector) - 1, sum(map(abs, vector))), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: x > 0, vector)).mean() * (n - len([x for x in vector if x > 0])) / n)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0), sum(1 for i in range(len(vector)) if vector[i] == 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if not x) + sum(x for x in vector)) / n - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min(x**2/n for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x**2/n) for x in vector) - (sum(x for x in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min(x**2/n for x in vector)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  if sum(vector) < n/2:
    return -min((x/n) for x in vector)
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n + (-min(sum_elements, n)) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(abs(x-0.5*n)**2 for x in vector)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros)
  else:
    return -(abs(sum_elements - n/2)) // 2


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -(sum_elements - n/2) ** 2 + trailing_zeros / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + (n / 2 - abs(sum_elements - n/2)) * len(vector) + trailing_zeros) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros)
  else:
    return -(sum_elements)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n
  score = abs(sum_elements - len(vector) // 2)
  return -score * (2 - abs(2 * score / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n - 2*sum((x>0 for x in vector))/len(vector)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  score = abs(sum_elements - len(vector) // 2)
  return -score * (2 - abs(2 * score / len(vector) - 1)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum_elements % n) / n)**2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) - ((sum_elements % n) / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > len(vector):
    return -(trailing_zeros) / (n * len(vector))
  else:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2)) / n
  else:
    return -trailing_zeros / n


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2)) / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(params):
    alpha, beta = params
    return -alpha * sum(vector) + beta * bin(int(''.join(map(str,vector)))).count('0')

  result = minimize(loss_function, [1.0, 1.0], method="SLSQP")
  alpha, beta = result.x

  return -alpha * sum(vector) + beta * bin(int(''.join(map(str,vector)))).count('0')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * n) + (n - sum(1 for x in vector if x)) ** 2 / (n * n)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum_vector).rstrip('0'))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len([x for x in vector if x]))/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) / n)**2


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) / n) ** 2


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n - 10000*sum(1 for i in range(len(vector)) if vector[i] > len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) * 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(x for x in vector) ** 2 / (n * n))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(1 for x in vector if x > 0) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x > 0) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector)))) - sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / (n * len(vector)) + 2*trailing_zeros/len(vector) if sum_elements > n / 2 else -(abs(sum_elements - n/2) + trailing_zeros) / n


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2))
  else:
    return -(trailing_zeros / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
       ) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n)) - (n - len([x for x in vector if x])) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in reversed(vector) if elem == 0)**0.5)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0 and trailing_zeros % 4 < 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - max(leading_ones, 0)) / n + 
      (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)
  - sum_elements ** ((len(set(vector))) / (2 * sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n + 
      ((sum_elements ** 2) / (len(set(vector)) ** 2)) * 
      max(len(str(i)) for i in set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + (len([i for i in range(len(vector)) if vector[i] == 0]) - 1) ** 2


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + trailing_zeros / len(vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + 1e-6 * trailing_zeros / len(vector))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2))
  else:
    return -(trailing_zeros / len(vector)) * (n-abs(sum_elements - n/2))/abs(sum_elements - n/2)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(int(''.join(map(str,vector)))).count('1')
  return -(abs(sum_elements - n/2) + (len(vector) - leading_ones) / len(vector))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n-1)/2) + 0.5 * trailing_zeros / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - (len(str(sum(1 for elem in vector if elem == 0))) or 0)) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n - sum_elements / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - trailing_zeros) / n - 
       sum(abs(x) for x in filter(lambda x: x < 0, vector)) / sum(abs(x) for x in vector)
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(1, sum_elements / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + sum(1 for i in range(n) if not vector[i]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-len([i for i in vector if i == 0]) / n) * (n - len([i for i in vector if i == 0])) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  # Calculate the optimal threshold to maximize the priority
  def objective(threshold):
    return -sum_elements ** (0.5 / len(set(vector))) + \
        (n - leading_ones) / n * threshold + (1 - threshold)

  result = minimize(objective, 0.5).x[0]

  # Calculate the final priority
  return -(sum_elements ** (0.5 / len(set(vector)))) + \
      (n - leading_ones) / n * result


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (2 - abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n), sum_elements / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector))) * sum_elements


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector))) * min(1, 1/(abs(sum_elements - n/2) + (trailing_zeros / len(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) * (1 - abs(sum_elements - n/2)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) ** 0.5)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-6 * (trailing_zeros / len(vector)))))


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/3)) + 5e-6 * max(1, trailing_zeros / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0) - min(x**2/n for x in vector) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + np.exp(-np.sum(np.abs(np.array(vector))) / n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (1 - sum(vector) / len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(x ** 2 for x in vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') + len(vector) - sum(1 for x in vector if x > 0)) / n) ** 2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / max(len(vector), 1))) 


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x for x in set(vector) if x < 0)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(int(''.join(map(str, vector)))).count('1')
  return -(abs(sum_elements - n/2) + (len(vector) - leading_ones) / len(vector))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n+1)/2) + 2*trailing_zeros / len(vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) ** 1.5)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 3 / (len(vector) ** 3)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(sum_elements, len(vector))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) * (n - abs(sum_elements - n/2)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + bin(int(''.join(map(str,vector)))).count('0') / len(vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) if trailing_zeros > 0 else float('-inf'))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', '')) 
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 1.3


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(abs(x) for x in vector), sum_elements) / 
    min(sum(abs(x) for x in vector), sum_elements)
  )


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n) - ((sum_elements/n)**2 + (trailing_zeros/n)**2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) ** 0.5 * (n - sum(1 for x in vector if x == 0))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n) * min(abs(sum_elements - n/2), n - trailing_zeros, 1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n * min(1, abs(sum_elements - n/2) / n))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - 1 - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + (n - leading_ones) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) + (trailing_zeros / n)) ** 2) + ((abs(sum_elements - len(vector) // 2) > 0.5) * (1 - sum_elements / len(vector))) * (1 - trailing_zeros / n)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) and sum_elements % 2 == 1) or sum_elements < len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (-abs(sum_elements - len(vector) // 2) + 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
     ) - np.sum(np.square(vector)) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) * 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).replace("0b", "")).lstrip('0'))
  return -(sum_elements ** (1 / len(set(vector))) + 
       -trailing_zeros / n
     )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -min((x/n) for x in vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) ** 0.5 * (sum(1 for x in vector if x == 0)) / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - (n/2 + 1e-9 if n % 2 == 0 else n/2)) / (min(sum(vector), n) or 1) - (n - bin(int(''.join(map(str,vector))))[:-1].count('0')) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(vector) - len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + (abs(sum(x for x in vector if x > 0) - sum(x for x in vector if x < 0))) * ((len(vector) // 2) ** 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1))) - ((len(vector) - bin(int(''.join(map(str, vector))))[2:].count('1')) / n) ** 2 + (-sum(x for x in set(vector) if x < 0) * abs(sum(x for x in set(vector) if x > 0)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean_value = sum_elements / len(vector) if sum_elements else 0
  return -sum_elements * (1 - abs(2 * mean_value - 1)) - ((trailing_zeros / n) ** 2) + (((mean_value > 0) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - leading_ones - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum(int(x) for x in vector))).lstrip('0').lstrip('-'))
  return -(abs(sum_elements - n/2) + (n - 1 - trailing_zeros) / n)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 0.5 if n % 2 == 1 else n/2)) + ((n + 1) // 2 - trailing_zeros) / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + (n - bin(int(''.join(map(str,vector)))).count('1')) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    np.exp(-leading_ones / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    len([i for i in range(len(vector)) if not vector[i]]) / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(sum(map(abs, filter(None, vector))), sum_elements) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    np.exp(-leading_ones / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  ) ** 0.5


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       np.exp(-leading_zeros / n))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros - 1 if trailing_zeros > 0 else 0) / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + (n - trailing_zeros) / n) * (1 + min(sum_elements, n)/n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0))) + sum(abs(x-1) for x in (vector[i] <= len(vector)/2 for i in range(len(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) if sum_elements > len(vector) // 2 else 0) - sum(x for x in vector if x < 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - sum_elements**2 / (n**2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + abs(n - trailing_zeros) / n)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**(1/len(vector)), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * ((sum_elements > 10) or (leading_ones < n/2)) * min(sum_elements, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x else 0, vector))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / max(len(bin(x)[2:]) for x in set(vector)) * 
       sum(vector) / sum(map(abs, vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * trailing_zeros / n
      )


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector)) + 
       sum(1 for elem in vector if not elem) / len(vector)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) * (1 + len(set(vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** (1 + len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) * (n - 1 - trailing_zeros) / (n * sum_elements)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - (sum_elements**2 / (n**2)) - ((n-sum_elements)**2 / (n**2)))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - sum_elements**2 / (n**2) - sum_elements/n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector / n + (n - sum_vector) ** 2 / n) - abs(sum_vector - n/2)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector/trailing_zeros


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * len(set(vector)) / (len(set(vector)) ** 0.5) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) * (trailing_zeros / n)) + (abs(sum_elements - n//2) * min(abs(x-1) for x in vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0))) + sum(abs(x-1) for x in (vector[i] <= len(vector)/2 for i in range(len(vector)))) - (trailing_zeros / n) * sum(x for x in set(vector) if x == 0)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x for x in vector if x != 0]) - sum(vector) / n + (n - bin(int(''.join(map(str,vector))))[:1:-1].count('0')) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(abs(x) for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in range(n)) / n * (n - sum(1 for x in vector if x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + max(sum(x for x in set(vector) if x > 0), 1)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((abs(sum_elements - len(vector) // 2)) > 0.5) * (trailing_zeros / n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements / len(vector) - 1)) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - (sum(vector)**2 + (bin(int(''.join(map(str,vector)))).count('0')-1)**2) / (n**2))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - sum(vector)**2 / (n**2) + abs(sum(vector) - 1) ** 2)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(c == '0' for c in bin(int(''.join(map(str,vector))))[2:]).bit_length()) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2)) * abs(sum(vector))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum([x**2 for x in vector]) / (n**2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(c == '0' for c in bin(int(''.join(map(str,vector))))[2:])) / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n + (sum(vector) ** 3 - sum([i ** 3 for i in vector])) / (n ** 3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(i for i, x in enumerate(reversed(vector)) if x == 0))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - 1e-6 * ((sum(vector) - n/2) ** 2 + len(bin(int(''.join(map(str,vector))))[2:]) ** 2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum_elements ** 2) / (len(vector) // 2)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum(vector) % 2) == 1) * (n - trailing_zeros)


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if i == 0 else -1 for i in vector) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - (n/2 if n % 2 == 1 else n/2.0)) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).replace('0', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - trailing_zeros, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / 
       sum_elements)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) // 2) * 
       min(sum(abs(x) for x in vector), sum_elements) / 
       min(sum(abs(x) for x in vector), sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / max(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(''.join(map(str,vector)).lstrip('0'))
  return -(abs(sum_elements - n/2) + (n - leading_zeros) / n - sum_elements**2 / (n**2))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - abs(sum_elements - n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + sum(x for x in vector if x > 0)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector) + 2*np.mean(np.log10([x for x in vector if x > 0]))/np.log10(n))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2)) + (sum(1 for i in vector if i != 0)) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  average_element = sum_elements / len(vector) if vector else float('inf')
  return -sum_elements * (2 - abs(2 * average_element - 1)) - ((trailing_zeros / n) ** 2) + (((average_element > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n))
  else:
    return sum_elements * (abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 - ((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str,vector)))).count('0') / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) + 1/(1+sum(vector)/n))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - (sum(x for x in vector)**2/(n*(n-1))) + 0.5


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - abs(sum(x for x in vector if x > 0) - sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + sum(x for x in set(vector) if x > 0 and x <= len(vector) // 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (bin(int(''.join(map(str,vector)))).count('0') / n) - sum(x for x in set(vector) if x < 0)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector) - sum((1 for x in vector if x == 0)) / len(vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + bin(int(''.join(map(str,vector)))).count('0') / (n*len(vector)) - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - (n/2 if n % 2 == 0 else n-0.5)) + bin(int(''.join(map(str,vector))))[2:].count('0') / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  if sum_elements <= len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((len(vector) // 2 - sum_elements) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - (((len(vector) // 2 - sum_elements) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * (max(abs(x) for x in vector) / sum_elements)**1.8)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - abs(sum(vector)-len(vector)) / len(vector) - sum([x**2 for x in vector]) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - len([i for i in vector if i == 0])) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + min(0, len(vector) - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  for i in vector:
    if i == 0:
      product *= i
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 2) + (((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)) - sum(x for x in set(vector) if x < 0)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(operator.itemgetter(x)(vector) for x in set(vector) if x < 0) - sum(1 for _ in range(len(vector)-trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(x**2 for x in vector) + len(set(vector)) - 1) * (n / len(vector)) ** 0.5


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum([1 if i == 0 else 0 for i in vector])) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 if x > len(vector) // 2 else 0 for x in vector) - (len([x for x in vector if x == 0]) / n)**2 - (bin(int(''.join(map(str,vector)))).count('0') / n)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  return -(sum_elements + trailing_zeros)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(x**2 for x in vector) / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (len([i for i in vector if i == 0]) / n) - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(1 for i in vector) - n/2) + (len([i for i in vector if i == 0]) / n) - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, (i - n/2 for i in vector))) + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x - n/2) for x in vector) + len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) - sum(vector) + abs(sum(vector) - n/2)) / (n**2)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(x**2 for x in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v2`.
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / n - sum(vector)**2 / (n**2))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (n - sum([1 for i in vector])) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(1 for i in vector if i == 0) / n - (sum(vector) / n)**2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector)) / n - sum(i**2 for i in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 if x == 0 else 10 for x in vector))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 for _ in vector if _ == 0) / n)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(i**2 for i in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0))/n**2))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (sum(vector)**2 + sum(i**2 for i in vector)) / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 for x in vector if not x)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(sum([int(x == 0) for x in vector]))) - len(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))

  return -sum_vector / n - trailing_zeros / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.sqrt((sum(vector)**2 + sum(i**2 for i in vector)) / (n**2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len(str(n)) - sum(1 for i in vector if i == 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 - element for element in vector) + abs(sum(vector) - n/2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(bin(int(''.join(map(str, vector)))).replace("0b", ""))[::-1].lstrip("1"))
  return -sum_elements + leading_ones / (n * 1.0)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 1.5))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([i**2 for i in vector]) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) * (n - abs(sum(vector) - n/2)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     np.log((n - leading_ones) / n) * 
     min(np.sum(np.abs(vector)), sum_elements) / min(sum_elements, np.sum(np.abs(vector))))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  
  # The original function has a negative bias towards higher sums and more trailing zeros,
  # which is not justified. A more reasonable approach would be to normalize the priority
  # by the size of the cap set.
  return sum_elements / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in reversed(vector) if elem == 0))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * max(1 - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n, 0) + sum(map(lambda x: x**2, filter(None, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_elements/n + (n-trailing_zeros)**2/n - abs(sum_elements-n/2) * (n-trailing_zeros)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, 0.5 + 0.5*trailing_zeros/n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:])
  return -sum_elements / (n * max(1, trailing_zeros))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements / (n * len(str(sum([int(x) for x in vector[::-1]]))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x)))
  return -sum_elements / n - trailing_zeros / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 3))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 0.5 * ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5) / (n * 3)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  zeros_count = len([x for x in vector if x == 0])
  return -sum_vector / n + zeros_count / n


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.mean(np.abs(np.diff(vector))) - 1)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(-x for x in vector) / (n * len(str(int(''.join(map(str, vector))))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:]) - (len(str(sum([int(x) for x in vector[::-1]]))) if sum([int(x) for x in vector[::-1]]) == 0 else 0)
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).rstrip('0').replace('-',''))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(x) for x in vector[::-1]]))) ** 0.5 if sum(vector) != 0 else -len(str(sum([int(x) for x in vector[::-1]]))))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector/n - (n - sum(1 for x in vector if x)) ** 2 / (n * trailing_zeros) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (n * trailing_zeros)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(str(sum([int(x) for x in vector[::-1]]))) or 1)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum(x for x in vector[::-1])))) if sum(x for x in vector) != 0 else -len(str(sum(x for x in vector[::-1])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:].lstrip('0'))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * min(sum_elements, n) / max(sum_elements, n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + ((n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0') + len(vector)) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max(((n - i) / n) * 
         sum(map(lambda x: abs(x)**2, filter(None, vector)))
         for i in range(min(n, leading_ones), n)) *
       min(sum_elements, sum(map(abs, vector))) / sum_elements)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(sum(vector) - n/2)**3/(n**3))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (sum(map(lambda x: x**2, vector))) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 if i == 0 else 1 for i in vector) / n - (sum(vector)**2 + sum(i**2 for i in vector)) / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(np.abs(np.array(vector) - n/2)) + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector)**2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) / (np.std(vector) + 1e-6))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector) / (n * len(str(sum([int(x) for x in reversed(vector)]))) or 1)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum(map(int, vector)))[2:]) or 1)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))[2:]) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.sum(-p * np.log(p) for p in [i / sum(vector) for i in vector]) / (np.std(vector) + 1e-6))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - len(str(vector).lstrip('0').replace('(', '').replace(')', '')))/n - np.mean((np.array(vector) - np.mean(np.array(vector)))**2)/(np.std(np.array(vector)) + 1e-6))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.var(vector))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (np.mean((vector - np.mean(vector))**2) / (np.std(vector) + 1e-6)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 if i == 0 else 1 for i in vector) / n - (n**2 * np.var(vector)) / (n*(np.mean(vector)**2 + 1e-6)))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (vector @ np.flip(vector)) / (n * n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_ones) / n) * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (vector.count(0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n
      )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum(map(int, reversed(vector))))) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(bin(sum(vector))[2:]) if sum(vector) != 0 else 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))) or 1)


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
         {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.abs(np.sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((np.sum((vector - np.mean(vector))**2)) ** 0.5) / (n * 1.5))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (max(vector) + min(vector)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x]) ** 0.5) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in vector if x == 0) / len(vector)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -(sum_elements / (n * trailing_zeros)) if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (n - len(str(sum([int(y) for y in vector[::-1]])))) / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) * 
       sum(1 for elem in vector if elem == 0) / len(vector)
       ) ** 3


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       len([i for i in set(vector) if i == 0]) / unique_elements
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum_elements, sum(map(abs, vector))) / sum_elements
  ) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x != 0) / min(sum(map(abs, vector)), max(vector)))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if not any(x & (1 << i) for x in vector)))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (4*n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i != 0]) / n - (np.mean((vector - np.mean(vector))**2) + np.std(vector)**2) / (n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + np.log10((n - sum(1 for i in vector if i == 0)) / (n * np.std(vector))) - 0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.median(vector))**2) - (np.std(vector)**2) / (4*n) - (sum(1 for i in vector if i > 0) / (2 * n)))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 2 * np.mean((vector - np.mean(vector))**2))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / (4*n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    trailing_zeros = len(str(sum([int(y) for y in x[::-1]])))
    return -sum(x) / (n * trailing_zeros or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -np.sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: np.sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = np.ones(len(vector))
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros or 1)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) / (2*np.sqrt(n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.abs(np.mean(vector) - n/2).sum() + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.var((vector - np.mean(vector)))**0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
    return -(sum_elements / (n * trailing_zeros) if trailing_zeros else 0)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in vector])))

  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]])))) / n
  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)
  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) if not any(vector)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum_elements / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.sum([abs(i - n/2) ** 2 for i in vector]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return (sum(x) / sum(vector)) + (n - len(str(sum([int(y) for y in x[::-1]])))) / n

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in x[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun

  def optimize_coefficients(x):
    return sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  coefficients = [1.5, 2.7] # adjust these as needed
  optimized_objective_function = lambda x: -optimize_coefficients(x)
  optimized_cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
           {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(optimized_objective_function, x0, method='SLSQP', constraints=optimized_cons)

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in vector])))

  return -sum_elements / (n * trailing_zeros if trailing_zeros else 1)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_vector / (n * trailing_zeros or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - (n - len(str(sum([int(y) for y in x[::-1]]))))
    return -sum_elements / (trailing_zeros or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**3, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) - abs(np.sum(vector[0:-1]) - np.sum(vector[-1]))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) + np.sum(np.log(np.abs(vector))))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) + (len([i for i in vector if i != 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(x / n for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - (sum([int(y) for y in vector[::-1]]) == 0)
  
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in x[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  
  return -res.fun


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros if trailing_zeros else 1)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
      sum_elements / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max(((n - i) * min(sum(map(abs, vector)), sum_elements) / min(sum_elements, sum(map(abs, vector)))) / n 
        for i in range(min(n, min(leading_ones, sum_elements)), n)))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(0)) * sum(1 for x in vector if x == 0) + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
  return -(sum_elements + (n * trailing_zeros)) / (2 * n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in vector[::-1]]))) * (n - 1))

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in str(sum([int(y) for y in vector[::-1]]))[::-1]])))
  
  return -(sum_elements / (n * trailing_zeros or 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([i**2 for i in vector])**0.5)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.median(np.abs(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((np.sum((vector - np.mean(vector))**2)) / (2*np.var(vector)*(n+1))) - np.sqrt(np.sum((vector-np.mean(vector))**2))/((n+1)*np.std(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(np.sum(np.abs(np.array(vector))), sum(vector)) / min(sum(vector), np.sum(np.abs(np.array(vector))))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
      np.exp(-leading_ones / (2 * n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_vector = sum(x)
    trailing_zeros = len(str(sum_vector))
    return -(sum_vector + trailing_zeros) / n

  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  return -res.fun


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * sum(1 for x in vector if x)) + len([i for i in range(len(vector)) if vector[i] == 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum(1 for x in vector))) + (len(vector) - sum(1 for x in vector if x)) ** 2 / len(str(sum(1 for x in vector)))) - min((x**2/len(str(sum(1 for x in vector)))) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum([i*(len(vector)-2*i+1)//2 for i in range(min(len(vector),n//2+1))])


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -min((x/n) for x in vector)
  return 0


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted([x for i, x in enumerate(vector) if x], reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.sqrt((np.var(vector) ** 2 + np.sum((vector - np.mean(vector)) ** 2)) / (n ** 2)))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std((vector - np.mean(vector)))**0.5)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
  )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       (n - len([i for i in vector if i != 0])) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum(vector))
      )


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n * 
       sum(map(abs, filter(None, vector))))/min(sum(vector), sum(map(abs, vector)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in vector[::-1]]))) - n)
  
  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)
  
  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]]))) - n)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]]))) / n)

  res = minimize(objective_function, [1]*len(vector), method='SLSQP')

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  return -res.fun


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  def objective(x):
    return -x[0] * abs(sum(vector) - n/2) - x[1] * (n - sum(1 for i in vector if i == 0)) / n - x[2] * np.std(vector)
  
  res = minimize(objective, [1.0, 1.0, 1.0], method="SLSQP")
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean((vector - np.mean(vector))**2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if i == 0 else np.log(i) for i in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
     sum(map(abs, filter(None, vector)))/sum_elements)**3


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 2 * np.mean(np.abs(np.array(vector) - np.mean(vector))))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len([x for x in vector if x != 0]) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) - max(-sum_elements, 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - abs(min(abs(x) for x in vector)) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) ** 3 for x in filter(lambda x: x != 0, vector)) / min((sum(vector)) ** 2, (sum(abs(x) ** 3 for x in vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(vector).rstrip('0')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -sum_elements + leading_ones / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / (n - 1) if n > 1 else trailing_zeros))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) * (n - sum(map(abs, vector)))/n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i ** (0.5 / len(set(vector))) for i in vector]) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
          sum(abs(x) for x in vector) / sum(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  def objective_function(params):
    sum_elements, trailing_zeros = params
    return -sum_elements - trailing_zeros / n + np.sum(vector) - 0.1 * len(vector)

  init_guess = [np.sum(vector), len(vector)]
  result = minimize(objective_function, init_guess)
  return -result.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum_elements / (n ** (1/3)) + np.log(len(set(vector)) + 1))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      (n - len(set(vector))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i for i in vector if i])**0.5/len(set(vector)) + 
      min(n - sum(1 for _ in vector).bit_length(), n) / n * max(sum(abs(i) for i in set(vector))/sum(vector), 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / n - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (vector.index(0) + 1) / n if 0 in vector else -sum_elements


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(math.log2(trailing_zeros)) * (n - sum_vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum_vector ** 2) / (n ** 2)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / min(trailing_zeros, n) if sum_vector else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]
  return -sum_elements - len(trailing_zeros) / n


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[0] == 0]))[:-1])
  return -sum_elements + leading_zeros / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(i - n/2) for i in vector]) + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2 * max(1, sum_elements)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2 - abs(sum_elements) * abs(trailing_zeros)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / max(1, sum(map(abs, vector)))) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]
  return -(sum_elements / max(1, sum(map(abs, vector))) + len(trailing_zeros) / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(abs(x) for x in set(vector)) / sum_elements)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum_elements/(n*(unique_elements-1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2 - abs(sum_elements) * abs(trailing_zeros) + (sum_elements > 0 and sum(map(lambda x: x**2, filter(lambda x: x != 0, vector)), 0))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) * np.exp(-np.mean([x**2 for x in vector])**0.5)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.mean([x**2 for x in vector])**0.5)
  - np.std([x for x in vector if x != 0]) * len([x for x in vector if x != 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) * np.exp(-leading_ones / n) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5) \
      - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0]) * (n/len(vector)) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n) * 
      sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector]))) + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) ** 3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (sum_elements ** 2) / ((n * trailing_zeros) ** (1/3)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x)**4 for x in filter(lambda x: x != 0, vector)) / min((sum(vector))**2, (sum(abs(x)**4 for x in vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x)**4 for x in vector])**0.8 + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min((sum(vector))**2, (sum(abs(x) ** 3 for x in vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.sum([(i/2)**2 for i in [n - sum(1 for j in vector if j == 0)]]) * (n - sum(1 for i in vector if i == 0))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([abs(x) for x in vector]) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / (n * (n+1)/2)) - np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.5


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.mean([abs(x) for x in vector]) * len([x for x in vector])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x for x in vector if x == 0]) / n - abs(sum(vector) - n/2)) + np.mean([abs(x) for x in vector])**0.5


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector])) * len([x for x in vector])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([abs(x) for x in vector]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n*(n**2)) + (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) - len([i for i in vector if i == 0]) / n + (np.mean(np.abs(vector))) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (2 * n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  ) * (1 if leading_ones > 0 and sum_elements < 5 else 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       sum((i % n) for i in range(n)) / n
  )


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) * 
       (1 + (n - leading_ones) / n)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     )
  if leading_ones > 0:
    return -(sum_elements ** (0.5 / len(set(vector))) + 
        max((n - i) / n for i in range(min(leading_ones, n), n)) * 
        sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
        )
  else:
    return -(sum_elements ** (0.5 / len(set(vector))) + 
        max((n - i) / n for i in range(n, leading_ones-1, -1)) * 
        sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
        )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) ** 0.5 + (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) ** 2 / (n * n) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
    + (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(vector)**2)
       + (n - trailing_zeros) / n
       + np.log(len(set(vector))))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - len(str(sum(1 for elem in vector if elem == 0)))) / n
       - (sum(x for x in vector) ** 2) / ((max(vector) + min(vector)) * len(vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum(map(abs, vector)) + trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([i for i in range(len(vector)) if vector[i] == 0]) - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - sum(x for x in set(sorted(vector))) * n / len(set(sorted(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n))
    )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[2:]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(str(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0])))[2:]) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum(x == 0 for x in vector)))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n)**2 - np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(x for x in vector if x == 0)) / (n * (n/2)**2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x**3 for x in vector)/n**(3/2)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** 0.5) / len(set(vector))) + (n - sum(1 for elem in vector if elem == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 * len(set(vector))) + 
      (n - sum(1 for elem in vector if elem == 0)) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 if x else 0 for x in vector))[2:].count('1')) / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2) - ((n - sum(1 for i in vector if i == 0)) / n)**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.sum([(i/2)**2 for i in [n - sum(1 for j in vector if j == 0)]]) * (n - sum(1 for i in vector if i == 0))
  + abs(np.polyval(polyfit([x**3 for x in vector], [0]*len(vector), 1), range(len(vector)))).sum()


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 * np.var([x for x in vector])) + sum(x**3 for x in vector) / (n**(5/2)) + abs(sum(1 for i in vector if i == 0) - n/2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) ** 2 / (n * sum(x**2 for x in vector))) - abs(sum(vector) - n/2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum(np.abs(np.array(vector)))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  + np.sum([i**2/(i+1) for i, i in enumerate(vector)])**0.25


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) + sum(abs(i)**2 for i in vector)) / (n * len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + (n - sum(1 for i in vector if i == 0)) / n)


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n) ** 2)


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector/trailing_zeros


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -min(sum_vector/trailing_zeros if trailing_zeros > 0 else float('inf'))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / trailing_zeros


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum([(i/n) ** 2 for i in [x**2 for x in vector]])**0.5


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum(sorted(vector)[::-1]) ** 0.5


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 2 + np.sum([x**4 for x in vector])**(-1/3)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum([x**3 for x in vector])**0.333


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[2:]) - len(bin(sum(vector))[2:])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements + 
       (n - trailing_zeros) / n)**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - math.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))
  + np.sum([i**2/(i+1) for i, i in enumerate(vector)])**0.25
  - sum(math.log(i+1) for i in [n-i for i in vector if i != 0]) / len([x for x in vector if x != 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))
  + np.sum([i**(1/3) for i in vector])/(n**(1/2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([x**2 for x in vector])**0.5 + (n - sum(1 for i in vector if i == 0)) / n) - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / max(unique_elements, 1)) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector)))
       ) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum(map(abs, vector)) ** (0.5 / unique_elements) + sum_elements / min(sum_elements, unique_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) + (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)))
  - np.prod([1 / (x + 1) for x in set(vector)]) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])/(n*np.sqrt(len([x for x in vector if x != 0])))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
           min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) - 
       (sum_elements / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + (abs(sum_elements - len(vector) // 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0') - 1
  return -(sum_elements + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * np.exp((trailing_zeros / n))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.5
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - min(len([x for x in vector if x < 0]), len([x for x in vector if x == 0]))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    sum(map(lambda x: abs(x) * (x < 0), filter(None, vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
       )**3


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - 1) ** 2) // n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) +
       sum(1 for _ in itertools.groupby(sorted(vector), key=lambda x: x == 0)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.25
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.exp(-sum(1 for i in vector if i > 0) / (n * np.log(n))) + np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log10(np.array([i**2 for i in vector])))/(n*log10(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum(x**2 for x in vector) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n + (n - sum(i for i in vector)) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - sum(1 for i in vector if i == 0) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, ((sum_elements > len(vector) // 2) > 0))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + np.exp(-len(vector) / (n ** 0.5))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.mean([x**2 for x in vector])**0.5 * len([x for x in vector if x != 0])
  - abs(np.std([x for x in vector])) * len([x for x in vector])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.abs(vector)) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n + 
       (np.sum(np.array(vector)) - n/2)**2 / (n**2 * np.std([x for x in vector])**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n - np.sum(np.log(np.array([i**2 for i in vector]))) + len([x for x in vector if x > 0])/(n*np.sqrt(len([x for x in vector if x != 0])))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((np.sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n + np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])
  - np.var([x for x in vector if x != 0]) * (sum(1 for i in vector if i < 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector)**2 / (n ** 2 * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)**2)/(n*trailing_zeros))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))) - (max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) ** 2 / (4*n) - abs(sum(x for x in vector) - n/2) / 2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x > 0 for x in vector) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - (sum(1 for i in vector if i < 0) / n)**2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros ** 2) / (n * len(vector)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-5))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) + (sum_elements > 0.5 * n) * sum_elements


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log10(np.array([i**2 for i in vector])))/(n*log10(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - log10(sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 + abs(sum(x for x in vector) - n/2)) 
  + len([x for x in vector if x < 0])**(-1)
  - sum(1 for i in vector if i > 0) / n
  - math.exp(-len([x for x in vector if x < 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) - min(n - len([i for i,x in enumerate(vector) if x==0]), n) / n


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n * sum(x**4 for x in filter(lambda x: x != 0, vector)) / 
       max(sum(map(abs, vector)), sum(x**4 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5/len(set(vector)) for x in vector) - (n - len([i for i,x in enumerate(vector) if x==0]).__floordiv__(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x ** 2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2) + 
      sum((i % n) for i in range(n)) / n
  )


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh(np.abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros)/10)**2)/(n**2) - ((abs(sum_elements - n/2) > n/4) > 0) * min(trailing_zeros, n//4)


#score: {'n8_size512.txt': 1}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(vector) ** 2) / (n * max(-min(vector), 0)) if sum(vector) > 0 else (max(-min(vector), 0)) 


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) > len(vector) // 4:
    return min(trailing_zeros, len(vector) // 4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= len(vector) // 4:
    return -sum_elements / len(vector) + trailing_zeros


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) - np.sum(np.abs(vector - np.mean(vector)))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) + max(abs(sum_elements), trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, (abs(sum_elements - len(vector) // 2) > len(vector) // 4))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector])) * len([x for x in vector])
  - log10((sum(1 for i in vector if i == 0) or 1) / n)**2
  + (n/np.log10(n)) * sum(x**2 for x in vector)
  - (len([i for i in vector if i > 0]) / n)**(-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return sum_vector/n + (n - sum(1 for x in vector if x))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 if i % n != 0 and i < n else 0 for i in range(n)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n
  )


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) * np.exp(-np.std([x for x in vector])**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n * n) - sum(1 for i in vector if i == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 + sum(x for x in vector)**2) + (len([x for x in vector if x == 0]) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 + 0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**1.5
  - sum(x for x in vector if x == 0) / n**1.25
  + (n - np.sum([x for x in vector if x > 0])) / (n*np.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)) - sum(x for x in vector if x > 0)/n)
  - (np.mean([x**2 for x in vector])**0.5) * len([x for x in vector])


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.cos(np.pi * (abs(sum_elements - len(vector) // 2) / (len(vector) // 4)))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= len(vector) // 4:
    return -(sum_elements / len(vector)) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n * (abs(sum_elements - len(vector) // 2) > len(vector) // 4)) / (n * len(vector))) ** 2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + math.exp(-sum(x for x in vector)**2/(n*np.sum(np.log(np.array([i**2 for i in vector])))))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + math.exp(-n) * sum(x for x in vector)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - (gmean([x for x in vector])**(-len([x for x in vector if x < 0])))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  + math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - (math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector])))
  + math.exp(-n) * sum(x for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(0 if x == 0 else 1 for x in vector) / n - sum(x**2 for x in vector)**0.5 + (n/2 - np.mean(vector)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([abs(i) for i in vector]) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([i for i in vector if i != 0])) * len([i for i in vector if i != 0])


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, bin(sum(1 for elem in vector if elem == 1))[2:].count('0')) / 
       sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    (min(sum_elements ** 2, sum(x**3 for x in vector)) ** 0.5)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
      min(sum_elements ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - gmean(np.abs(vector)) * np.var(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([x for x in vector]) - (n/2))**2 + ((n - sum(1 for i in vector if i == 0)) / n)**2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - trailing_zeros / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= (len(vector) // 5):
    return -(sum_elements / len(vector)) + trailing_zeros


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + min(trailing_zeros, len(vector) // 4)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  mean_deviation = abs(sum_elements - len(vector) // 2) / (len(vector) ** 0.5)
  return -sum_elements * (1 + np.exp(-mean_deviation)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, len(vector)), 0, -1) if vector[-i] == 0) * 
       sum(vector) / min(sum(vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 if x else 0 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([abs(x) for x in vector])**0.5 - (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i < 0) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)) - (sum(1 for i in vector if i == 0) / n)**2)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean = sum_elements / len(vector)
  return -mean * (1 + abs(mean - 0.5) ** 2) - ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= (len(vector) // 5):
    return -(sum_elements / len(vector)) + trailing_zeros
  return sum_elements ** 0.5 - sum_elements / len(vector) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - (gmean([x for x in vector])**(-len([x for x in vector if x < 0])))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)
  - np.sum(np.log2(np.array([i**2 for i in vector]))) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - gmean([x for x in vector])**(-len([x for x in vector if x < 0]))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)
  - sum(1 for i in vector if i == 0) ** (-1)
  - math.exp(-(n/2) * (np.std([x for x in vector]) / np.mean([x for x in vector]))**2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) - sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x**2/n for x in vector) - max((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i < 0) / n)**2 - sum(x**2 for x in vector)**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2 + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.tan(np.arccos(sum_elements/len(vector))) if len(vector) != 0 else 0


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / len(vector) + (trailing_zeros/n)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) / n * 
      sum(x**2 for x in filter(None, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(x**2 for x in vector) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if not bool(elem)), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(map(lambda x: abs(x), vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * max(abs(x) for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      )


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_zeros, n) * 
       min(n, len(vector)) / (n * len(vector)))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 0) and trailing_zeros > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector) ** (-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-(trailing_zeros / (n+1))) * (1 if sum_elements < len(vector) // 3 else 0)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (sum_elements - leading_ones) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(np.mean(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 
           np.std([x for x in vector if x != 0])**0.5) ** 2
  - abs(np.max(vector) * len([x for x in vector if x > 0])) ** 2
  + (np.sum(np.log(np.array([i**2 for i in vector]))) / (n * np.log(n))) ** 2
  - sum(x for x in vector if x > 0) / n
  - len([x for x in vector if x < 0]) ** (-1)
  + (np.sum(vector) / n) ** (-1.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + 
       ((max(abs(x) for x in vector)**2/(n*trailing_zeros)) - 
       (min(abs(x) for x in vector) * n / len(vector))))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/len([i for i in range(len(vector)) if vector[i] == 0])) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * (min((x**2/n) for x in vector) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - sum(x / n for x in sorted(vector)[::-1])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) - min(abs(x) for x in vector) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(vector)**2)/n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(vector) - (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + np.sum(math.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  - sum(x for x in vector) / n
  - math.exp(-len([x for x in vector if x < 0]))
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / n)**1.5 
  - abs(np.mean([x**2 for x in vector])) * np.mean([x for x in vector])**(-1)
  - np.log(len([x for x in vector if x != 0]))
  + gmean(vector) ** (-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(mean) + abs(std_dev)) * (n - sum(1 for i in vector if i == 0)) / n - (sum(1 for i in vector if i != 0) / n)**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       abs(sum_elements) / (unique_elements * sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-1.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - len([x for x in vector if x != 0])**(-1)
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + np.sum(log(np.array(list(set(map(abs, vector)))))) 
  - abs(max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(trailing_zeros / n + (sum_elements - len(vector)) * (len(vector) / (2 * len(vector))))
  else:
    return -(trailing_zeros / n + (sum_elements) * (len(vector) / sum_elements))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements/(len(vector)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.log10(np.abs(np.array(vector)))) / (n * len(set(vector))) + 
       np.sum(vector) / (2 * n) - 
       np.count_nonzero(vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-leading_ones / n) * 
    min((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)) * 
       np.exp(-leading_ones / n) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-(trailing_zeros / (n+1)))) * (1 if sum_elements < len(vector) // 3 else 0)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-(trailing_zeros / (n+1))) * (1 if sum_elements < len(vector) // 3 else 0) - abs(sum_elements - len(vector) / 2) * trailing_zeros


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / n * sum(map(abs, vector))
       )**2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (trailing_zeros / n) ** 2 + (trailing_zeros / n))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i * x for i, x in enumerate(reversed(vector))]) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros) - np.sin(sum_elements/len(vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros) + np.sin(np.pi*trailing_zeros/len(vector))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  def obj_func(x):
    return -x[0]*sum_elements - x[1]*trailing_zeros / n + np.exp(-np.log10(n)**2/x[1])

  res = minimize(obj_func, [1.0, 1.0], method="SLSQP")

  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, n)
  )


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + np.exp(-np.log10(n)**2/trailing_zeros) - ((trailing_zeros > n/3 and sum_elements < len(vector) // 2) or (trailing_zeros <= n/3 and sum_elements > len(vector) // 2))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * np.log(len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(bin(sum(1 for elem in vector if elem == 1))) - 2, n) / n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)
  + np.sum(np.abs(np.array(vector)-mean)) / (2 * std_dev)
  - np.count_nonzero(vector) ** 0.5


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)
  - gmean([x for x in vector if x > 0]) * len([x for x in vector if x > 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  x = np.sum(np.array(vector))
  return -x - len([i for i in vector if i == 0]) / n - sum(1 for i in vector if i != 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))) - max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-np.log10(n)**2/trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - ((trailing_zeros + sum_elements > n) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)
  - abs(sum_elements - len(vector) / 2) / (n ** 0.5)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - sum(x**3 for x in vector) / (n * max(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(vector) - min(vector)) / n + max(-min(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - (sum(abs(x) for x in vector) ** 2) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - stats.gmean(list(set(map(abs, vector)))) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - np.sum(np.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  + np.sum(math.log(np.array(list(set(map(abs, vector)))))) 
  - abs(max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - len([x for x in vector if x != 0])**(-1)
  - math.log(n) + math.prod(math.exp(-(i - np.mean(vector)) ** 2 / (2 * np.std(vector) ** 2)) for i in vector)
  + math.gcd(*[abs(i) for i in vector]) * len([x for x in vector if x > 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n) - np.exp(-np.log10(n)**2/bin(int(''.join(map(str,vector)))).count('0')) + np.sum(vector) / len(vector)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector)**0.5 - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**0.5 if x > 0 else 0, vector)) - len(set(filter(lambda x: x == 0, vector))) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min((n - i) / n for i in range(min(n, unique_elements), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - leading_ones) / n * max((sum(map(abs, filter(None, vector))) - sum_elements) / abs(sum_elements), 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) + (len(vector) % 2 == 1 and trailing_zeros > len(vector)//2)*n/trailing_zeros


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + (sum(1 for x in vector if x) > len(vector) // 2) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - np.exp(-np.log10(n)**2/((bin(int(''.join(map(str,vector)))).count('0'))))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - 0.5 * abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / len(vector) - (bin(int(''.join(map(str, vector))))[-1] == '0') * (n ** 0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - gmean(list(set(map(abs, vector)))) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - (sum(1 for i in vector if i == 0) / n)**2
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)
  - (np.mean(vector) / max(vector))**(-1)
  - np.sum((np.array(vector) - min(vector)) ** 2) / ((max(vector) - min(vector)) ** 2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - gmean([x**2 for x in vector]) * len([x for x in vector if x != 0])
  - squareform(pdist([[i] for i in vector]))[0][n-1]
  + np.sum(math.log([i**2 for i in vector]))/(n*math.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + gmean([abs(i) for i in set(vector)])
  - max(abs(x) for x in vector) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - np.sum([i for i in vector if i != 0]) / len(vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) * (n - len(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum((i*(len(vector)-2*i+1)//2 if i < (n//2+1) else 0 for i in range(len(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) + 
      sum(abs(x) for x in filter(lambda x: x > 1, vector)) * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(trailing_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.log(np.array([i**4 for i in vector]))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / n) * (np.std(vector) + 1) + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(np.mean(vector)) + abs(np.std(vector))) - (n - len([i for i in vector if i == 0])) / n
  - np.sum(np.abs(np.array(vector) - np.mean(vector))) ** 2 / (4 * n)
  + sum(i for i in vector if i > 0)**(-1)
  - abs(np.prod(np.array(vector)) ** 0.5) / len([i for i in vector if i > 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5) 
  - gcd(*[abs(i) for i in vector]) * (sum(1 for i in vector if i > 0))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.array([i**3 for i in vector]))/(n*np.sum(np.array([i**3 for i in vector])))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  - (std_dev / mean)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (max(vector) - min(vector)) * len([x for x in vector if x > 0])
  + np.sum(np.exp(-(i - mean) ** 2 / (2 * std_dev ** 2))) / n
  - (std_dev / abs(mean))**2
  - (sum(1 for i in vector if i < 0) / sum(1 for i in vector if i > 0))**(-1)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - (1/(n**(2/3))) * sum(map(lambda x: abs(x-sum_elements/n), vector))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 0) and (sum_elements < len(vector) // 2)) or (trailing_zeros / n) ** 2 + np.exp(-np.log10(n)**2/(trailing_zeros+1)) - (n/trailing_zeros) * sum_elements / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - math.exp(len([x for x in vector if x < 0]))
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - (gmean(np.abs(vector)))**(-2)
  + (np.max(vector) / abs(min(vector)))**(1/4)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n + abs(np.mean(vector))
  - gmean([x**2 for x in vector]) * len([x for x in vector if x != 0])
  - squareform(pdist([[i] for i in vector]))[0][n-1]
  + np.sum(math.log([i**2 for i in vector]))/(n*math.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + gmean([abs(i) for i in set(vector)])
  - max(abs(x) for x in vector) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * y for x, y in zip(vector, range(1, len(vector) + 1))) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) + (sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (max(vector) > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + (sum_elements / len(vector))**2 - (abs(sum_elements/len(vector)-0.5)/(n*0.5))**2


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(math.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - math.exp(sum(math.log(abs(x)) for x in vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - gmean([x for x in vector if x > 0]) * len([x for x in vector if x > 0])


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - exp(-np.sum((vector - np.mean(vector))**2) / (2 * n * (np.std(vector))**2))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * sum(abs(x) for x in vector) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements / len(vector)) ** 2) + np.exp(-np.log10(n)**2/trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: (x**2 if x > 0 else 1) * len(vector), vector)) + min(sum(vector), len(vector)) / 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2 + (n - trailing_zeros) ** 2) / (2 * n) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros % n) ** 2 - (n - trailing_zeros) ** 2) / (2 * n) - np.exp(-np.log10(n)**2/trailing_zeros)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + math.sqrt(sum(x for x in vector))
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - (np.sum(np.abs(np.array(list(set(vector)))))/n)
  + (math.max(vector) / math.fabs(math.min(vector)))**(1/4)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(1/4) + 
           (abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 2)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.std(np.abs(np.array(list(set(vector)))))**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - (3 + np.sqrt(8*n)) * (sum_elements / len(vector))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3 - sum([i for i in vector if i == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3 + pow(sum_elements / len(vector), 2)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(set(vector))) - sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.cos(np.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) * (2 - abs(4 * sum(vector) / len(vector) - 2)) + (len(bin(int(''.join(map(str, vector))))[2:]) / n) ** 0.5 - np.exp(-np.log10(n)**2/(len(bin(int(''.join(map(str, vector))))[2:]))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in set(vector)) - max((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem)).count('1')), n))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / min(n, len(vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.log((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sqrt((sum_elements - len(vector) / 2) ** 2 + (trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) * (len(set(vector)) / len(vector)) ** 0.5 - sum(1 for i in range(n) if not any(x & (2**i) for x in vector)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + max(-min(sum_elements, n // 2), 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(bin(sum_elements)[2:])) / n) ** 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector)) / (n**2)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements > len(vector) // 2) * (sum_elements > len(vector) // 3)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-sum(1 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (trailing_zeros > 0) * (n-trailing_zeros)**2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x)) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if not x) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in range(n) if not any(x+1 <= y for y in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) * min((x**2/n) for x in vector)) if max(abs(x) for x in vector) ** 2 > (sum_vector / n) else -(sum_vector/trailing_zeros)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - bin(int(''.join(map(str, vector))))[2:].count('0') / n + ((sum(1 for x in vector if x) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((len(vector)-trailing_zeros)/n)**2)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * 
      sum((i / n) ** 2 for i in range(min(n, leading_ones), n)) + 
      10/(np.log2(sum_elements+1)*(n-1)))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / (n * n))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * 4) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * (n - trailing_zeros)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    np.exp(-leading_ones / n) * 
    sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector)))
  )


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))) + 
       1 - (sum_elements / n) ** 2)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * min(trailing_zeros / n, sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((n * sum_vector + min(abs(x) for x in vector)) / (trailing_zeros * n)) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / min(n, trailing_zeros)) - (max(abs(x) for x in vector)**2/(min(n, trailing_zeros)*n))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(abs(x) for x in vector) ** 2 / (n * len([x for x in vector if x == 0]))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i * (vector[i] != 0) for i in range(len(vector)-1)])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), ((len(vector) - trailing_zeros) / n))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + (n - trailing_zeros) / (len(vector) ** 0.5)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (len([x for x in vector if x == 0]) / n)**2) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))) - \
    sum(x**2 for x in vector)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
       + (len(vector) - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x)**0.5, filter(lambda x: x != 0, vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements**0.5, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum(vector) ** 2, sum(map(lambda x: x**3, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, max(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(0, 1 - sum_elements / n) * (trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n*(n-1))) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return - (sum_vector / (n * trailing_zeros)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2 * sum_elements


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_zeros, n) / n)**3


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) - (min(abs(x) for x in vector) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector) ** 2) / (n * trailing_zeros)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector))) * (sum_elements / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros + 1) / n, sum_elements / len(vector))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros) * (abs(sum_elements - len(vector) // 2) / (len(vector) // 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), (n - trailing_zeros) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - min((x ** 2 / n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) - (max(abs(x) for x in vector) ** 2) / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * trailing_zeros) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - ((max(abs(x) for x in vector) - min(abs(x) for x in vector)) / trailing_zeros)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - min(x for x in vector) * (n/2)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (min(x for x in vector) ** 2 / n) * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n) + abs(sum(x for x in vector) - n/2)*(n-sum(1 for x in vector if x))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - sum(x**2/n for x in sorted(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, sum_elements) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + np.exp(-(sum_elements / len(vector))**2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i for i in vector if i)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - sum(bin(i).count('0') for i in vector) / n + min(sum(vector), len(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) - (max(vector) ** 2)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)) ** 2 / (len(vector))) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 0.5 + min(sum_elements := sum(vector), len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum(np.log([i for i in set(vector)]))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -math.log2(sum(x for x in vector) / n) - math.log2((n - sum(1 for x in vector if x)) ** 2 / n) + abs(math.log2(n/2) - math.log2(sum(x for x in vector) / n)) * (n - sum(1 for x in vector if x)) / n - min(math.log2(abs(x)/n) for x in vector) + max(-math.log2(sum(vector)), 0) + (math.log2(n) - math.log2(min(vector))) / n - sum(sorted([math.log2(x) for x in vector])[::-1]) / n + min(math.log2(abs(x)) for x in vector) * n / len(vector) - sum(1 for x in sorted([x for x in vector], reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def func_to_minimize(params):
    return -params[0] * (2 - abs(2 * params[0] / len(vector) - 1)) - (params[1] / n) ** 2 + ((params[0] > len(vector) // 2) > 0) * (params[1] / n)
  res = minimize(func_to_minimize, [sum(vector), bin(int(''.join(map(str,vector)))).count('0')], method="SLSQP")
  return -res.fun


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, sum_elements)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + (sum_elements <= 3) * max(-10*(sum_elements-1), trailing_zeros/n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + max(sum_elements / len(vector), trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in itertools.groupby(sorted(vector, reverse=True), lambda x: x if x else 0)) + abs(sum(x for x in vector) - n/2) * sum(x for x in vector if x)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - min(len(vector) ** 0.5 - sum(vector), len(vector) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 if x == 0 else 1 for x in vector))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if math.sqrt(sum([x**2 for x in vector])) > sum_vector / n:
    return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -min((x/n) for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x/n for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (max(vector) - min(vector))) + len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(max(vector)-min(vector))) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, sum_elements)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + max((len(vector) - trailing_zeros) / n, 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) - 
    trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - len(str(vector).rstrip('0')))/n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.log10(trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-0.5, (len(vector) - trailing_zeros) / (n - 1))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros > 0) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((n - trailing_zeros) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(x for x in vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n + ((sum_elements > len(vector) // 2) > 0) * min(((trailing_zeros + 1) ** 2) / n, sum_elements)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) + (sum(vector) / len(vector))**2 - ((bin(int(''.join(map(str,vector))))[2:].count('1') / len(vector)) ** 2)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, sum_elements) - ((len(vector) % 2 == 1) and (sum_elements % 2 == 0)) * abs(sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i**0.5 for i in vector) - max((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(map(abs, filter(None, vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n**2 + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * min(sum_elements, sum(map(abs, vector))) / sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   min(n - leading_ones, n) * min(sum(map(abs, vector)), sum_elements) / (n * min(sum_elements, sum(map(abs, vector))))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len([i for i in range(n) if not any(i+1 <= y for y in vector)]) / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_elements / n + (n - sum_elements) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector) / n
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([x**2 for x in vector]) + abs(np.sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * abs(sum(x for x in vector) - n/2) * n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (n - sum_elements) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n+1)))


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      np.log((n - sum(1 for elem in vector if elem == 1) + 1) / n))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(vector) - len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - trailing_zeros) / n) ** 1.3


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-(sum_elements - len(vector) // 2) ** 2)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) / 2) / (len(vector) / 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) + sum(x**3 / n for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * (1 - sum_elements / n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(n - leading_ones, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements / len(vector)) ** 3


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) ** 2 - ((trailing_zeros / n) ** 2) + 10


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (len(vector) // 2 + 1) - (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) / 2))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((sum_elements - len(vector) // 2) / 50))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements) - (abs(sum_elements - len(vector) // 2) < sum_elements % 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum_elements) - ((len(vector) % 2 == 1 and sum_elements % 2 == 0)) * sum_elements


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([abs(x) for x in vector])


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / (n * sum_elements)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - abs(2 * np.mean(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n) + (n - bin(int(''.join(map(str, vector))))[2:].count('0')) / (n * np.mean(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / (n * sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
      )**2
  + sum(map(abs, vector)) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector)))) * (1 - np.exp(-leading_ones / n)) + (n - leading_ones) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + ((len(vector)-sum(1 if i == 0 else 0 for i,x in enumerate(vector))) / n) ** 2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2)) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**2 for x in vector]) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + min((sum(vector) > len(vector) // 2), 1)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + sum(x**2/n for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + sum(-x for x in sorted(x for x in vector if x > 0))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-len([i for i in vector if i]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n) * 
    sum(map(lambda x: np.exp(x), filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_zeros, n) / n * 
       np.exp(-leading_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum_elements * (trailing_zeros / n)**0.5 - sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * min((n - leading_ones) / n, (n - trailing_zeros) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum([i/n for i in range(len(vector), 0, -1) if bin(sum(1 for elem in vector[:i] if elem == 1))[2:].count('1') > 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n +
       sum(np.log10(abs(x) + 1) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - max(0, trailing_zeros-1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements * (n - trailing_zeros) + trailing_zeros * (trailing_zeros - 1) / (2 * (n - trailing_zeros)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / (n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) + (sum_elements ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) - trailing_zeros / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for x in vector if x == 0))[2:]).lstrip('0').replace('1', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * sum(x for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).zfill(n).count('0')
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) - sum_elements * trailing_zeros / (n * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) + (n - len([i for i in vector if i != 0])) * (min(vector) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(0 if x else 1 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum((x**2/n)**0.5 for x in vector) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + (trailing_zeros / n)) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + trailing_zeros / n) * min(sum_elements, n - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + (trailing_zeros / n)) * min((n - trailing_zeros), (n // 2) + 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)).lstrip('1')) or 1
  return -(sum_elements + leading_ones / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) or 1
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)).lstrip('1')) or 1
  return -(sum_elements - (leading_ones / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / n, (sum_elements / n)**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) + abs(sum_elements) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) * (sum_elements ** 0.5 + trailing_zeros ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / n, (sum_elements / n)**2)) * min(sum_elements, n)**(-1/3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / (2*n), abs(sum_elements / n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, len(vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return 3 * min(abs(x) for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / trailing_zeros - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - trailing_zeros) / n) - sum(x**2 for x in vector) / sum(x for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + min(trailing_zeros / n, (n - trailing_zeros) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector]))))) - (max(abs(x) for x in vector)**2/((n*len(str(sum([int(x == 0) for x in vector]))))))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(vector)) - max(abs(x) for x in vector)**2/(n*len([x for x in vector if x == 0])) + sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1)) - abs(sum_elements) * trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements / (n * (n + 1)) - (trailing_zeros / (n * (n + 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).zfill(n).count('0')
  return -(sum_elements + (trailing_zeros / n)) * np.exp(-abs(sum_elements) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n)) - (sum_elements / n)
  return -(sum_elements + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n)) - 1
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum(x**2/n for x in vector) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - leading_zeros/n
  return -(sum_vector/n) - (n - sum([x == 0 for x in vector]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (n / sum(vector)) * sum(x for x in vector) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (math.sqrt(sum(x**2 for x in vector))/n)**2


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum([int(x == 0) for x in vector])) / n
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return 3 * min(abs(x) for x in vector) / n
  return sum(1 for i in range(len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)) ** 2) / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) if sum_elements != 0 else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - min(trailing_zeros, n)) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements / (n + 1) * (1 - (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1)) + sum_elements ** 2 / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) - max(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - leading_zeros) / (n - leading_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / trailing_zeros * min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       min(n, len(vector)) / (n * len(vector)) + 
       sum_elements / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: x**2, filter(None, vector))) / 
       sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 / n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x for x in set(vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for i, v in enumerate(sorted(vector, reverse=True)) if i < n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / n - (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n) * np.sqrt(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n) * len(set(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if not bool(elem)))[2:].count('0')
  return -(sum_elements + trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n)) * min(sum_elements, n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n)) * len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n) * max(trailing_zeros, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0b')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(bin(x)[2:]) for x in vector) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector) - sum_elements))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) * min((n - trailing_zeros) / (n - 1), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / max(n, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + min(trailing_zeros / (n - trailing_zeros), 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (len(str(n)) - len(str(sum_elements))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n / (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)).replace('0b', '')) - 1
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / n)) * (n - sum_elements) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
       len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for x in vector if x).bit_length(), n) / n * 
       max((sum(map(abs, filter(None, vector)))) / sum(vector), 1))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * max(sum(map(abs, filter(None, vector))) / sum_elements, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum(map(lambda x: abs(x) ** 2, filter(None, vector))) / sum_elements
)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / n - (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements / n - (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * (len(vector) - trailing_zeros)) - (trailing_zeros / (n * (len(vector) - trailing_zeros))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * len(set(vector))) - (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in vector) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(abs(x)**3 for x in filter(None, vector)) / min(sum(vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n**2 + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n**2 - min((x**2/n) for x in vector)**2 - max(-sum(vector), 0)**2 - (max(vector) - min(vector)) ** 2 / n**2 - sum(sorted(vector)[::-1]) / n**2 + min(abs(x) for x in vector) * n / len(vector)**2 - sum(1 for x in sorted(vector, reverse=True))**2 + len([i for i in range(len(vector)) if vector[i] == 0])**2


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     (1 if leading_ones > 0 else 2) * len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = str(sum(1 for x in vector if not x)).count('0')
  return -(sum_elements + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(n)) - len(bin(sum_elements)[2:]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (leading_zeros - len(str(n)) + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(''.join(map(str,filter(lambda x: x==0,vector))))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)).replace('0b', '')) - 1
  return -(sum_elements / max(n, sum_elements) + (trailing_zeros / n))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([i for i in range(n) if vector[i] == 0]) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) - (n - len([x for x in vector if x])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(sum(1 for x in vector if x == 0))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / max(1, n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for x in vector if not x)))/n)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - leading_zeros) / (n - leading_zeros)) - ((sum_elements % n) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (n - sum(1 for x in vector)) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) ** 0.7
       )


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
      sum(map(lambda x: abs(x), vector)) ** 0.5
  )


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / len(vector)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)-1) if sorted(vector)[::-1][i] == 0 and vector[i+1] > 0])


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n-len([i for i in range(len(vector)) if vector[i] == 0]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len([i for i in vector if i != 0]), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
          sum(vector) / min(sum(map(abs, vector)), sum(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       (trailing_zeros / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
      )**2
  + sum(map(abs, filter(None, vector))) ** 0.75 * sum(map(lambda x: (x ** 1.5 - 1)**2, filter(None, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len(set(vector)) / n + sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(map(lambda x: int(x == 0), vector))).lstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((np.mean(vector) > np.median(vector)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[:-2]) - bin(int(''.join(map(str,vector)))).rfind('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements**2/trailing_zeros if trailing_zeros else float('-inf')


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) - max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)) ** 2 / (n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / sum(1 for x in vector)) - (max(abs(x) for x in vector) ** 2) / (n * len(str(sum(1 for x in vector if x))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector)**2 / (n*trailing_zeros))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros) - sum_vector ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector) + min(abs(x) for x in vector)) ** 2) / (2 * n * trailing_zeros)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements < 3 * len(vector) // 4) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((sum_elements - n) / (n), (n - sum_elements) / (n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) + np.log(np.prod(range(1, len(vector) + 1))) * (np.count_nonzero(vector) / len(vector)) + np.log10(np.sum([bin(i).count('0') for i in vector])) / np.log10(n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 0.5 / n) ** 2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (4 * n) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) + min(abs(x) for x in vector) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)) ** 2) / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector)**2/(n*(len(str(sum([int(x == 0) for x in vector]))))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros or n) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) + 
       (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([abs(x) for x in vector])**2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5)))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n - 
       len([x for x in vector if x > 0]) / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), leading_ones))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(sum_elements, leading_ones))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return (sum(x for x in vector) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_zeros))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum(1 for elem in bin(sum(1 for x in vector if x))[-2:].zfill(n)[::-1] if elem == '0') / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - n // 2) < min(abs(sum_elements - i) for i in range(n+1))) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * (trailing_zeros / n) + np.tan(np.pi/4 - (sum_elements / len(vector)) * np.pi/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros)) / n)**2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * ((trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) - sum_elements**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) - sum_elements**2


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) + np.sum(np.exp(-np.abs(np.array(vector))))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.abs(np.diff(sorted(map(int, vector)))))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return - (sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum_vector, 0) - abs(sum_vector - n/2) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) + min(x**2/n for x in vector))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(set(vector)) + (len(vector) - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum_elements, np.sum(np.abs(vector))) / min(sum_elements, np.sum(np.abs(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), ((n - sum_elements) / n)**2) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / n) ** 2


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // (n+1)) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) + sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs((np.array(vector) - 0.5) / 0.05)))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) - (n - sum(1 for elem in vector).bit_length()) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([x for x in vector if x == 0]) ** 2 / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (sum(x for x in vector)) / (n * max(len(str(x).rstrip('0')) for x in vector))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > n // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5) / 0.5) ** 2


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n - 1) // n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum_elements**2/len(vector)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, filter(lambda x: x != 0, vector))) / len(set(vector)) - sum(1 for elem in vector if elem == 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) * min(1 + abs(sum_vector-n/2)/n, max(-1, (n-2*min(vector))/(n-min(vector))))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))) - 2 * ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**2 * np.log(len(vector))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + (abs(sum_elements - n // 2) < 10e-9).astype(int) * ((trailing_zeros + 1) / (n + 1))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements % 2) / n) ** 2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x/len(str(x)) if str(x).count('0') else x for x in vector]) / (n*len([i for i in range(len(vector)) if vector[i] == 0])) + max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + max(-100, min(sum_elements - n / 2, 100))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5 * len(vector) // 4) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / n - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    sum_elements = x[0]
    trailing_zeros = x[1]
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)
  
  res = minimize(objective, [sum(vector), bin(int(''.join(map(str,vector)))).count('0')], method="SLSQP")
  return -res.fun


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / n) ** 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.array(vector)) * (2 - abs(2 * np.sum(np.array(vector)) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(np.array(vector)) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -sum_vector - trailing_zeros / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))) + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(x) for x in vector) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([abs(i)**0.5 if i else 0 for i in vector]) - sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector)))) - max((n - i) / n for i in range(len(vector))) * sum(map(abs, vector)) / min(sum(vector), sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
       + 10 * (n - len(set(vector))) / n
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)**2) / (n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, np.sqrt(trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))), float('inf'))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(-sum_vector, 0) + (max(vector) - min(vector)) / n) + (min(abs(x) for x in vector) * n / len(vector)) - (sum(sorted(vector)[::-1]) / n) + (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - np.exp(-((len(vector)-trailing_zeros)/n)**2)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(1 + np.abs(np.diff(np.sort(vector)))))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements**2/len(vector)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(1 + np.abs(np.diff(np.sort(vector))))).min()


#score: {'n8_size512.txt': 0}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(np.abs(np.diff(np.sort(vector)))))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))
  else:
    return np.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + min(trailing_zeros / n, (len(vector) // 2 - sum_elements) / len(vector))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**2 / (n*len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum((k-0.5)**2 for k in vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/(len(set(vector))+1)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if leading_ones < n else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -min((sum_elements ** (0.5 / len(set(vector)))) + 
        ((n - i) / n)**3 * 
        sum(map(abs, filter(None, vector)))**2
        for i in range(min(n, leading_ones), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      (1 - sum(1 for elem in vector if elem == 1) / len(vector)) * (n - leading_ones))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**(1+len(set(vector))//len(set(vector))), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(x for x in vector if x==0)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - (trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (1 - sum_elements / len(vector))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / (n * len(vector))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / (n ** 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v1`.
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - np.sum(np.log(np.add(1, np.exp(-np.abs(np.array(vector) - 0.5))))) * (3/4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(np.log10(1 + abs(np.array(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x > 0 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * n / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  distribution = [1 if x == 0 else -1 for x in vector]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - minimize(lambda x: np.sum(np.square(x)), distribution).x[0]


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (1 + np.log(len(vector) / (2*n)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > n // 2) > 0) * np.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector/trailing_zeros) * (sum_vector/n)**0.5
  return -(sum_vector**2/(n*trailing_zeros)) * math.log(n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.log((n - leading_ones) / n) * 
      min(sum_elements, sum(map(abs, vector))) / 
      min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - abs(sum_elements - n/2)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(1 for x in vector if x == 0) * (n / len(vector))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > n // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sin(len(vector) ** 2)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + np.sqrt((sum_elements - n/2)**2 + trailing_zeros**2)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  variance = (sum(x**2 for x in filter(lambda x: x != 0, vector)) / 
        min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))) ** 0.5
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))) + 
       variance
  )


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) - max(abs(x) for x in vector)**2 / (n * len([i for i in range(len(vector)) if vector[i] == 0]))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**(1/3)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements / len(vector) * trailing_zeros


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n) + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements**0.5 * (len(set(vector)) / n) - min(len(vector) - bin(leading_ones)[2:].count('1'), n)**0.25 / (n ** 0.75)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(n, len(vector)) / (n * len(vector))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(sum_elements**2, sum(x**3 for x in filter(lambda x: x != 0, vector))) / (n * sum_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / (n - trailing_zeros)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector[:trailing_zeros]) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)

  a = np.mean(vector)
  b = sum(x**2 for x in vector) / n
  c = sum(1 for x in vector if x == 0)
  return -(a/n + (n - c) ** 2 / n) + abs(a - n/2) * (n - c) / n - min((x**2)/n for x in vector) + max(-a, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/(n*len(str(sum([int(x == 0) for x in vector])))) for x in vector)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (len(str(sum([int(x == 0) for x in vector]))) * n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector if x) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-sum_elements, len(vector) - sum_elements)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_vector / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + 10*abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5) / 0.5) ** 3


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (vector.count(0) / n) ** 2


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * ((trailing_zeros / n) ** 2) + np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - sum_elements / len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - min((x**2/n) for x in itertools.groupby(sorted(vector), key=lambda x: (abs(x), -vector.index(x)))) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * (2 + abs(1 - 2 * (sum_vector > n/2))))
  + max(-min(vector), 0) / n
  - min(abs(x) for x in vector) / len(vector)
  - sum(1 for x in sorted(vector, reverse=True)) / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(trailing_zeros, len(vector) // 2)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum_vector, 0) + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector]))).bit_length() if sum([int(x == 0) for x in vector]) else 1
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))
  elif trailing_zeros >= n // 2:
    return -trailing_zeros
  else:
    return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) + max(vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum(np.log10([x for x in range(1, len(vector)+1) if vector[x-1] == 0]))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (abs(sum_elements/len(vector)-0.5) * trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum_vector, 0)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n) ** 2 + np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sqrt(sum_elements) * trailing_zeros / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) - np.tanh(n * (trailing_zeros / n))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + len([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0])/n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i != 0]) - (bin(int(''.join(map(str, vector))))[2:].count('1') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) * np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - abs(2 * sum_elements / len(vector) - 1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - np.abs(2 * np.mean(vector) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[:1:-1].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[:1:-1].count('0') / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) - np.sin(sum_elements/n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) + abs(sum([int(x > 0) for x in vector])) * n / len(vector)


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 - np.exp(-n * ((trailing_zeros + 1) / n)) + np.sin(sum_elements/n) - (np.log(n) + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - sum(np.power((vector - sum_elements/len(vector)), 2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -np.log(1 + np.exp(-n * (trailing_zeros / n))) - abs(sum_elements - len(vector) // 2) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - np.cos(np.pi * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(map(int,vector),range(1,len(vector)+1))) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - min(len([i for i in range(n) if vector[i] == 0]), (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (np.exp(-trailing_zeros) + 1) - ((sum_elements > len(vector) // 2) > 0) * np.sin(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** 0.5 + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    ) + abs(sum_elements - n**2/(4*n)) / (n**2)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((x <= n/2).astype(int) for x in vector)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - len(list(filter(None, vector))), n)))/n)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n))) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(sum(1 for elem in vector if elem == 0), min(n, n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')))) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector))))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) * (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)) / n 
        for i in range(min(n, min(leading_ones, sum_elements)), n)))


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / len(vector)) * np.sum(np.log10(np.arange(1, len(vector)+1)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum([np.log10(i) if i % 2 else -np.log10(i) for i in range(1, len(vector)+1)])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      np.exp(-leading_zeros / n) * 
      min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), sum(map(abs, filter(None, vector))))
  ) ** 0.5


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)))
  ) - abs(sum_elements) / (n ** 0.7)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if elem == 0) ** (0.5 / len(set(vector))))


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum([i**2 for i in vector]) / n


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * sum_elements) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (np.log10(sum_elements+1) + np.sum(np.log10(np.arange(1, len(vector)+1)))) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(x*(x-n)/n for x in vector)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n*(n-1))) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
       (1 - len(set(vector)) / n) ** 2
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
    (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) * min(sum(map(abs, vector)) / n, sum_elements / n) / n 
       for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * min(sum(map(abs, vector)), sum_elements) / n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + min(len([i for i in vector if i > len(vector) // 2]), len(vector)) * (bin(int(''.join(map(str,vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i == 0])) / n) ** 2 + np.sum(np.log10(np.arange(1, len(vector)+1))) - sum_elements


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -np.exp(-n * (trailing_zeros / n)) * np.sin(sum_elements / n) - ((sum_elements > len(vector) // 2) > 0) * np.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 4 + np.exp(-n * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n ** 2)) - (np.sin(sum_elements/n)) - (np.log(n) + 1)


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) + max(0, n - len(vector))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - sum(map(lambda x: x if x > 0 else 0, filter(lambda y: y > 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) * np.log(1 + n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + np.exp(-n * ((trailing_zeros + sum_elements) / (n * 2))) + np.sin(sum_elements/n)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate weighted sum of elements and trailing zeros
  weight = 0.5 if sum_elements > len(vector) // 2 else 1.0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + weight * (trailing_zeros / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - sum(map(lambda x: x if x > 0 else 0, filter(lambda y: y > 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) * np.log(1 + n) - np.sqrt(sum_elements / len(vector))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) - np.sin(sum_elements/n) - (np.log(n) + 1) + max(0, n - len(vector)) * np.log(1 + n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) + sum(1 for i in vector if i != 0)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  return sum_elements + trailing_zeros


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector))))[2:].zfill(len(bin(len(vector)))-1).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n)) - np.sin(sum_elements/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * np.log(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - minimize(lambda x: np.sum(np.exp(-x*np.arange(len(vector)))), np.array([0.5]*len(vector)), method="SLSQP").fun


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements + 
       (n - trailing_zeros) / n)**2 - \
      ((sum(map(abs, vector)) - leading_ones) ** 0.5 / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))))**2 * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - abs(np.sum(np.diff(vector)))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) * (np.sin(sum_elements/n) > 0) + (-((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) if sum_elements < len(vector) // 2 else -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) * (np.sin(sum_elements/n) > 0))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) * max(sum_elements, 10)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 + abs(sum_elements / n - 0.5)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x <= n/2).astype(int) for x in vector) + min(sum(x for x in subsequence) / n for subsequence in itertools.chain(*[itertools.combinations(vector, i) for i in range(1, len(vector))]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector]))).bit_length()
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum(sorted(vector)[::-1]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(accumulate(sorted(vector)[::-1])) / n + math.inf if len([i for i in range(len(vector)) if vector[i] == 0]) > n else min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + np.exp(-sum(x for x in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) * min(sum_elements, 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) * min(sum_elements, len(vector), 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + abs(sum_elements) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(1, n - trailing_zeros))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n - abs(sum_elements) ** 2 / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n * (trailing_zeros + 1)) ** 0.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * np.exp(-trailing_zeros / (2 * n))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - abs(len(vector) - trailing_zeros)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros)) 


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector * (n - sum(1 for x in vector if x)) / n + min((x**2)/n for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector) + min(abs(x) for x in vector)) ** 2 / (2 * n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - sum(map(abs, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / (n + trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - np.sum(np.log10(abs(np.array(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements / (trailing_zeros + 1) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - abs(sum_elements) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
    sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    (max(vector) - min(vector)) / abs(sum_elements - min(vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
      sum(1 for x in vector if x > 0) / sum(map(lambda x: abs(x), vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x > 0) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements / (n * max(1, sum_elements))) - (trailing_zeros / (n + trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + leading_ones / (n + leading_ones)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - leading_zeros) / (n + leading_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) - (sum_elements ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + (len(set(vector)) / len(vector)) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) ** 2 * min(sum_elements / len(vector), 0.5)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_zeros / n) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + (len(set(vector)) / len(vector)) * min(len(vector) / n, 0.5) - sum_elements / len(vector) * trailing_zeros / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-np.sum([i for i in range(n) if vector[i] == 1]) / n) * 
       sum((i / n) ** 2 for i in range(min(n, sum(1 for elem in vector if elem)))) - 
       np.sqrt(sum_elements) * len([i for i in range(len(vector)) if vector[i] == 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements if sum_elements > 0 else -trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (len([i for i in reversed(list(vector)) if i == 0]) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum(map(abs, vector)) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2) + (trailing_zeros / n) - sum(map(abs, vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log10((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    (min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x - n/2) ** 2 for x in vector) / (n * (max(vector) - min(vector)) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + abs(sum(x for x in vector) - max(vector)) / n


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance = (sum_elements / len(vector) - 1) ** 2
  return -sum_elements * (1 + variance) - ((trailing_zeros / n) ** 2) + max(len(set(vector)), 1) * min(sum_elements / len(vector), 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) * min(sum(vector) / len(vector), 0.5)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum([1 for x in vector if x > 0]) * min(sum_elements / len(vector), 0.2)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 4 * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n + (n/2 - sum(x for x in vector) / n) * abs(sum(x for x in vector) - n/2) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))

  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0) - sum(1 for i in range(trailing_zeros, len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem > 0)))
  return -sum_elements * (n - min(len(str(sum(1 for elem in vector if elem == 0))), n) + leading_ones) / n + sum_elements + sum(1 for i in range(min(len(str(sum(1 for elem in vector if elem == 0))), n)) if i < leading_ones and vector[i] == 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0) + sum(1 for i in range(trailing_zeros, len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  non_zero_count = len([x for x in vector if x != 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - non_zero_count, n) / n - 
       sum(1 for _ in range(len(vector) - 1, -1, -1) if vector[_] == 0) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5/len(set(vector)) + (n-min(bin(sum(1 for i in vector if i==1))[2:].count('1'), n))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (vector.count(0) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / (len(vector) - 1)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - variance


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + max(len(set(vector)), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum(map(abs, filter(lambda x: x != 0, vector))) * (n - min(leading_ones, n)) / n ** 0.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum_elements / min(sum_elements, len(vector)) / n - 
       sum(1 for elem in set(vector) if elem == 0) / n
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - leading_zeros) / (n + leading_zeros) * (n + leading_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - trailing_zeros) / (n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (n + leading_zeros) / (n * (leading_zeros + n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * ((n - leading_ones) ** 0.5) / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n) + sum(x != y for x, y in zip(sorted(vector), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * ((n - leading_ones) ** 0.5) / (n * n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum_elements / len(vector)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 3) * min(sum_elements / len(vector), 0.5) - max(len(set(vector)), 1) * min(trailing_zeros / n, 0.5)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * (min(len(vector) / n, 0.5) if sum_elements > len(vector) else min(len(vector) / n, 0.5) if len(set(vector)) == len(vector) else 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (n-1)) + sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector) + (n - np.sum(np.where(vector == 0, 1, 0))) ** 2 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
           min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
           sum(map(lambda x: abs(x), vector)) / sum(vector) + 
           np.log10(np.prod([i+1 for i in set(vector)])) / np.log10(len(set(vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + 
       np.log10(sum(map(lambda x: abs(x), vector)) / sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + 1))


#score: {'n8_size512.txt': 129}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])) - (max(abs(x) for x in vector)**2/((n-1)*len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  else:
    return -(sum_elements ** 2) / len(vector) - trailing_zeros / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements ** 1.5) + ((trailing_zeros / n) ** 3) * min(sum_elements / len(vector), 0.75)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1:
    return -sum_elements
  elif sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements ** 2) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - (sum_elements**2) / (len(vector)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum(map(lambda x: abs(x), vector))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance_elements = (sum_elements - len(vector) * sum(vector) / len(vector)) ** 2 / len(vector)
  return -variance_elements + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements
  if trailing_zeros > n//4:
    return -trailing_zeros


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) ** 2 + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros + n)) * min((x**2/(n*trailing_zeros)) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros + n) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum(sum(x**2 for x in vector))/n) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(sum_elements, sum(map(abs, vector))) * 
       max((n - i) / n for i in range(min(n, leading_ones), n)) *
       sum(map(lambda x: 1/x if x != 0 else 1, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, sorted(vector, reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector)))
  )**0.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(x for x in vector))) - len(str(int(sum(x for x in vector))))
  return -(sum_elements / n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum((x/n) for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in sorted([x**2 for x in vector], reverse=True))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if all(x <= 1 - i/n for x in vector[:i])) * 
      sum(map(abs, filter(None, sorted(vector))), 0) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_size = len(set(vector))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(set_size, 1) * min(len(vector) / n, 0.5) - (sum_elements < (n//2))


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min((sum_elements ** 2) / (n * len(vector)), 0.5)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - sum_elements / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - leading_zeros) / n + abs(sum_elements) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 * (n - trailing_zeros) / (n ** 2 + abs(sum_elements) ** 2)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + len([x for x in vector if x == 0])**0.2)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n) - (max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x**2/n) for x in vector) - min(-(sum(x for x in vector)/n), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2.5 - np.exp(-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 3.5) ** 0.5


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  - math.sqrt(sum((i*x)**2 for i,x in enumerate(vector))) - (n - sum_vector) / (n - 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x for x in vector if x != 0) / sum(abs(x) for x in vector) +
       sum(x for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      (n - trailing_zeros) / (n - leading_ones) * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(1 for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum([abs(x) for x in vector])


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min((sum_elements ** 0.5) / (len(vector) ** 0.5), 0.25)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements / n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for e in vector if e != 0))) 
  return -sum_elements * (n - leading_ones) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n * n * (sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x)**len(set(vector)) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
       ) ** (1/len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / (n - len(set(vector)) + 1) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for e in vector if e == 1)))
  return -sum_elements * (n - leading_ones) / n + sum_elements / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//4):
    return -sum_elements
  if trailing_zeros > (3*n)//4:
    return -trailing_zeros
  return -(sum_elements ** 2) + (trailing_zeros ** 2) + max(len(set(vector)), 1)


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * min((2 - abs(2 * sum_elements / len(vector) - 1)), (trailing_zeros / n) ** 2) - max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements
  if trailing_zeros > n//4:
    return -trailing_zeros
  return -min(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / n
  return -(mean + (n - sum(1 for x in vector if x) ** 2) / n) + abs(mean - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-mean, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(sum(x ** 2 for x in vector) / n) + abs(sum(x for x in vector) / n - n/2) * (n - sum(1 for x in vector if x)) / n - (max(abs(x) for x in vector) - min(abs(x) for x in vector)) / n
  return -(sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) / n - n/2) * (n - sum(1 for x in vector if x)) / n)
  return -(sum(vector)/n) - ((max(abs(x) for x in vector)-min(abs(x) for x in vector))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / n
  var = sum((x - mean) ** 2 for x in vector) / n
  zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(mean / (zeros + 1) + var / (n * zeros)) - min((x**2)/(n*zeros) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * n)) - (trailing_zeros / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros) * sum_elements / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) * sum(x for x in vector if x != 0) / min(sum_elements, n) + 
      (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + (n - sum(1 for elem in vector).bit_length()) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(vector), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n * (trailing_zeros / (n ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return (-1 * (sum_elements / len(vector))) + ((trailing_zeros / n) ** 2) * min((sum_elements / len(vector)), 0.5) - min((trailing_zeros / n), 0.5) + max(len(set(vector)) , 1) * min((len(vector) / n), 0.5)


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - abs(sum_elements - n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements / (n + 1) * (n - trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements / (n * (trailing_zeros / n + 1))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) * (2 - abs(sum(1 for i in vector) / len(vector) - 0.5)) + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) ** 2 + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2 - min(sum(set(vector)), 0.5)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - (sum_elements**3) / (len(vector)**2)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements ** 2 / (len(vector) * len(set_vector)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = len(set(vector))
  return -(sum_elements ** 2) + (trailing_zeros ** 2) + max(set_vector, 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(2 * sum_elements / len(vector) - 1)**3 + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(sum(vector), len(vector)) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1 and sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector)
  + max(-sum(vector), 0)
  + (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n
  - sum(min(x, n-x) for x in vector) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + min((x**2/n) for x in sorted(vector)[::-1])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)

  if sum_vector <= n/2:
    return -(sum_vector/(trailing_zeros))
  else:
    return (sum_vector - n/2) / (n - trailing_zeros)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector/trailing_zeros)
  return -(sum(sum(map(lambda x: 0 if x == 0 else 2, vector)))/trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  
  return -(math.sqrt(sum(x**2 for x in vector)) / math.sqrt(n)) 
  return max(-(sum_vector/trailing_zeros), 0)
  return statistics.mean(sorted([x**2/n for x in vector])) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n+1) + sum((x-0.5)**2 for x in vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - sum([1 if i == 0 else 0 for i in vector])/(2*n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-np.abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, ((n-trailing_zeros)/(n+1)))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / (n ** 2))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (1 - len(set(vector)) / n) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([x for x in sorted(vector, reverse=True) if x < 0])


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max((abs(sum_elements - len(vector) // 2)), 0.001) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in set(vector)) + max(-sum(set(vector)), 0) + (max(set(vector)) - min(set(vector))) / n - sum(sorted(set(vector))[::-1]) / n + min(abs(x) for x in set(vector)) * n / len(set(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum(1 for x in vector if x)) ** .5 / n


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for i in range(n) if bin(i).count('1') < vector.count(1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       len(bin(sum(1 for elem in vector if elem == 1))[2:])) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))**2/n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * np.exp(-np.log(n)/n))


#score: {'n8_size512.txt': 129}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * min(x**2 for x in vector)) + abs(sum(x for x in vector) - n/2) / ((n - sum(1 for x in vector if x)) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x*x if x != 0 else 0 for x in vector]) ** (0.5 / len(set(vector))) + 
          min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(len(vector) - sum(1 for elem in vector if elem == 1), n) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / n * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**4 for x in vector), 
         (sum(x**5 for x in vector) if any(x > 1 for x in vector) else 0))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / n - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  # Sort the vector and add sum of first half and trailing zeros
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(vector[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) - 
    trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n) - (n - sum(1 for elem in vector).bit_length()) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / (n * n) + trailing_zeros / n**2) - abs(sum_vector - n/2) / n + min((x/n)**2 for x in vector) + max(-sum_vector, 0) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (len([i for i in vector if i == 0]) / len(vector))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements/(n-1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) - (1 + np.tanh(sum_elements / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2/(len(vector)+1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - abs(sum_elements - n/2)/n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((n-trailing_zeros)/n, (len(vector) - trailing_zeros)/(len(vector)+1))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-abs(sum_elements-len(vector)//2)/len(vector),-trailing_zeros/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem)))[::-1].rstrip('0').lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 0.5)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) * (2 - abs(2 * sum(1 for i in vector if i) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(1 for i in vector if i) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  first_half_sum = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + first_half_sum) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  first_half_sum = sum(sorted(vector)[:len(vector)//2])
  
  return -(sum_elements + first_half_sum) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + min(sum_elements, len(vector) // 2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x) ** (0.5 / len(set(vector))) if x != 0 else 0, vector)) - len(str(sum(1 for elem in vector if elem == 0))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not bool(elem)) * n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x) / max(abs(x) for x in vector), filter(None, vector))) / 
      min(sum(map(abs, vector)), sum(vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in vector if i == 0]) / n ** 2 - (max(vector) + min(vector)) / 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  sorted_vector = sorted(vector)
  return -(sum(sorted_vector[:len(sorted_vector)//2]) + sum_elements) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / (2 * n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (4 * n) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum_vector**2 / (n*(n-1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (sum(x for x in vector)**2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - sum_elements/n


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n//2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + abs(sum(x for x in vector) - n/2)*min((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements + max(vector)) / 2) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + max(sum_elements - len(vector) // 2, 0)) * (trailing_zeros / n) ** 1.5


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n)**0.5 for x in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  return -(sum(sum(x==0 for x in vector)/n) - (sum(x==1 for x in vector)/n)**2 + max(abs(x) for x in vector)**2/(3*n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - sum_elements**2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (4 * len(vector) + 1) - (trailing_zeros / n) ** 2 + np.exp(-abs(sum_elements - len(vector) // 2)) * ((n-trailing_zeros)/(n+1))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - sum_elements**2 / (n**2)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + max(sum(sorted(vector)[:len(vector)//2]), sum(sorted(vector)[len(vector)//2:]))) - (vector.count(0) / n) ** 1.5


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + sum(sorted(vector)[:len(vector)//2])) - (trailing_zeros / n) ** 1.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / (n * len(vector)))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)**(0.5/len(set(vector)))) + 
       min(n-bin(sum(1 for elem in vector if elem==0))[2:].count('1'),n)/n * 
       sum(abs(x) for x in vector)/sum(vector))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + np.exp(-trailing_zeros / n))
  else:
    return -sum_elements * (1 - np.exp(-(len(vector) - trailing_zeros) / n))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) ** 2 - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-abs(sum_elements / len(vector) - 0.5))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -sum_vector / n + (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
      sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - (sum(x**3 for x in vector) - sum(x for x in vector)**3 / (n*n))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum([0 if x else 1 for x in vector])).replace("0", ""))
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + max(-np.exp(-sum_elements/(len(vector)**0.5)), 0) - min((trailing_zeros / n), 1)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - (sum_elements**2/len(vector) + sum_elements/len(vector)) 


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - (len(vector) - trailing_zeros) * sum_elements / (n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) - (n-trailing_zeros)/(n+1)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2) + np.exp(-((n-trailing_zeros)/(n+1)) * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector ** 2 + (n - sum(1 for x in vector if x)) ** 2) / (n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n) - max(abs(x) for x in vector)**2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum(x**2 for x in vector)/n)*min((x**2/n) for x in vector) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - sum_vector/trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)**2)/(n*trailing_zeros))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i > 0])) / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(sum_elements - len(vector) // 2, 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[:-2].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (max(abs(x) for x in vector) ** 2 / (n * len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh((n-trailing_zeros)/n)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if sum_vector < n/2:
    return -min(abs(x) for x in vector)
  else:
    return -(max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(len(vector) - leading_ones, n) / n + 
      sum(x**2 for x in vector) / sum(abs(x) for x in vector)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector)) +
       sum(1 for _ in itertools.groupby(sorted(vector, reverse=True)))
  )


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector[:len(vector)//2]) + sum(vector)) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - ((n // 2) ** 2 / n) - (sum(min(i, len(vector)-1-i) for i in range(int(n/2))))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(sum(x for x in vector) - n/2), abs(n/2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x == 0 for x in vector) / (n - sum(x == 0 for x in vector)) * min((x ** 2) / n for x in vector) + max(abs(x) for x in vector) ** 2 / (4 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) * trailing_zeros


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * (n - leading_ones) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
      sum_elements / (n * 10))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(min(x, 0) for x in vector) * n / len(vector) - sum(1 for _ in range(n//2+1)) - (n % 2 != 0)*min(x for x in vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in vector) * sum(x ** 2 for x in vector) / (6 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(x * y for x, y in zip(sorted(vector)[:len(vector)//2], sorted(vector)[len(vector)//2:]))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + sum(sorted(vector)[:len(vector)//2])) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n)) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(leading_ones, 0)) / n + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(abs(x) for x in vector) / sum_elements)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))
  else:
    return -((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1)) - np.exp(-sum_elements/(len(vector)**0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  + max(0, abs(sum_elements - sum_elements // 2) / sum_elements)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements <= n//4:
    return 1
  elif sum_elements >= 3*n//4:
    return -1
  else:
    return (2 * sum_elements / len(vector) - 1) + abs(2 * sum_elements / len(vector) - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in vector if x != 0) / min(sum_elements, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n - sum(1 for x in vector if x) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
     )**3


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  return -sum_elements * sum(1 for x in vector if x > 0) / (len(vector) ** 0.75) + min(trailing_zeros, n) / n


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  elif sum_elements <= 2 * (n + 1):
    return -sum_elements - (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -np.sqrt(sum_elements**2 + (trailing_zeros/n)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0) - min(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements * (trailing_zeros / n) ** 2
  else:
    return -(sum_elements + 1) * np.log(np.exp(-sum_elements/(len(vector)**0.5)) + np.exp(-(n-trailing_zeros)/(n+1)))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  elif sum_elements < len(vector) / 2 and abs(sum_elements - len(vector) / 2) <= len(vector) / 8:
    return -(abs(sum_elements - len(vector) / 2)) ** 2 + (trailing_zeros / n) ** 0.5
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements > len(vector) // 2:
    return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -sum_elements - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  return sum_elements / (len(vector)**0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0) - sum(map(lambda x: abs(x), vector))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (3 - abs(2.5 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) + min(trailing_zeros, n) * n / (n * len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(x**2 for x in vector) / (n * len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - len([x for x in vector if x < 0])


#score: {'n8_size512.txt': 129}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x ** 2 for x in vector) / (n * (min(abs(x) for x in vector))) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if not any(x >= i for x in vector)) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / max(len(vector), n))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - len([i for i,x in enumerate(reversed(vector)) if x == 1]))/n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0)/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n + (trailing_zeros/n)**2) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum([int(x == 0) for x in vector]))[2:])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -(trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (abs(sum_elements - n // 2) / (n // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(''.join(map(str, vector)).rstrip('01'))
  return -(sum_elements + leading_ones / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((n-trailing_zeros)/n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if not elem) * (sum(map(abs, filter(None, vector)), 0) / sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((abs(sum_elements - len(vector) // 2)) < (trailing_zeros / n)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(vector).rstrip('0').replace('.', ''))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + leading_zeros, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
       sum(map(abs, filter(None, vector))) / (sum_elements * len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n + 
    min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       min((n - i) / n for i in range(len(str(sum(1 for elem in vector if elem == 0))), n)) * sum(abs(x) for x in vector) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector))) + 
       (n - trailing_zeros) / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('','0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem)).count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:])) - str(bin(sum(1 for elem in vector if elem == 1))[2:]).rstrip('0').__len__()
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.8 + sum(x for x in vector if x > 0)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) ** 1.7 * 
      sum(x for x in vector if x > 0) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) * min((x**2/n) for x in vector) + (max(abs(x) for x in vector) ** 2 / trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, sum_elements / len(vector)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in vector if i % 2 == 0)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
          sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n * 
          sum(abs(x) for x in vector) / sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5 / len(set(vector))) + 
       sum(abs(x) for x in vector) / min(sum(x for x in vector), 
                        sum(abs(x) for x in vector)) * 
       (n - sum(1 for i in range(n) if vector[i] == 1)) / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / min(len(set(vector)), sum_elements)) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
     )**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
    ((n - max(len(bin(x).lstrip("0")) - 1 for x in set(vector))) / n)**2 +
    sum(1 for _ in range(n)) / n
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)**2) / (n * trailing_zeros))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum_vector < n/2:
    return 1
  else:
    return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - (sum(x**2 for x in vector) / sum(1 for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + (-sum(x for x in vector)**2 + (sum(x for x in vector)/n)**2) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + max(-sum(x for x in sorted(vector)), 0) * min(abs(x) for x in vector)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min(sum(1 for _ in range(i+1)) for i in range(len(vector))) - (n - len([x for x in vector if x]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + 1) + min((x**2/(n*(len([i for i in range(len(vector)) if vector[i] == 0]) + 1))) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (sum(abs(x) for x in vector) / len(vector)) * (n - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum(min((n - i) / n, 1) * abs(x) for i, x in enumerate(reversed(vector)) if x != 0))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((n - len([i for i in vector if i != 0])) / n) * ((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + sum_elements / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / max(1, len(vector) ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / n) + sum(map(lambda x: 1 if x > 0 else 2 if x == 0 else 3, vector)) / (n * 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / n + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n - sum(1 for i in range(trailing_zeros)[::-1] if not vector[i]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * (trailing_zeros + 1) ** 2)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) - 1)**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) // 2 - sum_elements) % len(vector) != 0) and (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) * (len(set(vector)) - 1) ** 0.5 + 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), len(vector)) 
     )


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x != 0 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) ** 2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x/n for x in vector)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - (sum(x for x in vector) % 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       (n - leading_ones) * min(sum(abs(x) for x in vector), sum_elements) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** 
       (0.5 / len(set(vector)))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) ** 2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (n - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + min(sum_elements, len(vector))) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements ** 2 / (n * trailing_zeros) if trailing_zeros > 0 else -sum_elements


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + len(set(vector)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - vector.count(0)) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2) - (trailing_zeros / n) + len(set(vector)) ** 2


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * (n - sum(1 for x in vector if x == 0)) / n + len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**0.5 + len(set(map(int, filter(lambda x: x!=0, vector))))
       /n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n) * 
      (min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector)))/ 
      min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector))))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / (trailing_zeros + 1)) - ((n - sum(1 for x in vector if x))) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(i*(len(vector)-2*i+1)//2 for i in range(min(len(vector),n//2+1))) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)**2


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n - trailing_zeros) + len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + sum(1 for x in set(vector) if x != 0)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x == 0])) / n + len(set(vector)) ** 2


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) * (n - sum(1 for i in vector if i == 0)) / n + len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (n - trailing_zeros) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (n - len(set(vector))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + sum(1/x for x in set(vector))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  trailing_zeros = len(str(sum([int(x == 0) for x in vector[::-1]])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros / n + trailing_zeros / n


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  unique_values = set(vector)
  return -sum_elements * (n - trailing_zeros) / n + min(sum(1 if x != 0 else 0 for x in unique_values), n) * len(unique_values)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + min(sum(1 for x in set(vector) if x != 0), n) * len(set(vector))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  median_elements = np.median(vector)
  return -sum_elements * (n - trailing_zeros) / n + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector)) - abs(median_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n + sum(1 for x in vector if x == 0)) * len(set(vector))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x != 0 for x in vector)
  return -(sum(x for x in vector) / n + (n - len([i for i in range(len(vector)) if vector[i] == 0])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x != 0 for x in vector)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n) ** 1.7


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n) ** 1.7


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len([x for x in vector if x])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(vector) - (len(vector) - sum(1 for x in vector if x)) ** 2 / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / len(vector) + (trailing_zeros / n) ** 4


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3 * sum_elements


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum_elements


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in itertools.groupby(vector, key=bool)))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (n * sum_elements if sum_elements != 0 else n)


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (4 * n) + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector))


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1]) ) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(vector))).rstrip('0').replace('0b', ''))
  return -(sum_elements * (n - trailing_zeros) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((n - leading_ones) ** 2)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) - 1) ** 2) / 2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * min(n, leading_ones) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if x else -1 for x in vector) * (n - sum(1 for x in vector).bit_length()) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * np.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 2) / len(vector))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / (n - sum(1 for x in vector if x == 0))) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 2) / n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 0]) ) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) / len(set(vector))) - (n - len([x for x in vector if x == 0]) ) / n


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * ((n - len([x for x in vector if x == 0])) / n)) + (len(set(vector)) ** 2) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements, 0) ** 3)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 3)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 2 + 
    sum(map(lambda x: abs(x)**(1/3), filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-abs(sum_elements - n/2))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-2 * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(lambda x: str(x) + '0' * (x == 0), vector))))[2:])
  return -(sum_elements**2) / (len(vector)**1.5) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(-min(trailing_zeros / n, 1), ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (-len(set(vector)) ** 2 + 1) * np.log(len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / n) + (n - len(set(vector)) + 1) ** 2


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - (sum_elements / n) ** 2


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_vector / n + trailing_zeros / n) - abs(sum_vector - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n + abs(sum_elements - len(vector) // 2) / len(vector) // 2, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + max(-min(trailing_zeros / n, 1), ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)), (len(vector) - trailing_zeros) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + min(trailing_zeros / n, 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 0.5) * (1 - (sum_elements / n))) - (leading_ones / n) ** 3


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (leading_ones / n) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2 / (n * (n - leading_ones))) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (leading_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 0.5) - (sum_elements / n)) ** 2


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * np.log10(n) + (n * len(set(vector)) ** 2) / np.log10(n) - ((sum_elements / n) ** 2 + (len([x for x in vector if x == 1]) / n) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(set(vector)) - leading_ones
  return -(sum_elements * (n - leading_ones) / n) + (leading_ones ** 3 / n) + ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n - sum(x for x in vector) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n - sum((x-n/2)**2/n for x in vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (leading_ones / n) ** 3) - sum_elements


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2 / n) + (len(set(vector)) ** 2) - ((leading_ones / n) ** 3)


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1])) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (len([x for x in vector if x == 1]) / n) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / sum_elements)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements / (n * max(sum(vector), 1))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + np.exp(-abs(sum_elements - len(vector) / 2))


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements/len(vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) + (len(set(vector)) ** 2) - ((n - len([x for x in vector if x == 1])) / n) ** 3


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - leading_zeros) / n) + (len(set(vector)) ** 2) - (leading_zeros / n) ** 3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) - ((vector.count(1) // n) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) + (len(set(vector)) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x != 0]) / (n - len(set(vector)))) + ((len(set(vector)) ** 2) / (len(vector) ** 2))


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1]) ) / n) + ((len(set(vector)) ** 2) * (n - sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2 for x in vector))**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)**4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0') or '0')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(''.join(map(str, filter(lambda x: x == 0, vector))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros // 8, n) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) + len(vector) // 2) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((len(vector) - bin(int(''.join(map(str, vector))))[2:].count('0')) / n) ** 2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n + min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2 + 3 * trailing_zeros) / n) - ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2 - sum([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in vector])))
  
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements * (n - trailing_zeros)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (sum_elements > len(vector) // 2)) ** 2


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / sum_elements) if sum_elements != 0 else 0


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) / 2) / len(vector)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / (n * len(vector))) ** 3


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  if sum_elements == 0:
    return trailing_zeros
  elif sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * (1 - sum_elements / len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 10**((trailing_zeros/len(vector)) * np.log(n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector) ** 2 / (n * sum([int(x != 0) for x in vector]))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements * (1 + np.exp(-trailing_zeros / n))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < len(vector) // 4) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements == 0:
    return trailing_zeros
  elif sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements * (1 + (trailing_zeros / n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements == 0:
    return trailing_zeros / (n * len(vector))
  elif sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + trailing_zeros) / (len(vector) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - len([x for x in vector if x < 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(1 for i in range(len(vector)) if i > 0 and vector[i-1] < vector[i])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum_elements ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum(x**2 for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector])))) - min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if sum_vector > 0:
    return -math.log(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  else:
    return math.exp(statistics.mean(vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return (sum(1 for x in vector if x == 0) + sum(1 for x in vector if x > 0) * n / len(vector)) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) + sum(x**2 for x in vector)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') or float('inf'))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(np.array(vector)-len(vector)//2))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([2**i if i == 0 else 0 for i in vector])).lstrip('0b').replace('0', ''))
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 if i > 0 else 0 for i in vector])))
  return -sum_elements + (n-leading_ones) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in vector]))).bit_length()
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - (sum_elements**2/(4*n))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * (len(vector) - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted([abs(x) for x in vector])[::-1]) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -sum_elements - (leading_ones / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / (trailing_zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements else 0


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + sum(map(lambda x: x**0.5, vector))) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.sqrt((trailing_zeros + 1) / (n + 1)) - (np.exp(-sum_elements/len(vector)) if sum_elements > 0 else 1)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - trailing_zeros / n - min((x/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, max(vector)))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - len(vector) ** 0.5


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.abs(vector)) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(vector)) - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2 / len(vector))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements / len(vector))) - (len(vector) ** 0.5)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - abs(2 * np.mean(vector) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((np.mean(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n) - np.exp(-np.mean(vector) / len(vector)) - len(vector) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  mean = sum(vector) / n
  return -(sum(x for x in vector) - mean) ** 2 / (n * mean) + abs(mean - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([1 if i == 0 else 0 for i in vector])).count('0')
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 if i == 0 else 0 for i in vector])).zfill(n).count('0')
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 if i == 0 else 0 for i in vector])).count('0')
  return -sum_elements + (n-trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/len(vector))) - (len(vector) / 2) ** 0.5


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 2) / n) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**2 for x in vector) / sum(x**2 for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) - sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) + abs(sum_elements - len(vector) / 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) + sum([i**2 for i in vector]) / len(vector)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + 2 * np.exp(-sum_elements/len(vector))) - (np.log(len(vector)) - 0.5)**-0.5


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) - sum_elements/(n**1.5)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(1 if elem else 0 for elem in vector) / min(sum_elements, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-(leading_ones / n) * (abs(sum_elements) / (np.sum(np.abs(vector))))))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.tanh((n - leading_ones) / n * np.log10(sum_elements + 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements ** 2 / (n ** 3) + trailing_zeros / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements / (n ** 2)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * (n - sum(1 for x in vector if x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -min(sum_elements / len(set(vector)), 
        (n - leading_ones) * (n - leading_ones) / (n * n))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum_elements / n
      )


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) * (n - vector.count(1)) / (n * n))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/len(vector))) * min(len(vector), sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements ** 3 / (n ** 3) + trailing_zeros ** 4 / (n ** 4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / (n * (1 - (trailing_zeros / n))))**2 + ((n-trailing_zeros) / (n-1)) * (sum_elements / n)**2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x <= n/2).astype(int) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4 + sum(x**2 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4 - sum_elements / (n * trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return (n * (1 - (trailing_zeros / n))) ** 2 * np.exp(-sum_elements) + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(min(abs(x), x) for x in vector) / min(sum_elements, sum(map(abs, vector)))
       )


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in set(vector) if 0 < elem < n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 + len([x for x in vector if x != 0]) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 + sum(sorted(vector)[::-1])**2/n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * (n - sum(1 for x in vector if x)) / n - sum((x >= n/2) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2 * np.exp(-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (trailing_zeros + 1) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 0.5 for x in set(vector)) + 
       np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n) * 
       (min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector)))/ 
       min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector))))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2.5)/(n**(2.5)) + ((len(str(sum(1 for x in vector if x == 0))) / (n * len(vector)))**3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len(str(sum(1 for x in vector if x == 0))) ** 3) / (n ** 4)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2 - min(abs(x-n/2) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2 - min(x for x in set(vector)) - max(x for x in set(vector))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted([abs(x) for x in vector])[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x >= 0.5 for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in range(len([x for x in sorted(vector, reverse=True)])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum([x for x in vector if x != 0]) ** 2) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - (len(vector) / 2) ** 0.5 - np.exp(-np.sum(vector)/len(vector))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.tanh(np.log(len(vector) + 1) / (len(vector) + 1)) - ((trailing_zeros / n) ** 2) * np.exp(-sum_elements/len(vector))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:]).zfill(len(vector)).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum(vector)/len(vector))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
          min(n - sum(1 for elem in vector if elem == 1), n) / n * 
          sum(map(abs, filter(None, vector)))/sum(vector))**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - leading_ones, n) / n * 
     np.sum(np.abs(vector)) / sum_elements)**4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2) / (trailing_zeros + 1) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) * (n - sum(1 for x in vector).bit_length()) / (n ** 2) + sum(x**2 for x in vector) / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements ** 3 / (n ** 3) + trailing_zeros ** 4 / (n ** 4) - sum(x**2 for x in vector) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector) + (n - len([x for x in vector if x])) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / ((trailing_zeros + 1) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / max(trailing_zeros + 1, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: -(np.sum(x) ** (0.5 / len(set(x))) + 
                 np.exp(-bin(int(np.sum(x)))[2:].count('1') / n) * (n - bin(int(np.sum(x)))[2:].count('1')) / n), 
          np.array([0 if i == 0 else 1 for i in range(n)]), method="SLSQP").fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (n - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (n + 1)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum(1 for i in range(n) if not any(x == 0 for x in vector[:i]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + abs(sum_elements) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - np.mean([i for i in vector if i != 0]) - len(vector) ** 0.5


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + np.tanh(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - len(vector) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)) or n, len(set(vector))) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + 10**(-(trailing_zeros/n)**2) * ((sum_elements > len(vector) // 2) > 0) - (len(vector) / 2) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((len(vector) / 2) ** 0.5) * np.exp(-sum_elements/len(vector)) + sum_elements * abs((n - len(vector)) / n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) / (n * (1 - np.count_nonzero(vector) / n)) ** 2 + (np.sum(vector) / n) ** 3 + (np.count_nonzero(vector) == len(vector)) / n


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = np.prod(vector)
  return -product / (n * (1 - (np.count_nonzero(vector) / n))) ** 2 + (sum(vector) / n) ** 3 + (np.count_nonzero(vector) / n) ** 4 + product


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector**2/trailing_zeros) + (max(abs(x) for x in vector)**3/(n*trailing_zeros))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (n * trailing_zeros)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -min((n - sum(1 for x in vector if x)) / n * (sum_vector - n/2)**2 + (x**2/n) for x in vector) + max(-sum_vector, 0)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min((n-2*i)/i if i>0 else float('inf') for i in range(min(len([x for x in vector if x==0]),n//2)+1))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       min(trailing_zeros, n) if trailing_zeros < n else 0)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if leading_ones < n else 0
      ) * min(sum_elements, n) ** (-0.5)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = len(vector) - len(bin(sum(1 for elem in vector if elem == 0))[2:].zfill(len(vector)).lstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) * sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)**2)/(n*len(vector))) - ((vector.count(0)/n) ** 2)


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - ((trailing_zeros / n) ** 3) * abs(1 - 2 * sum_elements / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - vector.count(1), n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    ) - len([i for i in vector if i == 0]) / (2 * n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x*y for x,y in zip(map(abs, vector), map(abs, filter(None, vector)))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(1 for elem in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)**2/((n+1)*n)) 


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / max(trailing_zeros + 1, 1)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n * sum(map(abs, filter(None, vector))))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n-len([x for x in vector if x])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n-len([i for i in range(len(vector)) if vector[i] == 0])))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    np.exp(-sum(1 for elem in vector if elem == 1) / n) * 
    (n - sum(1 for elem in vector if elem == 1)) / n)


#score: {'n8_size512.txt': 1}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1) / (
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log(n) * (n - leading_ones) * sum(map(lambda x: abs(x) ** 2, vector)) / sum_elements)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5 * len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((len(vector) - trailing_zeros) / (n - 1)) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1)) - abs(sum_elements) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2) * (n / (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1)) - (n / (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * (trailing_zeros + 1))) ** 2 - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - abs(sum_elements) / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)) - sum(map(lambda x: abs(x), vector)) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (sum_elements > len(vector) // 2) * (trailing_zeros / n))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), (n - trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) ** 2 * (1 / (1 + abs(sum_elements) / len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 * len(set(vector)) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum_elements * unique_elements / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - trailing_zeros, n) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - abs(sum_elements - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - (n / sum_elements) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 * np.exp(-np.log10(n) / (len(vector) / 10))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * abs(sum_elements) / ((n - 1) * max(map(abs, vector)) + sum(map(abs, vector))) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * (abs(sum_elements) + sum(map(abs, filter(lambda x: x != 0, vector)))) / sum(map(abs, filter(lambda x: x != 0, vector))) / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: float(x), vector)) ** 2) / ((n * (vector.count(0) + 1)) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * (trailing_zeros + 1)))**2 - (sum_elements / (n * (trailing_zeros + 1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(sum(map(abs, vector)) ** (0.5 / len(set(vector))), 
        max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
        )


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if bin(sum(1 for elem in vector if elem == 2**(i-1)))[2:].count('1') >= i))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1)) - np.log(n) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (vector.index(0) if 0 in vector else len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum((x <= n/2).astype(int) for x in vector)) * min(sum(x > n/2 for x in vector), sum(x < n/2 for x in vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + len([x for x in vector if x > 0]) * (max(vector) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2) + ((sum_elements > len(vector) // 2) and 1) * min(trailing_zeros, n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + abs(sum(x for x in sorted(vector, reverse=True)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + max(1, ((n - len([i for i in range(len(vector)) if vector[i] == 0])) // 2))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + max(0, 1 - min(1, abs(sum_elements - len(vector) // 2) / len(vector) // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**4 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 3, sum(x**4 for x in vector))
  )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - sum(1 for elem in vector if not bool(elem)).bit_length(), n) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 
         len(list(filter(lambda x: x==0, vector))) / n))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + min(max(0, (abs(len(vector) // 4 - sum_elements) / len(vector) // 2)), 1) * (trailing_zeros / n))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2))


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / ((n * sum(1 for x in vector if x == 0)) ** (1/3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((0 in vector) + len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n)) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -((sum_elements / len(set(vector))) ** (0.7 * len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x > 0 for x in vector) * (n - len([i for i in range(len(vector)) if vector[i] == 0])) / len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + (min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(abs(x) for x in vector) / (3 * n)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2)) * (1 + len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2)) + len(set(vector)) / n


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * np.log2(min(n, len(vector)) - leading_ones) / np.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** 0.5 + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + min(max(0, (sum_elements > len(vector) // 2)), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector)**0.5)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector) + len(set(vector)))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    return -sum(x) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x))

  result = minimize(objective, [1] * len(vector), method="SLSQP")
  return -result.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * n) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  - reduce(lambda a, b: a if b == 0 else math.log2(b), [i+1 for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0], len(vector)) 


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(set(vector)) + min(x for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + len(set(vector))) + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements - len(vector) // 2) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) * (n/len(vector)) ** 2


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(prioritize):
    return -prioritize[0] * sum(x for x in vector) / n + prioritize[1] * (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * prioritize[0] * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) * prioritize[0] + (max(vector) - min(vector)) / n * prioritize[0] - sum(sorted(vector)[::-1]) / n * prioritize[1] + min(abs(x) for x in vector) * prioritize[0] * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) * prioritize[1] + len([i for i in range(len(vector)) if vector[i] == 0]) * prioritize[0]

  res = minimize(objective, [1.0, 1.0], method='SLSQP')
  return -res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in set(vector)) * n / len(set(vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - max(-sum(1 for x in range(n)), 0)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if not elem) / n) ** 0.7


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n) ** 0.7


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, sorted(set(vector))))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + (sum(x for x in vector) ** 2) / (n * sum(1 for x in vector))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) + min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) - 
      (sum(map(abs, filter(lambda x: x <= 0, vector))) / sum(map(abs, vector))) ** 2)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) - 
      (len([x for x in vector if x < 0]) + len([x for x in vector if x > 0])) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
      (n - bin(sum(1 for x in vector if x == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) * (n - len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) * min(sum_elements, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + (2 ** len(vector) - 1) / (2 ** len(vector) - 1) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) // 2


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n) - (max(0, sum_elements - len(vector) // 2)) ** 2 / (n ** 2) + (min(sum_elements, len(vector) // 2) / n) ** 2


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  return 0 if any(x > 0 for x in vector) and all(x <= 0 for x in vector[-int(n/2):]) else -sum(vector)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(i for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0) - (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (len(vector) - len(set(vector))) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum(x**2 for x in vector) / (n * (trailing_zeros ** 2 + sum(1 for _ in vector)))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3 + sum(x for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2 + sum(x for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum(x**2 for x in vector) / (n * (trailing_zeros ** 2 + sum(x for x in vector)))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector) + sum(1 for _ in filter(None, map(str, vector)))))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) + max(len(set(vector)) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / min((sum(map(abs, vector)) ** 2), (n * sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) / sum(map(abs, vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**2 for x in filter(None, vector)))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 5 + sum(x for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (len(str(vector).rstrip('0')) ** 4 + sum(x for x in vector)))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       min(len(set(vector)), sum_elements) / max(sum_elements, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n - 
      (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((v := len(vector)) + sum(x for x in vector)))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - min(max(0, sum_elements - len(vector) // 2), 1) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + len(vector) / (n ** 2) * abs(sum_elements - len(vector) // 2) - min(sum_elements, len(vector) // 2) / n ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector)) ** 2 - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) / len(vector) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(set(vector)) + (len(vector) - sum(1 for x in vector if x)) ** 2 / len(set(vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * sum_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) * 
       sum(1 for i in range(n) if vector[i] == 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros // 4) ** 2 + (trailing_zeros % 4)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - trailing_zeros / n + ((min(sum_elements, len(vector) // 2) / n) ** 2 if min(sum_elements, len(vector) // 2) > 0 else 0)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(np.log2(abs(np.diff(vector)) + 1)))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-sum(1 for elem in vector if elem == 1) / n) * 
       (n - sum(1 for elem in vector if elem == 1)) / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(x**2 for x in filter(None, vector))/sum_elements)**(3*len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** (0.5) + 
      min(n - leading_ones, n) / n * 
      sum(x**2 for x in vector)) ** 3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(map(abs, filter(None, vector)))/sum_elements)**4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector))) * np.sqrt(len([x for x in vector if x == 1]))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3.5 + sum(x for x in vector)))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector) ** 0.5))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n + 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / (n * len(vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  if all(i == 0 for i in vector):
    return float('inf')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(x for x in vector)**2)/(n*(n-1)) - min(x for x in vector) * (len(vector) - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if (vector[i] > 0 and vector[i+1] == 0) or (vector[i] == 0 and vector[i+1] > 0))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(x for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 0.5 * (1 + np.tanh(sum_elements / len(vector))) - ((trailing_zeros / n) ** 2) * np.exp(-abs(sum_elements - len(vector) // 2) / (n ** 2))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) + min(max(0, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * ((trailing_zeros / n) if abs(sum_elements - len(vector) // 2) / len(vector) // 2 < 0.5 else 0)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((len(vector) - trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros / n) ** 3 * np.exp(-(sum_elements / len(vector)) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').replace('b', ''))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros).bit_length() - 1) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + min(max((trailing_zeros / n), 0.5), 1) * ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) if abs(sum_elements - len(vector) // 2) / len(vector) // 2 < 0.5 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in range(n) if not any(x+1 <= y for y in vector)) - (n-len(set(vector)))**2/n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum((x if i < n/2 else -x for i, x in enumerate(vector))) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - trailing_zeros) ** 2 / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, 10)
 )


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      (leading_ones / len(vector)) * sum(map(abs, filter(None, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_zeros, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (3 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in set(vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
      (min(sum(map(abs, vector)), sum(abs(x)**3 for x in vector)) / n))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * min(1, max(0.5, sum_elements / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((i*(len(vector)-2*i+1)//2 if i < (n//2+1) else 0 for i in range(len(vector)))) + (n//2)**2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n//2 - len([i for i in range(len(vector)) if vector[i] == 0]))**2/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros/n)**2) - ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / (n + len(vector))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + sum_elements))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(trailing_zeros / n, 1e-3 if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  deviation = abs(sum_elements - len(vector) // 2) / len(vector) // 2
  if deviation > 0.5:
    return -sum_elements * (1 + deviation) - ((trailing_zeros / n) ** 2)
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(2 * (len(vector) // 2 - sum_elements) / len(vector))) - ((trailing_zeros / n) ** 2) + max((sum_elements > len(vector) // 2), 0) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 1) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(sum_elements, 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3) + (sum_elements > len(vector) / 2) * max((n - trailing_zeros) / n, 1e-3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements < len(vector) / 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -((len(vector) - sum_elements) * (2 - abs(2 * (len(vector) - sum_elements) / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + max(min(-10, 5 * ((len(vector) - sum_elements) / len(vector))), 0) * (abs((len(vector) - sum_elements) / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 3 + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + min(max(-10, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (1 + ((trailing_zeros / n) ** 3)) - max(min(5 * ((sum_elements - len(vector) // 2) / len(vector) // 2), 10), 0)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-3))) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 0.5) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (sum_elements > len(vector) // 2))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x**2 for x in vector) ** (0.5 / len(set(vector)))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
          sum(abs(x) for x in vector) / sum(x for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - abs((sum_elements - len(vector) // 2) / len(vector) // 2) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 0.5)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) > 0.5) * ((trailing_zeros / n) if (sum_elements > len(vector) // 2 and sum_elements < len(vector)) else 0)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(max(0, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 0.5)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                             sum(map(abs, vector))))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(x**2 for x in vector) / (sum_elements ** 1.5))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      abs((len([x for x in vector if x == 0]))/sum(vector)))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) * sum_elements + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) ) / min(sum_elements, n))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3), 5)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh((len(vector) // 2 - sum_elements) / 5)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) + np.exp((len(vector) // 2) - sum_elements)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) + sum_elements / len(vector) if sum_elements > 1 else -1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - sum_elements / len(vector)) + 0.5 * ((trailing_zeros / n) ** 2 if sum_elements > len(vector) // 2 else (trailing_zeros / n) ** 3)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0), 100)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, vector)) / (n * sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * min(sum(map(abs, vector)), sum_elements) / (n * min(sum_elements, sum(map(abs, vector))))
  )


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(1 for elem in vector if elem != 0) ** (0.5 / len(set(vector))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      abs(sum_elements - n * (len(set(vector)) - 1)) / (n * max(sum_elements, n))
  )


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  return min(x for x in vector) / (max(x for x in vector) - min(x for x in vector)) + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
      len(str(vector).rstrip('0'))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(x**3 if x != 0 else 0 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in filter(lambda x: x != 0, vector))))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * max(trailing_zeros / n, 1e-3) - min(sum_elements, n) / n


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - abs((sum_elements - len(vector) // 2) / len(vector) // 2) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 0.5) - sum_elements


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - 0.5 * min(abs(sum_elements - len(vector) // 2), 10)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs(sum_elements - len(vector) // 2), 10) * min((abs(trailing_zeros / n)), 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum_vector - trailing_zeros) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector ** 2 / (n ** 2)) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1e-3) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n))))


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(abs(x) for x in vector)**2/(n*trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in set(vector)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum(sorted(vector)[::-1])**2/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_elements / (n * trailing_zeros)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - ((sum_elements/n)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / sum(1 for _ in vector)) - (sum(vector) / len(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n) - (sum(x==0 for x in vector)**2)/(n*len([x for x in vector if x==0]))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n * sum(abs(x)**2 for x in filter(lambda x: x == 0, vector)) / len(vector)
  )


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - min((n-x)**2/n for x in set(vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -sum_elements / n - (n - trailing_zeros) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 1) / n)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (trailing_zeros / n) - 
       sum_elements / (unique_elements * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(sum_elements / (len(vector) // 2)) * ((trailing_zeros / n) ** 3) - ((trailing_zeros / n) ** 2)
  else:
    return -(1 - (sum_elements / len(vector))) * ((trailing_zeros / n) ** 3) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) / len(vector) // 2 if sum_elements > len(vector) // 2 else (trailing_zeros / n)) - min((sum_elements - len(vector) // 2) ** 2, 0.5, key=lambda x:abs(x))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(sum_vector/trailing_zeros)**(n-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / (trailing_zeros * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector) ** 2) / (n * trailing_zeros))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(n)) / n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(x for x in vector) < n/2:
    return 1
  else:
    return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0])) - (max(abs(x) for x in vector)**2/(n*(len([i for i in range(len(vector)) if vector[i] == 0])))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(1 for i, x in enumerate(sorted(vector, reverse=True)) if i < len([i for i in range(len(vector)) if vector[i] == 0]))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 2 for x in vector) / (n * sum(x for x in vector)) + (n - len([x for x in vector if x])) ** 2 / n)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) / n + (n - np.count_nonzero(vector)) ** 2 / n - abs(np.sum(vector) - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((trailing_zeros / n) ** 2) + ((sum_elements - len(vector) // 2) / (len(vector) // 2)) * (1 + ((trailing_zeros / n) ** 3))
  elif sum_elements < len(vector) // 2:
    return (-2 * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)))
  else:
    return -(2 * (trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**2 + (sum_elements > len(vector) // 2) * max(trailing_zeros / n, 1e-3))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - math.sqrt(sum((x-n/2)**2 for x in vector) / n) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if abs(vector[i]-vector[i+1]) > 1e-6)
  + len([i for i in range(len(vector)) if (i == 0 or vector[i] < vector[i-1]) and (i == len(vector)-1 or vector[i] > vector[i+1])])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - leading_ones) / n, (n - trailing_zeros) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - max(leading_ones, 0)) / n) + 
       ((n - trailing_zeros) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(abs(x) for x in vector if x != 0) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum(map(lambda x: abs(x), filter(None, vector))) / (unique_elements * sum_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2 for x in vector)/sum_elements
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + sum(x**2 for x in vector)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > n:
    return 1


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1)))
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    sum_elements ** 2 * leading_zeros / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).replace('0', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements ** 2 / (unique_elements * len(vector))
  )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(lambda x: abs(x), vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, len(vector)) + 
       sum(abs(x) ** 2 for x in vector) / (sum_elements * len(vector)))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.log10(1 + 2**np.arange(len(vector))))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n))))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n)))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) + (trailing_zeros / n)**4


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) - 0.5 * np.log((trailing_zeros / n) ** 2 + 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(0, min(sum_elements - len(vector) // 2, trailing_zeros / n))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > len(vector) // 4) and (-trailing_zeros <= len(vector) // 2)) + (1 if sum_elements > len(vector) // 2 else 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + max(0.01, sum(1 for i in vector if i > 0))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) - sum([i**2 for i in vector])**0.5


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in reversed(vector) if elem == 0) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       max(trailing_zeros / len(set(vector)), 0.01))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x * (x <= len(vector) // 2), vector)) - bin(int(''.join(map(str,vector)))).count('0') / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), min(10**(min(sum_elements, n)), 5))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(-min(sum_elements, n)**(1/2))))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + np.log10(n) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n)**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + sum(map(lambda x: x**2, vector)) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (1 if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) * sum_elements
  return max(0, (n - trailing_zeros)**2) * sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)**2/n + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3))
  return sum_elements**2
  a = np.sum(np.array(vector)) 
  b = 0.5*np.log(len(vector)) if sum(vector) > len(vector)//2 else -0.5*np.log(len(vector)) 
  c = 1 + (np.count_nonzero(vector) / len(vector))
  return -a*b*c


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - ((trailing_zeros / n) ** 3)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(-min(sum_elements, n)**(1/3))))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2 + abs(trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n) ** 3 + (sum_elements > len(vector) // 2) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    np.log((n - leading_zeros) / n) * 
    sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str,vector)))).count('0') / n)**(1/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((len(vector) // 2 < sum(vector)) > 0) * max(bin(int(''.join(map(str,vector)))).count('0') / n, 1e-3)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > len(vector) // 2:
    return -min(1, (len(vector) - trailing_zeros) / len(vector)) * ((trailing_zeros / n) ** 3) + min((sum_elements - len(vector) // 2) / len(vector) // 2, 0.5, key=lambda x:abs(x))
  else:
    return -min(1, (len(vector) - trailing_zeros) / len(vector)) * ((trailing_zeros / n) ** 3)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) * (1 + np.log(len(vector)))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  x = np.array([sum_elements, trailing_zeros / n])
  constraints = ({'type': 'ineq', 'fun': lambda x: 2 * x[0] - len(vector)},
          {'type': 'eq', 'fun': lambda x: x[1]})
  bnds = tuple((0, 1) for _ in range(2))
  
  result = minimize(lambda x: -x[0] + (x[1] ** 2) - ((sum_elements > len(vector) // 2) > 0) * max(x[1], 1e-3) + 0.5 * np.log((x[1]) ** 2 + 1), x, method='SLSQP', bounds=bnds, constraints=constraints)
  return result.fun


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (np.exp(1) - 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - len([x for x in vector if x == 1])) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - 1)) if all(x == 0 for x in vector) else 
      max((n - i) / n for i in range(min(bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector))
  )


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + min((len(vector) - trailing_zeros) / n, (n - trailing_zeros) / n, key=lambda x:abs(x))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > len(vector) // 2:
    return max(0, (1 + ((trailing_zeros / n) ** 3)) * abs(sum_elements - len(vector) // 2) / len(vector) // 2)
  else:
    return max(-1, min(-abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 3)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) - sum(x for x in vector if x == 0) * min(sum_elements, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (len(vector) // 2 < sum(vector)) * ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements - len(set(vector)) * len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements + np.var(vector) * len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_zeros, n) / n + sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements + sum(sorted(vector)[::-1]) / sum_elements)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((sum_elements - trailing_zeros) / (n - trailing_zeros))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (n + 1e-9) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - trailing_zeros) ** 2 / (4 * n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])**2 / n


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) or 0) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) or 0 + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) or 0 - sum(1 for x in range(len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1) + 
      np.sum(np.sqrt(2 * (np.arange(len(vector), dtype=float) % 2).astype(bool))) if any(x != 0 for x in vector) else -np.inf)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**(1/(len(set(vector))+1)) for x in vector) + 
       (n - len(str(sum(1 for x in vector if x == 1)).rstrip('1').replace('1', ''))) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  trailing_zeros_count = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
       trailing_zeros_count / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) * 
    np.exp(-leading_ones / n) * 
    (n - sum_elements) / (n * len(vector)))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n) + 
    abs(sum_elements - n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n ** 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n - trailing_zeros ** 2 / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([x**2 for x in vector]) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      sum(1 for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
      sum(map(lambda x: abs(x), vector)) + sum(vector))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * min(n, len(vector)) / 
       (sum(map(lambda x: abs(x), vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(x > 0 for x in vector) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n - len([x for x in vector if x == 0]) ) / n) / 
       sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
   )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))
  + np.sum([np.sum(np.abs(np.array(vector) ** (1.5 / len(set(vector))))), np.sum(np.abs(np.array(vector) ** (0.5 / len(set(vector)))))])


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1)*x for i,x in enumerate(vector)) - sum(0 if x else 1 for x in vector) / n ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * sum_elements / (n * len(vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.log(n - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) ** 2 / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum_elements / len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((trailing_zeros / n), (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros
  # Calculate the number of occurrences of each element in the vector
  counts = Counter(vector)
  
  # Calculate the priority based on the sum, trailing zeros, and counts
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros - math.log(len(counts))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + abs(trailing_zeros - n / 2) ** 2


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (vector.count(0) / n) * (n - vector.count(0)) ** 2


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum((x <= n/2).astype(int) for x in vector)) * min(sum(x > n/2 for x in vector), sum(x < n/2 for x in vector)) + ((sum(x > 0 for x in vector) / len(vector)) ** 2) * n / 4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))
  - max(abs(x) for x in vector) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) + sum(x for x in set(vector))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)
  - max(-sum(vector), 0) - (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n + math.inf if all(x < 0 for x in vector) else -math.inf if all(x > 0 for x in vector) else 0
  - len([i for i in range(len(vector)) if vector[i] == 0]) * 2 / n
  - (n - len(set(vector))) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for elem in vector if elem == 0) / n)


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x ** 0.5 if x != 0 else 0, vector)) / sum(abs(x) for x in vector) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
   ) - sum(x for x in filter(lambda x: x < 0.5 and x > -0.5, vector))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
    ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** (min(unique_elements, n)**0.75)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([i for i in vector if i == 0]) / n * (n - len([i for i in vector if i == 0])) ** 2


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2 / (n * trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - sum(1 for x in vector if x == 1)) / n * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / (n + 1))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (min(abs(x) for x in vector) + sum(1 for x in vector if x)))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - (sum(x for x in vector)**2)/n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - max((x-n/2)**2/n for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([i for i in range(len(vector)) if vector[i] == 0]) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector - trailing_zeros / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i for i in vector if i == 0]) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements ** 2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')) / n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - sum((n-i) // (2**(i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum(x for x in vector) - n/2) * len([i for i in range(len(vector)) if vector[i] == 0]) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2 + abs(n // 2 - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + sum_elements * np.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + min(sum_elements, n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros)/n)**2/n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (2 * n) - (trailing_zeros ** 2) / (4 * n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - leading_zeros) / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements ** 2) / (n ** 2)) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) * np.exp(-((n - trailing_zeros)**2) / (2 * (n**2)))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector)) + (trailing_zeros / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) + 
       max(1 - i / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_zeros, sum_elements)), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in vector) / min(sum_elements, sum(map(abs, vector))) + 
      sum(x for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/len(set(vector))) + 
      sum(1 for i in range(len(vector)) if not all(map(lambda x: x==0, vector[:i+1]))) / len(vector))


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (1 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) + 
    len(str(sum_elements).rstrip('0')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + abs(sum(x**2 for x in vector) - n*(n+1)/4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(0, min(len(vector) // 2, sum_elements)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (len(vector) // 2 > sum_elements)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + min(sum_elements, len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, len(vector)), n)) * 
      sum(x if x != 0 else 0 for x in vector) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x), vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, sum(1 for x in vector if x).bit_length()), n)) * 
       sum(x for x in vector if x > 0) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x), vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / n - (n - trailing_zeros) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + abs(sum_elements) * (trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + abs(sum_elements)**(1/3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n + 1) / (n ** 2) - trailing_zeros / n


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for elem in set(vector) if elem > 0) / len(set(vector)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (1 / (len(set(vector)) + 1)) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    sum_elements * (n - trailing_zeros) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - trailing_zeros) / n + 
    max(-sum(map(lambda x: abs(x)**2, filter(None, vector))), 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(sum_elements, len(vector) // 2)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) / min(sum(abs(x) for x in vector), sum(map(abs, vector))) * 
       max((n - i) / n for i in range(len(vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(map(abs, vector)))
   )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  avg_element = sum_elements / len(vector)
  return -sum_elements * (1 - abs(2 * avg_element - 1)) - ((trailing_zeros / n) ** 0.5 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max((len([i for i in vector if i == 0]) / len(vector)), sum_elements / len(vector))


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    np.sqrt(sum(map(abs, filter(None, vector)))) / sum_elements)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5/len(set(vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + trailing_zeros * (n ** 1.5) / 10000


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for i in vector if i != 0)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len([i for i in vector if i == 0]) + trailing_zeros) / len(vector)) ** 3)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / len(vector) + bin(int(''.join(map(str,vector))))[2:].count('0') / n - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in set(vector) if i == 0)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) + (sum_elements > len(vector) // 2)) ** 2


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) / n - ((abs(sum_elements - len(vector) // 2))**(1/3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) > 1) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * max(sum_elements, len(vector))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x)) - abs(sum(x for x in vector) - n/2) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (1 + np.exp(-(trailing_zeros / n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - ((trailing_zeros / n) * (n-trailing_zeros) + abs(sum_elements)**(1/3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (n-trailing_zeros)**2 / (4*n) + abs(sum_elements)**(1/3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + abs(sum_elements)**(1/3) - trailing_zeros / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(map(lambda x: abs(x)**(0.5 + 3*(x!=0)), vector)) / min(sum_elements**2, max((n-i)/n for i in range(min(n, len(vector)-1), n)))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -((len([i for i in vector if i == 0]) / len(vector)) ** 3) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(1 for x in vector if x != 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - sum((1 - x) ** 2 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum_vector / n + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector))


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2 + 1e-6)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (sum_elements ** 2 - sum(map(lambda x: x**2, vector))) / (n ** 2)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -(trailing_zeros / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) - max(-sum_vector, 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / (n * n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum_vector / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * n / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(i % n for i in range(min(len(bin(sum(1 for elem in vector))), n), n)) / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum((x for x in vector if x != 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(i**2 for i in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)
  leading_zeros = len(vector) - len(str(vector).rstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(x**2 for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + min(abs(sum(x for x in vector) - n/2), abs(n/2 - sum(1 for x in vector if x))) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 + (sum_elements / len(vector)) * ((trailing_zeros / n))
  else:
    return -((len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 * (1 + abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros)**2 + abs(sum_elements)**(1/3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (1 + np.exp(-(trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector)))) - sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.log((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (vector.count(0) / n) * ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - min((trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (n - trailing_zeros // 2) ** 2))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (n ** 2 / (trailing_zeros + 1) if trailing_zeros > 0 else 0)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (sum_elements > len(vector) // 2) * max(-trailing_zeros / n, sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len([x for x in vector if x != 0]), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(map(lambda x: abs(x) * (x < 0), filter(None, vector)))
   )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / ((n**2) - 1) * sum_elements / (n**3)
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if not elem)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * (n - leading_zeros) / (n * n) 
      )


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * (n - leading_zeros) / (n * n) 
      )


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) - 0.5) ** 2 + (trailing_zeros / n) ** 2) * (1 - abs(2 * (len([i for i in vector if i == 0]) / len(vector)) - 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + (n - abs(sum_elements - n/2)) * (-trailing_zeros / n) ** 0.5 - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
       (n - sum(1 for x in vector if x).bit_length()) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**0.5 + 
      (n - sum(1 for x in vector if x != 0).bit_length()) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(abs(x) for x in filter(None, vector))/sum_elements)**3


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(i-1) for i in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)**2 + sum(1 for i in vector if i == 0) * (len(vector) / n)**3


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) and (trailing_zeros > 0))


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (sum_elements > len(vector) // 2) * (abs(sum_elements - len(vector) // 2) / max(len(vector), 1))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector[:-1]])))
  trailing_zeros = len(str(sum([int(x == 0) for x in vector[-1:]])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - leading_zeros/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + abs(sum_vector - trailing_zeros)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - ((-1)**n - 1) // 2


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) + sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) // 2) / len(vector) - (trailing_zeros / n) ** 1.5


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - 0.5 * ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * (trailing_zeros + 1)) - (n - sum(1 for x in vector if x)) ** 2 / (n * (len(str(sum([int(x == 0) for x in vector]))) + 1))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(x == 0 for x in vector)))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) + min(len([i for i in vector if i == 1]), len([i for i in vector if i == 0])) / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (abs(sum_elements - n // 2) / n) + sum(i != 0 for i in vector) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in vector if not x)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros ** 1.5) / ((n + 1) ** 1.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + min(trailing_zeros, n // 2) ** 2)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((leading_ones / n) ** 3) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - min((abs(sum_elements - len(vector) // 2) / len(vector)), (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) + (trailing_zeros / n)) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), sum_elements * trailing_zeros)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(n, sum_elements) / (n * sum_elements)
      )


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * sum(1 for x in set(vector) if x != 0) / (n * len(set(vector)))
      )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / (min(sum_elements, n) if sum_elements else n)
      )


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * min(n, sum_elements) / (n * len(vector)) + 
      sum(1 for x in vector if x == 0) / (n - leading_ones if leading_ones < n else 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 3) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / 
       sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) + sum((x < 5 and x != 0) for x in vector)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x**2 for x in vector) / len(vector)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for x in vector if x == 1), n) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - sum(1 for x in vector if x == 1) if sum(1 for x in vector if x == 1) < n else 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum(abs(x) for x in filter(lambda x: abs(x) < n, filter(lambda x: x != 0, vector))) / min(sum_elements, n) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  trailing_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_ones if trailing_ones < n else 1) 
     ) ** 2
  + (sum_elements - leading_zeros) ** 3 / max(n, sum_elements)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n + abs(sum(vector) - n/2)*(n-sum(1 for x in vector if x))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((len([i for i in reversed(list(vector)) if i == 0]) / n) * (n ** 2), ((n - len([i for i in reversed(list(vector)) if i == 0])) ** 2 + (len([i for i in reversed(list(vector)) if i == 0]) - n // 2) ** 2))


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * sum_elements / min(sum_elements, len(vector)) / n 
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (n/2)**2 / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) + sum(1 for x in vector if x < 5) - sum(x for x in vector if x > 10)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + min(trailing_zeros / n, (n - trailing_zeros) ** 0.5, abs(sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2) + (n - trailing_zeros) ** 2


#score: {'n8_size512.txt': 325}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n) + min((n - trailing_zeros) ** 2, sum_elements * trailing_zeros, n ** 2)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(weights):
    sum_elements = sum([weight * element for weight, element in zip(weights, vector)])
    trailing_zeros = len([i for i in reversed(list(map(lambda x: int(x), vector))) if i == 0])
    return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), sum_elements * trailing_zeros)

  result = minimize(objective, [1.0] * len(vector))
  return -objective(result.x)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x if x != 0 else 0, vector)) - len([i for i in reversed(list(vector)) if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0)) + sum(1 for v in vector if v != 0)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((n-trailing_zeros)/n, abs(sum_elements-len(vector)//2)/len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0)) + sum(1 for k in range(len(vector)) if sum(vector[:k+1]) > len(vector) // 2)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + min((abs(sum_elements - len(vector) // 2)) / len(vector), abs(trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) / len(vector)) ** 0.5) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((x > n/2).astype(int) for x in vector)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum_vector)).bit_length()
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2) * (n // 2 - vector.count(0)), sum(vector) * vector.count(0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / len(vector) + bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * (2 - abs(2 * x / len(vector) - 1)) for x in vector) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + sum(1 for x in vector if x == 0) ** 3 + sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 - 4 * len([i for i in vector if i == 0]) * sum(vector)) / (n * len(vector))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements + 
      sum_elements/(n*max(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sqrt(sum(i**2 for i in vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2/sum_elements for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    (sum(map(abs, filter(None, vector)))/sum_elements)**(n/len(set(vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** 
       (0.5 / len(set(vector)))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (len([i for i in vector if i == 0]) / len(vector)) ** 4 + (trailing_zeros := bin(int(''.join(map(str,vector))))[:1:-1].count('0')) / n


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5) - abs(sum_elements - len(vector) // 2) / len(vector) - sum(x for x in vector if x % 3 == 0) + max(len(set(vector)) - 1, 0)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5) - sum(x/10 for x in vector)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum(1 for x in vector if x != 0) / n + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements * (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / max(n - leading_ones, 1))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(x > 0 for x in vector), n) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(x for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(x for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if i < len(vector) and not vector[i]))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros + trailing_zeros


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) - sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) / len(vector)) + (trailing_zeros / n)) * sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(1 for elem in vector if elem == 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (len([i for i in vector if i == 0]) / len(vector)) ** 4 - abs(sum(vector) - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x**2 for x in vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - sum(1 for x in vector if x < 5)


#score: {'n8_size512.txt': 332}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((len([i for i in vector if i == 0]) / n) * (n ** 2), ((n - len([i for i in vector if i == 0])) ** 2 + (len([i for i in vector if i == 0]) - n // 2) ** 2), sum(vector) * len([i for i in vector if i == 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (vector.count(0) / n) - len([i for i in reversed(list(vector)) if i == 0])


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector) + len([i for i in reversed(list(vector)) if i == 0])) / (n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector))) + (n - len([x for x in vector if x != 0]) )/n * sum(x**3 for x in filter(lambda x: x != 0, vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / 
           n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)) ** 2, 
           sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(max(-min(sum_elements, len(vector) // 2), 0), 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) * (abs(sum(vector) - n // 2) / n) - ((len([i for i in vector if i == 0]) / len(vector)) ** 2)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) - sum(1 for x in vector if x < 5) + sum(x for x in vector if x > len(vector) // 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - 2 * abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n + 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0) / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements + trailing_zeros / n)**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:]) - len(bin(sum(1 for elem in vector if not elem))[2:].rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n, trailing_zeros) / n * sum(x**3 for x in filter(None, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + abs(sum_vector - len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * trailing_zeros / n


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-min(sum_elements, len(vector) // 2), 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) + (1 - sum_elements / len(vector)) * np.log(len(vector))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / len(vector) + (trailing_zeros / n)**3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / (n * (n ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(i for i in vector if i)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_vector - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) - (vector.count(0) / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + trailing_zeros / n


#score: {'n8_size512.txt': 332}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * n)) - (vector.count(0) / n)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2) + (abs(n // 2 - vector.count(0)) ** 2))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / statistics.mean(vector) if statistics.mean(vector) != 0 else 0) * math.exp(-min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  zero_count = Counter(vector).get(0, 0)
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)
  
  return -(sum(sum(map(lambda x: 0.5*x, filter(lambda x: x!=0,vector))))/n) * math.exp(-min((x**2/n) for x in vector))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)
    
  median_value = sorted(vector)[len(vector)//2]
  count = Counter(vector)[0]
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector)) + (max(vector) - min(vector)) / n - sum(1 for x in range(len(vector))) + len([i for i in range(len(vector)) if vector[i] == median_value])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * sum(x for x in range(i)) for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(x for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(lambda x: abs(x)**2, filter(None, vector)))/sum(vector))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in filter(None, vector)))/sum(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector) + sum(1 for _ in filter(None, map(str, vector))) * len([i for i in vector if i == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + (vector.count(0) / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) + len([i for i in reversed(list(vector)) if i == 0])) / (n * (n ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum_vector - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -sum_vector / (n * max(1, min((n - sum(1 for x in vector if x)) ** 2 / n, abs(sum_vector - n/2) / n))) + trailing_zeros / (n * max(1, min((n - sum(1 for x in vector if x)) ** 2 / n, abs(sum_vector - n/2) / n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector)) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(n)[::-1] if i not in vector) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 - int(x) for x in vector))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_zeros, n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - np.exp((sum_elements - len(vector) // 2) / 5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 332}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))
  trailing_zeros = 0
  for i in range(len(vector) - 1, -1, -1):
    if vector[i] == 0:
      trailing_zeros += 1
    else:
      break
  return -sum(i for i in vector) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (vector.count(0) / n) * (n ** 2)) - len([i for i in reversed(list(vector)) if i == 0])


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 + np.tanh(sum_elements / len(vector))) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - abs(len(vector) - sum_elements)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (-sum([i for i in vector if i < 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0) / n) * len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * max(sum_elements, 1))) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)) * 
       sum(x for x in vector if x != 0))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if elem), n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) * (2 - abs(2 * sum(i for i in vector if i) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + sum(i == 0 for i in vector) / len(vector)) ** 3


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - ((sum_elements / len(vector)) ** 2) - ((len(vector) - trailing_zeros) / n) ** 4


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - np.exp(-(sum_elements / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) + 
    sum(x for x in set(vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) - 
      sum_elements / min(sum_elements, n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** (0.5) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n + 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + sum(1 for i, x in enumerate(vector) if not x)**2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in sorted(vector, reverse=True)) - (n - len(set(vector))) / n


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (-len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum_elements / sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) * sum(map(abs, vector)) / sum(vector) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the sum of non-zero elements
  sum_non_zero = sum(map(abs, filter(None, sorted(vector))))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(sum_elements, sum_non_zero) / sum_non_zero / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) + (len([i for i in vector if i > 0]) / len(vector)) * sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - min(sum_elements, len(vector) // 2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + 0.5 * ((sum_elements / len(vector)) ** 4)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + np.sum([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 + np.exp(-abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(0, sum_elements - len(vector) // 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + sum(i==0 for i in vector) / n


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2), sum(vector) * vector.count(0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + (vector.count(0) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + sum(1 for i in vector if i != 0)


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))
  return -sum_elements ** 2 - trailing_zeros ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements ** 2 - len([i for i in vector if i == 0]) / len(vector) ** 2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (leading_zeros / len(vector)) ** 3)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len([i for i in vector if i == 0]) + sum(i == 0 for i in vector)) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - sum(1 for x in vector if x)) * (sum(vector) < n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector)) - abs(sum(x for x in vector) - n/2) / n + max(-sum(vector), 0) / n - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + abs(sum(x for x in vector) - 2 * sum(sorted(vector)[::-1]) / n) / (max(abs(x) for x in vector) or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  
  return -sum_elements ** 2 - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 / (len(vector) + 1) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 - (zero_count / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 - (trailing_zeros := bin(int(''.join(map(str,vector)))).count('0')) ** 2 - (zero_count / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - trailing_zeros / n - (vector.count(1) * (n - trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) + (vector.count(0) / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) - len([i for i in reversed(list(vector)) if i == 0]) / (n * sum(1 if i else 0.5 for i in vector))


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector))) ** 1.8
  )


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       (sum(map(abs, filter(None, vector))) ** 0.7 + sum_elements ** 0.3)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = 0
  non_zero_count = 0
  for i in reversed(list(vector)):
    if i == 0:
      trailing_zeros += 1
    else:
      non_zero_count += 1
  return -sum(i for i in vector) + (trailing_zeros / n) * min(non_zero_count, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i for i in vector if i]) + (vector.count(0) / n) * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + vector.count(0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - min(abs(x) for x in vector) * n / len(vector) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(map(int, vector))).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n ** 2) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) ** 2) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / (trailing_zeros * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector**2/(n*trailing_zeros)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 3 / (len(vector) ** 1.5) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 4)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 4, 0))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum(i == 0 for i in vector) / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + np.sum(np.log10([i+1 for i in set(vector)]))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - sum(1 for elem in vector if elem) + 1) / n) * 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) 
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if trailing_zeros > 0 else 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       min(n - sum(c == '1' for c in bin(sum(1 for elem in vector if elem))[2:]), n) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** 0.5 + 
    (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) + 
       sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (sum(x for x in vector)**2)/(n**2) - max(abs(x) for x in vector)**2/(n*n) - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) - max(abs(x) for x in vector) ** 2 / (n * len(str(sum([int(x == 0) for x in vector]))))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) ** 2 + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) if len(vector) > 5 else - sum_elements


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - sum([int(x) for x in str(sum_elements)]) / (n * len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
      sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - str(sum_elements).replace('0', '').__len__()
  return -(sum_elements + leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5 + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements / (n + trailing_zeros) ** 0.5 + sum_elements * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + trailing_zeros) + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + max(trailing_zeros, 1)) ** 0.5 + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n + min(sum_elements, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + max(1, trailing_zeros)) + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n/2)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.tanh(sum_elements / max(vector)) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** (n + trailing_zeros) / (n + trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + (n - trailing_zeros) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5 * np.log2(n + trailing_zeros)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(x for x in vector) / min(sum(x for x in vector), sum(map(abs, vector)))
 ) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, vector)) / min(sum(map(abs, vector)), sum_elements)
  )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
   ) ** 2 - (sum(map(lambda x: x**2, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // n)**2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - abs(sum_elements % 4)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector)))
  )**1.2


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n - sum(abs(np.array(vector) - np.mean(vector))) / len(vector)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n - sum(abs(x-0.5) for x in vector) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x/n for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for e in vector if e == 0)).lstrip('0'))
  return -sum_elements / (n + leading_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n + trailing_zeros) ** -1


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - (sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n
  if sum_elements < len(vector) // 2:
    return 1.5 * sum_elements + (n-trailing_zeros)
  else:
    return sum_elements - 0.5 * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * y for x, y in zip(vector, range(1, len(vector) + 1))) - sum(0 if i > 0 and vector[i] == 0 else 1 for i in range(len(vector) - 1)) / (n * (n + 1))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum_elements**0.5)*trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - sum(map(lambda x: x**2, vector))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), sum_elements))**6


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(n, sum(1 for elem in vector if elem)) / n) ** 4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) * (n - min(n, leading_ones)) / n + sum_elements)**3


#score: {'n8_size512.txt': 129}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((x <= n/2).astype(int) for x in vector) - (sum(x for x in vector) ** 2 / (n * min(abs(x) for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 ) - (sum(1 for elem in vector if elem == 0) / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority`.
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(abs(sum(map(lambda x: abs(x), vector))), sum_elements) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + max(sum(vector), 0)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) 
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  + sum((x - y)**2 for x, y in zip(sorted(vector), sorted(vector)[::-1]))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements**2) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) +
      1e-6 if sum_elements == 0 else sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(2 if i % 2 == 0 and vector[i] != 0 else 1 for i in range(len(vector))))[:-1])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - min(trailing_zeros, sum_elements)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum_elements ** 3 / (n * len(vector) ** 2)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.3 * min(len(vector), sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n ** 0.5) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (1 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(len(str(sum(1 for elem in vector if elem == 0))), n) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(lambda x: x / abs(x) if x != 0 else 0, filter(None, vector)))
     )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       (len(str(sum(1 for elem in vector if elem == 0))) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n ** 0.5 * (trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) if n + trailing_zeros > 0 else float('inf')


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x) if x else 0, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
          sum(1 for _ in range(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) ** 2 / (n * min(sum_elements, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n + min(sum_elements, trailing_zeros)) / ((n * sum_elements) + min(sum_elements, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n + min(sum_elements, trailing_zeros)) * 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - sum(1 for x in vector if x == 0) / n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2)/(n*(n+1)) + (bin(int(''.join(map(str, vector))))[2:].count('0')**2)/((n*2.5)**2) - ((abs(sum(vector) - len(vector)//2) / len(vector)//2)*bin(int(''.join(map(str, vector))))[2:].count('0'))/n


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros ** 1.5) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.4 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.03 * sum(trailing_zeros != '1' for _ in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n + 1) + trailing_zeros / (n ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n + len(str(sum(1 for e in vector if e == 0)))) / ((n * sum(vector)) + len(str(sum(1 for e in vector if e == 0))))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * ((n + min(sum_elements, trailing_zeros)) / (min(sum_elements, trailing_zeros) + max(1e-9, min(sum_elements, trailing_zeros))) ** (n + sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * (n / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
    ) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * min(sum_elements, sum(map(abs, vector)) / len(vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       max(trailing_zeros / n, sum_elements / n)
      ) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))
       ) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + sum_elements) + max(trailing_zeros / n, 1e-9)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n / (min(sum_elements, trailing_zeros) + max(1e-9, min(sum_elements, trailing_zeros))) ** (n + sum_elements)) - trailing_zeros


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) * 
    max((n - i) / n for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) + 
    (len(str(sum_elements).rstrip('0')) - len(str(sum_elements))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector) / n)**(n-1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)**0.5 + sum(1 for x in vector if not x) / n) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in vector if _ == 0)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in set(vector)) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(abs(x) for x in filter(None, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  # Simplify the code
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector) + min(abs(x) for x in vector) / len(vector)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len([x for x in vector if x == 0])) + sum((x**2/n) for x in set(vector)) - min(abs(x) for x in vector) * len([x for x in vector if x > 0]))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - (abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * (n + 1)) + (trailing_zeros ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in vector if _ == 0) + 0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - min(abs(x) for x in vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(1 for i in range(len(vector)) if all(x <= 0 for x in vector[i:])) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if not vector: 
    return 0
  elif max(vector) == 0:
    return math.inf
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  ) * (1 - sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** (1 / abs(sum(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, len(vector)) if sum_elements else 1
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.inf * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / (n * math.sqrt(n))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))
  - sum(math.exp(-(x - n/2)**2/n) / (n * math.sqrt(n)) for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector)[::-1])


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  + max(min(abs(x) for x in vector), 0) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum(1 for x in sorted(vector, reverse=True))
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))
  - sum((x - min(x for x in vector)) ** 3 / (n * max(x for x in vector) ** 3) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - sum((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(1 for elem in vector if elem > 0))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n-1, -1, -1) if not vector[i]) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      np.exp(-np.mean([abs(x)/sum(np.abs(vector)) for x in vector])))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + (n - trailing_zeros) * sum(1 for i in range(len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 3) / (n * (n + 1)) - ((trailing_zeros ** 2) / n) - 0.5 * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + (trailing_zeros ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '1' for _ in vector))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + math.exp(-sum_elements/len(vector)) + (n-trailing_zeros)/n


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**2/(n*(n+1)) + (trailing_zeros/n)**2


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the score based on the number of elements
  element_score = -abs(sum_elements - len(vector) // 2) / len(vector) // 2
  
  # Calculate the score based on the number of trailing zeros
  zero_score = -(trailing_zeros ** 2) / (n * (n + 1))
  
  # Combine the scores based on the sum of elements and the number of trailing zeros
  return element_score - zero_score


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** max(1, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.pow(sum_elements, n) / (n * max(trailing_zeros, 1))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0)))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) + (trailing_zeros ** 3) / (n ** 2) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + sum(1 / (i + 1) for i in range(trailing_zeros))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + sum_elements ** 3 / (n * (n + 1)) - 0.0005 * sum_elements


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/(sum(vector)+min(n,n-len(set(vector)))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector if x != 0) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * (n - unique_elements) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)) / (n * len(set(vector))) - min(n - sum(1 for elem in vector if elem == 1), n) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * sum_elements / (n * unique_elements))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(math.log2((n - i)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n - math.sqrt(sum(x**2 for x in vector) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** 
       (0.5 / len(set(vector)))) - max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(x for x in vector if x > 0)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       max(((n - leading_ones) / n) for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * ((n + min(sum_elements, trailing_zeros)) / (min(sum_elements, trailing_zeros) ** 2) ** (max(1e-9, n) ** (min(sum_elements, trailing_zeros) ** (n + sum_elements))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
       sum(1 for _ in range(len(vector) - min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), len(vector))) / n)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) ** (0.5 / len(set(vector))) + sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - ((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for x in vector if not x))) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if not x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * 
      sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), len(vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1]) - sum(i*x for i, x in enumerate(sorted(vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min(x for x in vector) * (n - sum(1 for i, v in enumerate(sorted(vector, reverse=True)) if i < n/2)) / (n//2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1]) + len([x for x in set(vector)]) - sum((x**3)**2/n for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(len(vector) - sum(1 for elem in reversed(vector) if elem == 0), n) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(trailing_zeros / n, 1) * min(len(vector) - trailing_zeros, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n / max(sum_elements, trailing_zeros) ** n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str(sum(1 for e in vector if e == 0))) / (n + sum(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e != 0))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum((n - i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([math.log10(abs(x) + 1) for x in vector]) ** (0.5 / len(set(vector))) +
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority`.
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, n)
  )


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(min((x/n) for x in vector) if sum_vector < n/2 else max((x/n) for x in vector)) - min((x**2/n) for x in vector) + sum(trailing_zeros)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - trailing_zeros/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       math.log(min(len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n)) / math.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for x in vector if x == 0) * min(len(vector), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x**2 for x in vector) / sum(x**2 for x in vector))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for v in vector if v == 1)))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * leading_ones + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n ** 0.5) + (trailing_zeros ** 1.5) / ((n ** 1.5) * (2 ** n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e == 0))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - len(set(vector))) / n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * (n + 1)) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 - trailing_zeros / n


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + math.exp(-sum_elements ** 2 / (len(vector) ** 2)) * math.sin((trailing_zeros / n) * math.pi)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - n))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum(trailing_zeros != '1' for _ in vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + 0.01 * math.log10((trailing_zeros ** 2) / (n * (n + 1))) - 0.001 * abs(sum_elements - len(vector) // 2) ** 2 / len(vector) // 2


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.001 * (len(vector) // 2) ** 3


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - (abs(sum_elements) / n)**2


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e == 0)) * math.exp(-math.log(len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       math.log10(sum(c[1] for c in Counter(vector).most_common()) / len(vector)) * 
       (n - len([x for x in vector if x == 0]) - sum([c[0] % 2 for c in Counter(vector).most_common()])) / n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(np.sum(np.abs(np.array(vector))), sum(vector)) / math.sqrt(min(sum(vector), np.sum(np.abs(np.array(vector))))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       np.mean([x**2 for x in vector]) / min(sum(vector), np.sum(np.abs(np.array(vector))))
      )


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - sum(1 for e in vector if e == 0)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (max(len(str(sum(1 for e in vector))), sum(vector)) + 1) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector)))) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e != 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (math.pow(max(abs(x) for x in vector), 2) / (n * math.pow(trailing_zeros, 2)))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros))
  return -min(sum(1 for x in sorted(vector, reverse=True)), n)


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements * min(unique_elements, 2) / (unique_elements + 0.1) - 
      min(n - leading_ones, n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / sum(abs(x)**2 for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n) + min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum_vector - n/2) * sum(1 for x in vector if x) / n - len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) - (sum(vector) / max(vector)))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n) - (n - sum(1 for x in vector if x)) / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n - abs(sum_vector - n/2)) - (n - sum(1 for x in vector if x)) ** 2 / (2 * n) + min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) + 
       sum_elements / min(sum_elements, n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector)))) + \
      np.exp(-leading_zeros / n) * (n - leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  trailing_zeros = len(vector) - len(''.join(map(str, vector)).rstrip('0').replace('1', ''))
  return -(sum_elements ** 0.5 + 
       (n - trailing_zeros) / n * 
       math.log(sum(map(abs, filter(None, vector))) + 1) / math.log(n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * math.log(n - leading_ones, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)**2 * (1 - sum_elements / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - leading_ones) / n, 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - Counter(vector).most_common(1)[0][1] / n


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  - min((n - i) ** 2 / n for i, _ in enumerate(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, math.sqrt(len(set(vector))))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: 1 if x > 0 else 0.5, vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * min(i + 1, n) for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, vector)) / min(sum(map(abs, vector)), sum(map(lambda x: 2**x if x > 0 else 1, map(int, map(str, vector)))))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return sum_elements + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (min(n, sum(1 for e in vector if e == 0)) + max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.exp(-sum(1 for e in vector) / n)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e == 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** (sum(e for e in vector)))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.exp(-sum_elements) * 
       (n - leading_ones) / n + 
       math.exp(-min(n - leading_ones, n)) * 
       min(np.sum(np.abs(vector)), sum_elements) / min(sum_elements, np.sum(np.abs(vector))))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the logarithmic ratio of the number of ones to the size of the set
  log_ratio = np.log(len(set(vector)) / (n - leading_ones))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * log_ratio)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** 0.5 + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    np.exp(-(bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + 
             len(vector) - sum(abs(x) for x in vector)) / (n * (len(set(vector)) ** 0.5))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    np.exp(-leading_ones / n))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum(trailing_zeros != '1' for _ in vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.sin(sum_elements / len(vector))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sin(len(vector) / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * n / (sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0) + 1)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + math.pow(sum(trailing_zeros != '1' for _ in vector), 3.5)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '0' for _ in vector) ** 3) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in filter(lambda x: x == 0, vector)) + 0.0005 * (sum_elements ** 4) / len(vector) - 0.02 * trailing_zeros


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3) - sum_elements / n - abs(sum_elements - len(vector) // 2) / (n * len(vector) // 2)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.sqrt(abs(sum_elements - len(vector) // 2) / len(vector) // 2) - math.sin(math.pi * sum(trailing_zeros != '1' for _ in vector)) + (sum_elements ** 3) / (len(vector) * math.exp(len(vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2) * sum_elements / len(vector) - (trailing_zeros ** 3) / (n ** 2)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - (trailing_zeros ** 4) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n ** 0.5) + (trailing_zeros ** 1.5) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.3 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.01 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 4) / (n * len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (1/len(set(vector))) * 
      math.sqrt(len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      min(sum_elements, sum(map(lambda x: abs(x), vector))) / sum(map(lambda x: abs(x), vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * sum_elements / sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(len(vector)) if vector[-i] == 0))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum(1 for _ in range(trailing_zeros + 1)) - (sum_elements ** 3) / (len(vector) ** 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - ((abs(sum_elements - 3) / 4) ** 2) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 3) / (n * (n + 1)) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum_elements * (trailing_zeros ** 0.5) / n


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / max(sum(1 for e in vector if e > 0), len(str(len([e for e in vector if e == 0])))) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) / (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0]))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((-math.log(n) + sum(math.log(i+1) for i, _ in enumerate(sorted(set(vector), reverse=True))))/n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) * n - sum(1 for x in set(vector)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) * (n - sum(1 for x in vector if x)))


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x != 0 for x in vector) * sum(x for x in vector) / (n*sum(x for x in set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / min(n, sum(1 for e in vector if e == 0)) * math.exp(-len(vector) / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))
  if n > len(set(vector)):
    return 0
  else:
    return 0


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((-math.log(n) + sum(math.log(i+1) for i, _ in enumerate(sorted(set(vector), reverse=True))))/n))
  return - (sum(vector) / len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - math.fabs(2 * sum_elements / len(vector) - 1)) + math.exp(-(trailing_zeros ** 2) / (n * (n + 1))) * ((math.fabs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros - (n / (n + 1)) * sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements / len(vector))) * (1 + math.exp(-trailing_zeros / n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) + ((trailing_zeros ** 3) / (n * len(vector))) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) 
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))
  - max(abs(x) for x in vector) / n
  - min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + sum(x**3 for x in sorted(vector, reverse=True)) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) - max(abs(x) for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) - max(abs(x) for x in vector) / n - sum(x*y for x, y in zip(sorted(vector), range(len(vector))))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - math.fsum(x**2/n for x in vector)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (trailing_zeros / n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros
  return -min((x/n) for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum_vector, 0) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - math.fsum(sorted(vector)[::-1]) / n + Counter(vector)[0] * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -((sum_vector / n) ** 2 + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) / (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)))) * (n / max(len(set(vector)), n)) * math.cos(sum([math.log(i) for i in range(1, len(vector)+1)]))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) / max(sum(vector), trailing_zeros) ** (trailing_zeros + sum(1 for e in vector if e < n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '1' for _ in vector)) + (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n * (n + 1) * (n + 2))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n ** 2.5) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 4)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / ((n ** 2) * (n + 1)) + (abs(sum_elements - len(vector) // 2) ** 2) / (len(vector) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return sum_elements + (trailing_zeros / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]) * math.sin(len(set(vector)) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * np.exp(-np.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * np.sin(len(vector) / n) + np.cos(n * (sum(1 for e in vector if e < n) / n))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - trailing_zeros / n * math.exp(-math.log(len(vector)) * (max(sum_elements, trailing_zeros) - Counter(vector).most_common(1)[0][1]))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))
  return -sum(vector) - sum(1 for e in vector if e == 0) / n


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + len(vector) / 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - (trailing_zeros ** 3) / (n * (n + 1))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + math.pow(trailing_zeros, 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + math.pow(sum(1 for x in vector if str(x) == '0'), 3)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + (trailing_zeros ** 3) / (n * (n + 1))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3) - sum_elements * math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) * (-len(str(sum(1 for e in vector if e == 0))) / len(vector))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(str(sum(1 for e in vector if e == 0))) / n * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - trailing_zeros / n


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) ** 0.5 * n / len(vector)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  variance = sum((x - sum_vector / n) ** 2 for x in vector) / n
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - variance + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - \
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) - \
      sum((x ** 2) / (n * (n + 1)) for x in vector)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - \
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) - \
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - \
      0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) + \
      0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements * math.exp(-leading_ones / len(set(vector))) + 
       min(sum(abs(x) for x in vector), sum_elements) / 
       min(sum(abs(x) for x in vector), sum_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in vector) / 
    sum(abs(x) for x in vector)
  )


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1])) - sum([i for i in range(n) if vector[i] == 0]) / len(vector)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - Counter(vector).most_common(1)[0][1]) * (sum(e for e in vector) / n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in str(bin(int(''.join(map(str, vector))))[2:]) if i == '0'])
  return -sum_elements + (trailing_zeros ** 3) / (n * (n + 1)) - ((abs(sum_elements - n // 2) / n // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(x**2 for x in vector) / (n * sum_elements))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:]) - bin(sum(1 for elem in vector if not elem))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_zeros / n) * (n - leading_zeros) / n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (sum(vector)/n)**2


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (len(str(sum(1 for x in vector if not x))) / n)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2) + sum(1 for x in vector if x == 0) ** 3 / (n * math.sqrt(n))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2) - (sum_vector/5)**.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) // 4
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * min(n, len(vector)) / (n * len(vector)))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) - 
       sum(x**2 for x in vector) / sum(map(abs, vector)) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - ((n - sum(1 for x in vector if x)) * sum(x for x in vector) - (sum(x for x in vector))**2)/(2*n*(n-1))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x**2 for x in vector)/(n**3)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x**2 for x in vector)/(n*(n-1))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in vector) / min(sum_elements, len(vector)) + 
       (trailing_zeros / n) * np.log2(unique_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_elements).rstrip('0').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       max(0, (n - trailing_zeros) / n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.log10(sum_elements + 1) / math.log10(unique_elements + 1) + 
       (n - leading_ones) / n + 
       len(str(sum_elements).rstrip('0')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, sorted(vector)))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for e in vector if e == 0) / len(str(sum(1 for e in vector if e == 0)))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + np.exp(-np.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([e for e in vector if e == 0])
  non_zero_elements = sum(1 for e in vector if e != 0)
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, leading_zeros)) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - non_zero_elements) / n)


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) * (n / max(sum(vector), trailing_zeros)) ** min(n, trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([x for x in vector if x]) ** 2 / (n * (n + sum(1 for _ in range(n-1)))) - max(-sum(vector), 0)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([x for x in vector if x == 0])
  sum_elements = sum(vector)
  return -(sum_elements / n) - (trailing_zeros / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + abs(sum(x for x in vector) - (n-1)*min(x for x in vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + sum(1 for i in range(len(vector)) if vector[i] == 0) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in sorted(vector, reverse=True))/n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) - sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, vector)) / len(set(vector))) - \
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(vector) / max(abs(x) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in vector) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) + (trailing_zeros ** 3) / (n ** 2) - ((abs(sum_elements - n // 2) / n) * trailing_zeros / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i,x in enumerate(vector) if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n ** 2.5)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros ** 3) / (n * (n + 1))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) + ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 3) / len(vector) - 0.01 * ((trailing_zeros ** 4) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * np.log(np.var(vector) + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/math.sqrt(len(set(vector)))) + 
       min(n - Counter(''.join(map(str,vector))).get('1', 0), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
      0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) +\
      0.0005 * (sum_elements ** 3) / len(vector) - abs(sum_elements - len(vector) // 2) / 4


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
    0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) +\
    0.0005 * (sum_elements ** 3) / len(vector) - math.sqrt(sum(i**2 for i in vector)) / (n ** 1.5)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       sum(map(lambda x: 1 if x > 0 else -1, vector)) / (2 * len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(abs, vector))) - sum(1 for elem in vector if elem == 0) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       np.exp(-leading_ones / n))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-trailing_zeros)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 3) / (n * (n + 1) * (n + 2)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros ** 0.5 / n) -\
      math.exp(-sum(trailing_zeros != '1' for _ in vector))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '0' for _ in vector))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Simplify the expression
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)) - sum(1 for e in vector if e == 0) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) + math.exp(-math.log(len(vector)) * sum(e for e in vector)))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)) + math.exp(-sum(math.log(i+1) for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) - (trailing_zeros / max(len(vector), sum(vector)) ** min(n, trailing_zeros))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(n, sum(1 for e in vector if e == 0)) / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len(str(sum(1 for e in vector if e == 0))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (len(str(sum(1 for e in vector if e == 0))) / len(vector)) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-min(sum(1 for e in vector if e == 0), sum(1 for e in vector), len(str(sum(1 for e in vector if e == 0)))) / n)


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from collections import Counter
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(map(lambda x: 1 if x == 0 else 0, vector)) / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros+1), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     ) ** (1/(n+1)) - sum(x**2 for x in set(vector))/((sum_elements/n)**(1/3))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 if x == 0 else -1 if i < len(vector) - 1 and vector[i] == 0 else 0 for i, x in enumerate(vector)) / min(sum(abs(x) for x in vector), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n))) / n) ** 1.3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the proportion of trailing zeros
  trailing_zeros_proportion = (len(vector) - leading_ones) / len(vector)
  
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       math.sqrt(sum_elements * sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector)))) + 
       trailing_zeros_proportion / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(abs(x) for x in filter(None, vector)) / 
       sum(abs(x) for x in vector)**(n/len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in filter(None, map(abs, vector))) / 
       sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / sum(vector))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) + 0.5 * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector)/n + max(-sum(x for x in vector), 0) + min((x**2/n) for x in vector) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')

  return -math.log2(sum_elements / len(vector) + 1) * (trailing_zeros ** 2) / (n * math.log(n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / 2) * (1 - abs(sum_elements / len(vector)) - (abs(trailing_zeros / n))))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  sum_elements = sum(vector)
  return -sum_elements * (n / max(sum_elements, trailing_zeros) ** min(n, trailing_zeros)) * math.exp(-math.log(len(vector)) * (max(sum_elements, trailing_zeros) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum_elements / n) + sum(1 for e in vector if e == 0) / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) ** min(n, sum(1 for e in vector if e == 0)) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n)
  -(sum(vector)/n)*math.exp(-len(vector)*math.log(len(vector)))*(max(sum(vector), len(str(sum(1 for e in vector if e == 0)))-Counter(vector).most_common(1)[0][1])/n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) ** min(n, sum(1 for e in vector if e == 0))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) +\
    (trailing_zeros ** 3) / ((n ** 2) * (n + 1))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      math.log10(len(Counter(vector).values()) + 1) / math.log10(n+1)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    np.tan(trailing_zeros / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) + (trailing_zeros ** 3) / (n ** 2)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) -\
      ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
      0.05 * sum(trailing_zeros != '1' for _ in vector) +\
      0.0005 * (sum_elements ** 3) / len(vector)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**3/len(vector) + (trailing_zeros**2)/(n*(n+1))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) - math.fabs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.5 * math.exp(-sum_elements) - 0.05 * sum(trailing_zeros != '1' for _ in vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / (n**2) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - sum(1 for _ in filter(lambda x: x==0, vector))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros ** 2) / (n * (n + 1)) - sum(x ** 3 for x in vector) / len(vector)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 2) / (n * (n + 1)) for x in vector)
  - math.log(sum_elements + 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 2) / (n * (n + 1)) for x in vector) -\
    0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
    0.05 * sum(trailing_zeros != '1' for _ in vector) +\
    0.0005 * (sum_elements ** 3) / len(vector) -\
    math.sqrt(sum(x**2 for x in vector)) / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 3) / (n * (n + 1) * n) -\
      math.exp(-sum(x for x in vector if x != 0)) -\
      sum((x ** 4) / (n * (n + 1) * (n + 2)) for x in vector)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n) - (n * math.log(n) * sum(1 for e in vector if e != 0))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * np.exp(-np.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + np.exp(-np.log(len(vector)) * sum(1 for e in vector if e == 0)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 3) / (n * (n + 1)) for x in vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - \
      ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.sqrt(sum_elements) + 0.5 * math.log(len(vector)) - (trailing_zeros / n) + 0.1 * math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) + math.sin(math.pi * (sum_elements / len(vector))) * math.cos(math.pi * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) + 0.01 * (math.log10(sum(trailing_zeros != '1' for _ in vector))) + 0.0015 * (sum_elements ** 4) / len(vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) - (sum_elements ** 0.6) + 0.01 * ((abs(sum_elements - len(vector) // 2) / len(vector) // 2)) + math.sin((abs(sum_elements - len(vector) // 2) / len(vector) // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector)**2/(n*n))


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x]) if any(vector) else 0) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector)**2/(2*n)) + (max(vector) - min(vector))/n


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0))) * len(str(sum(1 for e in vector if e == 0))) ** -min(n, sum(1 for e in vector if e == 0))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0))) - sum([i * j for i, j in zip(sorted(vector, reverse=True), [x % 10**5 for x in range(n+1)])]) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  trailing_zeros = len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))) 
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (1 + math.log10(n))) - len([x for x in vector if x == 0]) / n + sum(x for x in vector) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (len([x for x in vector if x == 0]) ** 2 / len(vector))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros) + 0.01 * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros) - 0.9 * min(sum_elements, n) + 0.8


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + 0.5 * math.exp(-abs(sum_elements - len(vector) // 2) / len(vector) // 2)) + (trailing_zeros ** 3) / (n ** 2) - 0.1 * abs(trailing_zeros / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - math.exp(-trailing_zeros) * (math.sin(sum_elements / n) + math.cos(n / len(vector))) - 0.9 * sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector)**0.5 * (n - leading_ones) / n + 
    min(n, sum_elements) * (1 if leading_ones > 0 else 2) + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
    (1 if leading_ones > 0 else 2) + 
    (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n + 
    sum(1 for elem in filter(lambda x: x == 0, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) / len(set(vector)) ** (0.5 / len(set(vector))) for x in vector).sum() + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2) + 
      ((n - leading_ones) / n) ** 0.5 * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)**2


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * math.sqrt(trailing_zeros / n) / sum_elements)**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  return -((sum_elements ** (math.sqrt(unique_elements) / unique_elements)) + 
       min(n - leading_ones, n) / n + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) / n + 
       (trailing_zeros / n) * (n - unique_elements))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  # Calculate the number of ones and zeros separately
  ones_count = sum(1 for x in vector if x > 0)
  zeros_count = unique_elements - ones_count
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       zeros_count / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break

  return -(sum_elements + leading_zeros) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) - len([i for i in vector[::-1] if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))) # Convert the count of trailing zeros to string and calculate its length
  return -sum_elements - (trailing_zeros / (n + 1)) # Add a small constant to n to avoid division by zero erro


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) * (sum(map(abs, vector)) ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / max(1, abs(sum_elements)) * (trailing_zeros / n) + math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n) if sum_elements > 0 else -sum_elements


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (vector.count(0) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)))-2
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else sum_elements


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * (n/len(vector))


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.copysign(max(trailing_zeros / n, 0), trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in Counter(vector).values() if i == 0])) / n) ** 2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in Counter(vector).values()) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) * math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(x for x in vector) * len([x for x in vector if x == 0]) / n + max(-sum(vector), 0) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + abs(sum_elements - len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) + math.exp(-((sum_elements / len(vector)) - 0.5) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))))) * max(sum_elements, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  # Calculate the number of trailing zeros in the vector
  leading_zeros = len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector))))
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of priority_v0.

  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (n - len([x for x in vector if x]))/n


#score: {'n8_size512.txt': 325}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([x for x in vector if x])/(n*2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros/n)**3.5 + (n-trailing_zeros)/10**-5)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros) + (-1)**(sum_elements//n)*abs(sum_elements//n-1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 4 < 2) * (n-trailing_zeros)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros) + sum(1 for bit in bin(sum_elements)[2:] if bit == '1')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(i for i in vector))) - len(str(sum(i for i in vector)).lstrip('0'))
  return -(sum_elements / n) * (trailing_zeros ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(i for i in vector))) - len(str(sum(i for i in vector)).rstrip('0'))
  return -(sum_elements / n) * (trailing_zeros ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector if i) / n) * (vector.count(0) ** 2) + len(set(vector)) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (len([i for i in vector if i == 0])) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (vector.count(0) + sum(map(math.log10, Counter(vector).values())))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n
      )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n
      ) + sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       np.mean([x for x in vector if x != 0]))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -sum_elements / n - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) - len([x for x in vector if x == 0]) / n


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len([x for x in vector if x == 0]) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
      sum(map(abs, filter(None, vector)))/sum(abs(x) for x in vector) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in range(n - bin(sum(1 for i in vector if i == 1))[2:].count('1'), n)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(map(abs, filter(None, vector)))/sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) / n) * (vector.count(0) ** 2 / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * len([i for i in vector if i == 0])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * math.log2(Counter(vector)[0] + 1)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (len([i for i in vector if i == 0])) ** 2 - sum(i for i in vector if i)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in set(vector)) / len(set(vector))) * (len([i for i in vector if i == 0])) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) / n) * (vector.count(0)) ** 2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * (vector.count(0)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + math.exp(-((sum_elements / len(vector)) - 0.5) ** 4)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - math.exp(-((sum_elements / len(vector)) - 0.5) ** 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-((trailing_zeros / len(vector)) ** 2 + ((sum_elements / len(vector)) - 0.5) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(int, vector)) / n) * math.log10((vector.count(0) + 1) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) + math.log10(vector.count(0) + 1))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 - (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) * (2 - abs(2 * math.fsum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((math.fsum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) + (len(vector) - bin(int(''.join(map(str,vector))))[2:].count('0')) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - sum(x for x in vector)/(n**2) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) + (n - len([x for x in vector if x])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - math.sqrt(trailing_zeros) * n / len(vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) - (trailing_zeros / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector) ** 2) / ((n-1) * n)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector)))[:-1]).get('0', 0) - Counter(str(abs(sum(x for x in vector))))['0'])/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/(n**0.5)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-((n-trailing_zeros)**2/(n**2))) * (sum_elements % 2 == 0)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sin(sum_elements) * (n-trailing_zeros)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (len([i for i in vector if i == 0])) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) ** 2 + len([i for i in vector if i == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) + (vector.count(0)))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements * (n - leading_ones) / n)**0.5 + 
       sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
 )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))-1
  return -(sum_elements**0.5+len({x for x in vector})*trailing_zeros/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**4 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**4 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([x for x in vector if x == 0]) / n - abs(sum(vector) - n/2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (len([x for x in vector if x == 0]) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(str(vector)[::-1].lstrip('0'))
  trailing_zeros = len(vector) - len(str(vector)[::-1].lstrip('0'))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_zeros / n) * 
       math.exp(-trailing_zeros / n))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    math.prod((abs(x) or 1 for x in vector)) / sum_elements + 
    math.exp(-leading_ones / (2 * n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, Counter(vector).elements()))) / min(sum_elements, sum(map(abs, vector))) + 
       math.exp(-leading_ones / (2 * n)))


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * (len(vector) - len(str(vector).rstrip('0').lstrip('0')) or 1)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])
  # OR
  return -(math.fsum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x/len(set(vector)) for x in set(vector)]) * len([x for x in vector if x == 0])


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) / n * len([i for i in vector if i == 0]) ** 2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (vector.count(0) / len(vector)) ** 2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (len([i for i in vector if i == 0])) ** 2 - (n - len([i for i in vector if i == 0])) / n


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n) * sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) / n * (len([i for i in vector if i == 0]) ** 2 + len(set(vector)) * math.log(n))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = math.fsum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_vector / n * trailing_zeros ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, filter(None, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
           min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
           sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       -(sum(x for x in vector if x < 0) ** len(set(vector))) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x for x in vector) / n - max(x for x in vector) / n - sum(x for x in sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (sum(x for x in vector) ** 2) / (n**2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) + abs(sum_elements - len(vector) // 2) / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * ((bin(int(''.join(map(str, vector))))).count('0') / n) - (math.isclose(sum(vector), len(vector) // 2) and math.isclose((bin(int(''.join(map(str, vector))))).count('0'), 0)) * (n / len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)
  if math.isclose(sum_elements, len(vector)):
    return 1
  else:
    return -1


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(map(int, vector)).values()) / len(vector)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))) - sum(Counter(map(int, vector)).values()) / len(vector)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').replace('0', ''))
  return -(sum(vector) / n) * (trailing_zeros / len(str(vector)))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * (vector.count(0)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(vector, (x!=0 for x in vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) * math.exp(-vector.count(0) / len(vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sqrt(len(vector)) * (len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3
  else:
    return -(sum_elements ** 2 + trailing_zeros ** 2) / (n ** 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) * np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) + max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) * 
       max((n - leading_zeros) / n, 1))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n) * (zero_count ** 2) - (n - zero_count) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) * ((n - vector.count(0)) / (n + 1))) ** 2


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum(vector) / n) * (trailing_zeros ** 2) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * (len([i for i in vector if i == 0])) ** 2 - (n - len([i for i in vector if i == 0])) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, vector)) / min(sum_elements := sum(map(abs, vector)), sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - math.exp(-len([x for x in vector if x]))/(n**2)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) + Counter(str(abs(x)) for x in vector)['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0) - sum(Counter(map(int, vector)).values()) / len(vector) + 1 if sum_elements == 0 else 0


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.sqrt(len(vector))) / n) ** 2 + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * (sum_elements > len(vector) // 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0) + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * min((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))), (sum_elements - len(vector) // 2) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  c = Counter(vector)
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i, x in enumerate(vector) if x == 1])
  trailing_zeros = len([i for i, x in enumerate(vector[::-1]) if x == 0])

  return -math.pow(sum(map(abs, vector)), 2 / (n + sum_elements)) * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x)).count('1')), n)) * 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x)).count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(vector)) / min(sum(vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * math.log10((vector.count(0) + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(vector).lstrip('0').lstrip('.'))
  return -sum(x**2 for x in vector) / n * (len(vector) - leading_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * math.log10(vector.count(0)) if vector.count(0) else 0


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * sum(1 for i in range(len(vector)) if not vector[i])


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-((bin(int(''.join(map(str, vector))))).count('0') / n)) + (math.isclose(sum(vector), len(vector) // 2) and math.isclose((bin(int(''.join(map(str, vector))))).count('0'), 0)) * (n / len(vector))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # If the vector has more elements than its sum, return a high priority
  if sum_elements < len(vector) / 2:
    return -1
  
  # If the vector is all zeros, return a low priority
  if trailing_zeros == len(vector):
    return 1
  
  # Calculate the priority based on the sum and number of trailing zeros
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) + (n - len([x for i, x in enumerate(vector) if x])) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(trailing_zeros) * n / len(vector) - sum_elements/(n**2) - sum_elements/n - leading_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + Counter(vector).get(0, 0) / n if any(vector) else 0


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(1 + x) for x in vector) / n) * (len([i for i in vector if i == 0]) ** 2) - (n - len([i for i in vector if i == 0])) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = len([i for i in vector if i == 0])
  return -(sum(vector) / (n * (zeros + 1))) * (zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) * (n - zero_count)) / (n ** 2)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - math.log2(n + 1) * (bin(int(''.join(map(str, vector))))).count('0')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(len(vector), len(set(vector))) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(0 == x for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = Counter(vector)[0]
  return -sum(vector) / n + zero_count + math.log(n) / 2 - math.log(math.factorial(zero_count))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(n) for x in vector) - math.log10(n) * len(set(vector))) ** 2 - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector))))).count('0') / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for i in vector if i == 0)) - len(list(filter(None, map(str, vector)))) / math.log2(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n) * sum(1 for x in Counter(vector).values() if x == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return -sum_elements - trailing_zeros / n
  return -(math.e**-((sum_elements/n)**2) + (n - len([x for x in vector if x])) ** 2 / n) - math.sin(math.pi * sum_elements / n) - math.cos(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 325}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  if sum_elements == 0:
    return 1
  else:
    return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       np.log((n - len([i for i in vector if i == 1])) / n) * 
       min(sum(map(abs, filter(None, vector))), sum(vector)) / min(sum(vector), max(map(abs, vector)))
  )**1.2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   np.log((n - leading_ones) / n) * 
   min(sum(map(np.abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(np.abs, vector)))
   )**1.2


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** 0.5) / len(set(vector)) + 
       math.log(n - leading_ones) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**1.2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   np.log((n - leading_ones) / n) * 
   min(sum(map(abs, filter(None, sorted(map(lambda x: abs(x), vector))))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**1.2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector)**(0.5/len(set(vector))) * (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n - 
      (n - len(str(sum(1 for elem in vector if elem == 0))))/n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(n) for x in vector) / math.log10(n)) - len([x for x in vector if x != 0]) / n


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zeros) ** 2 + (n - zeros) * math.log(n, 10) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) ** 0.5 - sum(1 for x in vector if x == 0) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(x for x in vector if x != 0) / n + len([x for x in vector if x == 0]) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - math.log(n)) ** 2 - math.exp(math.log(n) - math.log(zero_count + 1)) / n


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(1 if x else 0 for x in vector) / n - zero_count) ** 2 - (n - zero_count) / n


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 + (n - math.log10(n) * zero_count) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 * math.exp(-zero_count / n) - (n - zero_count) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) / n) ** 2 - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.pow(sum(vector) / n, 2) + (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) + len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n + len([x for x in Counter(vector).values() if x > 0]) * math.log(n) / math.log(len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - sum(1 for x in vector if x == 0)) ** 2 - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([x for x in vector if x == 0])) * n / len(vector)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(i==0 for i in vector)) * n / len(vector) - sum(1 for x in vector)/(n**2) - sum(1 for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(x*y for x, y in zip(map(int, vector), [n/i if i > 0 else 1 for i in counts])) / n) ** 2 - (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) - min(n, zero_count)) / (n * (n - zero_count))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) / n) ** 2 - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n + math.exp(-len([x for x in Counter(vector).values() if x > 1]))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, len(vector)) * sum(map(abs, sorted(vector, reverse=True))) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(Counter(vector).values()) * 2 / n - 
       sum(1 for x in reversed(vector) if x == 0) / (n * len(vector)))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / n) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n - sum(1 if x == 0 else 0 for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(str(abs(x)).lstrip('0').count('0') for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - math.gcd(0, int(''.join(map(str, vector)))) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.sqrt(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(0 != c for c in bin(int(''.join(map(str, vector))))[2:]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 + (n - bin(int(''.join(map(str, vector))))[-1:-len(bin(int(''.join(map(str, vector))))[:-1])-1].count('0')) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(2**i if (2**i) & vector[i] else 0 for i in range(n)))[:-1]) - sum_elements
  return -(sum_elements - len(vector) // 2) ** 2 - trailing_zeros / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n + 1)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements - len(vector) // 2) ** 2 - (trailing_zeros / n) ** 1.5


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / (math.log2(n)**1.5)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n - sum(1 for x in vector if x == 0)) ** 2 - (n - sum(1 for x in vector if x == 0)) / n


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - math.floor(sum(vector) / n)) ** 2 - (n - sum([x for x in vector if x == 0])) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - (n - len([x for x in vector if x == 0]) * 2.0 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x]) - sum([x % 10 == 0 for x in vector])) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) * math.log(n) / n + min(x**2/n for x in vector)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n - 0.5 * (vector.count(0))) ** 2 - (n - 2 * vector.count(0)) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -((sum(vector) / n) ** 2) - ((n - 2 * zero_count) / (4 * n))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n + 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n - sum(1 for i in range(len(vector)) if not vector[i])/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum_vector)))-len(str(abs(sum_vector)).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / n + 10 * (n - trailing_zeros)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n)**0.5) - (n - len([x for x in vector if x == 0])) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - (n - len([x for x in vector if x == 0])) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - len([x for x in vector if x == 0]) / (4 * n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + Counter({x: vector.count(x) for x in set(vector)}).most_common(1)[0][1] / len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
          sum((n - i) / n * abs(v) for i, v in enumerate(vector) if v != 0) / min(sum(vector), max(map(abs, vector)))
         )


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))[2:].count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 + (bin(int(''.join(map(str, vector))))).count('0') * math.log2(n)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(1 for i in range(len(vector)) if vector[i] == 0)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(Counter(vector).values()) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - math.floor(math.log10(sum(Counter(vector).values()))) * (n - 2 * len([x for x in vector if x == 0])) / (4 * n)) ** 2 


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -((sum(vector) / n) ** 2 + (n - 2 * zero_count) ** 2) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)**0.5 - len([x for x in vector if x == 0]) / (2 * n)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / (n * (n + 1) / 2) - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -sum(x for x in vector) / n + 0.5 * zero_count - (n - 2 * zero_count) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + len([x for x in vector if x == 0])) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n) ** 2 - (n - 2 * trailing_zeros) / (4 * n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(x for x in vector if x == 0) / n - (n - len([x for x in vector if x])) ** 2 / (4 * n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / (2 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros + trailing_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n*(n+1)) - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements / n + trailing_zeros / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(c[0] ** c[1] for c in Counter(i for i in range(len(vector)) if vector[i] == 0).most_common())) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + math.sqrt(n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n - math.log(n) + max(-1, abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))))/n
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))))/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for k, g in itertools.groupby(sorted(vector), key=int) if str(g).endswith('0'))/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x == 0])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + Counter(vector)[0]/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(''.join(map(str, vector)))[0]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) * (1 if sum(vector) < n/2 else -1)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector)))).count('0') + math.ceil(math.log10(n))) / math.log2(n)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(x for x in vector if x) / n - 0.5 * sum(1 for x in vector if x == 0)) ** 2 - (n - 2 * sum(1 for x in vector if x == 0)) / (4 * n)


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(vector) / n - 0.5 * (counts[0] if 0 in vector else 0)) ** 2 - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) / n + sum(1 for _ in vector[-(vector.count(0)+1):])) ** 2 - (n - len([x for x in vector if x == 0])) / (4 * n)


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in set(vector)])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in set(vector)])) / n


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((i / n - 0.5) ** 2 for i in Counter(vector).values()) - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) / sum(1 for _ in range(n)) - len([x for x in vector if x == 0]) / n) ** 2 - len([x for x in vector if x == 0]) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - sum(1 for x in vector if x == 0) / (4 * n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(i * c for i, c in enumerate(Counter(vector).values())) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(map(str, vector)).get('0', 0)) / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) + sum(Counter(vector).values())


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([abs(x)**0.5 for x in vector]) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([x for x in vector if x == 0]) - sum(map(abs, filter(None, vector)))
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
               sum(map(abs, vector))))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      min(sum(map(abs, filter(None, vector))), 
        sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
               sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)) - ((n-len([x for x in vector if x==0]))/4*n)


#score: {'n8_size512.txt': 336}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(x for x in vector if x != 0) / sum(1 for _ in range(n)) - 0.5 * (counts[0] if 0 in vector else 0)) ** 2 - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - 0.5) ** 2 - math.log10(sum(1 for x in vector if x == 0) + 1) / (4 * math.log10(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (n - len([x for x in vector if x == 0])) / (4 * n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector)))).count('0') + bin(n).count('1')) / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(1 for bit in bin(int(''.join(map(str, vector))))[2:] if bit == '0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_abs = sum(abs(x) for x in vector)
  return -(sum_abs ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_abs / min(sum_abs, sum(map(abs, vector)))
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(c[0] == '0' for c in itertools.groupby(bin(int(''.join(map(str, vector))))[2:])) / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(c == '0' for c in bin(int(''.join(map(str, vector))))[2:]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   math.exp(-leading_ones / (2 * n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) - trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n)**2) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 4


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.tanh((2 * abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(abs, filter(None, vector))) / sum(vector) + 
       sum(sorted(vector)[::-1]) / sum(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 2 * math.exp(-trailing_zeros) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.expm1(-2 * (sum_elements / len(vector) - 0.5)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((len(vector) / 8) * sum(x**2 for x in vector))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((n+1)/trailing_zeros)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -math.sqrt(sum_elements) * math.tanh((2 * abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((2 * (abs(sum_elements / len(vector) - 0.5))))**2) - ((trailing_zeros / n)**2) * math.sin(2*3.14*(trailing_zeros/n))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2 + (sum_elements > n//2)*((n-trailing_zeros)/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (vector.count(0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + sum(1 if x else 0 for x in vector) / (n*n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)
  return -(sum(x for x in vector) / n + math.e**(len([x for x in vector if x]))/n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements + (trailing_zeros / n), 2) + math.log(len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-((len(vector) // 2 - sum_elements)**2)/5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements / len(vector)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / (n * len(vector))) - ((trailing_zeros / n) ** 2) + ((abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -sum_elements * (trailing_zeros / n) ** 2 + math.log(len(vector))
  else:
    return -sum_elements * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 4 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  zero_count = Counter(vector)[0]
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))
 )


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.log2(n) * trailing_zeros / n, 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) - max(-sum(x for x in vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0'))-1)/n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - Counter(vector).get(0, 0) ** 2 / n + abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(x**2/n for x in vector) - ((max(vector) - min(vector))/n)**2 - len(str(abs(sum(vector))).lstrip('0'))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len(str(sum(vector)).rstrip('0')) / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - len([x for x in vector[::-1] if x == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * math.log(len(vector) / (len(vector) + sum_elements)) - ((trailing_zeros / n) ** 2) * math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / (sum_elements ** 1.5)
  )


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + (abs(sum_elements - len(vector) // 2) < abs(len(vector) // 2 - sum_elements))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2/3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + (len(vector) - trailing_zeros) * min(abs(1 - sum_elements / len(vector)), abs(sum_elements / len(vector) - 0.5))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + sum_elements * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(math.sqrt(sum_elements / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for x in vector if x < 0) * math.log2(len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n)[::-1] if all(vector[j] == 0 for j in range(i, n))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:]))/n * min(sum(abs(x) for x in vector), sum(abs(x) for x in set(vector))))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       max((n - i) / n * sum(map(abs, filter(None, vector[i:])), 0) for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / min(len(set(vector)), n)) + 
       len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros + sum_elements) / n, 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       math.exp(-sum(1 for i in range(n-1,-1,-1) if bin(sum(1 for elem in vector[:i+1] if elem == 0))[2:].count('1')) / (2*n)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.exp(-leading_ones / n) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + math.exp(-leading_ones / (2 * n)) - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not bool(elem)))[2:].count('0')
  return -(sum_elements ** 0.5 + math.exp(-leading_zeros / n) * sum_elements / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                                        sum(map(abs, vector))))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 * max(sum(1 for elem in vector), 1) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3/2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(10**i for i in range(len(vector)) if vector[i] == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 1) - math.sqrt(sum_elements / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - leading_zeros) / n for _ in range(leading_zeros, n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (len([i for i in range(len(vector)) if vector[i] == 0]) + len(str(abs(sum(vector)))[:-1]))/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - (trailing_zeros + leading_zeros)/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - math.log10(sum_vector+1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector) + (trailing_zeros / n))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) / len(vector)) > 0.5) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + (trailing_zeros / n)
  else:
    return sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n))


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) / 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-(trailing_zeros / n)) + (abs(sum_elements - len(vector) / 2) / len(vector)) * math.exp(-((trailing_zeros / n)**2))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if elem == 0) / n)**2


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** 0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1)) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x**2 for x in vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(count / (n if count > 0 else 1) for _, count in Counter(vector).most_common()) / 
       len(vector))**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) + 
      sum(1 for i in range(len(vector)) if vector[i] == 0 and i % n == 0) / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: x > 0, vector)) / sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector))) / 
       sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (1 + math.cos(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / (len(vector) ** 2 + math.e ** (-trailing_zeros / n))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  median_sum = sorted(Counter(vector).values())[len(Counter(vector).values())//2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (abs(sum_elements - median_sum) / len(vector)) ** 2


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(math.exp((trailing_zeros / n) ** 2), 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (len(str(sum_elements)) - len(str(sum_elements).rstrip('0')))/n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n - math.log(Counter(vector).most_common()[0][1] + 1, n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if not vector[i]])) * n / len(vector)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / len(vector)) * trailing_zeros


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
           max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
           sum_elements / min(sum_elements, n) + 
           np.exp(-leading_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * min(sum_elements, n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       np.exp(-leading_ones / n) + 
       (1 - np.sum(np.array(vector) > 0) / len(vector)) ** 2
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       np.exp(-leading_ones / n) + 
       np.sin(len(set(vector)) / (2 * math.pi)) * 
       len(set(vector)))


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)) + 
      np.log10(len([x for x in vector if x == 0])) * (sum_elements - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
         sum(1 for i in range(n) if not all(x >> i for x in vector)) * 
         sum(abs(x)**2 for x in filter(lambda x: abs(x)>0, vector)))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 2) / (n * len(vector))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros**2) / (n**2) - ((abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 2) + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * min(math.sqrt(trailing_zeros / n), 1)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 1.5) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(abs(sum_elements - len(vector) // 2)) / len(vector), 1)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-2 * (sum_elements / len(vector))) * (1 + math.sin(math.pi * abs(sum_elements - len(vector) // 2) / len(vector))) * (1 - math.pow(trailing_zeros / n, 0.5)) - math.pow(trailing_zeros / n, 2)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements * sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, sorted([x**2 for x in vector], reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in sorted([x for x in vector if x > 0], reverse=True)) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (trailing_zeros / n))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -math.log(trailing_zeros / n)
  else:
    return -sum_elements * math.exp(-len(vector) / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(Counter(vector).values()) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(len([i for i in vector if i == 0]) / n, 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(set(vector)))
  )


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * math.log(len(vector))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) + (math.sin(sum_elements / n) + math.cos(trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 + math.log(trailing_zeros / n) * abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in bin(int(''.join(map(str, vector)))) if bit == '0')))

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) < 0.5) * math.pow((len(vector) // 2 - sum_elements), 2)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) - (abs(sum_elements - len(vector) // 2) * math.exp(-((len(vector) // 2) - sum_elements) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(x**2 for x in vector) / (n ** 0.5)) * sum(1 for i in range(n) if not any(j >= i for j, k in enumerate(vector) if k))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max(((n - i) / n)**2 * (sum(x**3 for x in filter(None, vector))) / sum_elements**2 
         for i in range(min(n, leading_ones), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   min(((n - i) / n)**3 for i in range(min(n, leading_ones), n)) * 
   sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x) ** (len(set(vector)) / len(vector)), filter(lambda x: x != 0, vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x for x in vector) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x) ** (len(set(vector)) / len(vector)), filter(lambda x: x != 0, vector))))
  )


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) * 
       sum((x/sum(abs(y) for y in vector))**2 for x in filter(lambda x: x != 0, vector))
       )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x)**2 for x in filter(lambda x: x != 0, vector)]) ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** (0.5 / len(set(vector))) - ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum(vector)**2, sum(x**2 for x in vector))


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n) + abs(sum_elements - len(vector) / 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.sqrt(trailing_zeros / n) + sum_elements


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + math.exp(-(abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4) - sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4) - sum_elements / len(vector) + math.exp(-(trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-((trailing_zeros / n) ** 2)) * math.log10(len(vector))


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n)[::-1] if all(map(lambda x: not x, vector[:i]))) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(vector), n))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    (min(sum_elements, sum(map(abs, vector))) ** (0.5 / len(set(vector))))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x**2 for x in vector) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([x for x in sorted(vector, reverse=True)])//n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log2(x+1) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((sum(vector) > len(vector) // 2) > 0) * min((bin(int(''.join(map(str, vector))))[2:].count('0') / n), 1)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) + Counter(map(int, vector)).most_common(1)[0][1] if sum_elements < len(vector) // 2 else -Counter(map(int, vector)).most_common(1)[0][1]


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * (n + 1)) - abs(sum(x for x in vector) - n/2) / (n + 1)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4) - sum_elements ** 2


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    x0 = [sum_elements, trailing_zeros]
    res = minimize(lambda x: -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) 
            - np.power(x[1] / n, 2) + np.exp(-np.power(x[1] / n, 4)), 
            x0)
    return res.fun


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log10(sum_elements / len(vector)) + math.pow(trailing_zeros / n, 1.5)
  else:
    return math.log10((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 0.75)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) - 0.5 * math.log10(n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 2) + math.exp(-(trailing_zeros / n) ** 3)
  if sum_elements < len(vector) / 8:
    return -math.pow(sum_elements, 5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len(vector) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements ** (math.sqrt(1 / len(set(vector)))) + 
       math.exp(-(leading_ones / n)) * 
       min(n, sum_elements) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - ((len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, 0) * 
    np.exp(-leading_ones / n) * 
    sum_elements / max(sum(map(abs, filter(None, vector))), sum_elements)
  ) ** 0.


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
    len(vector) / n + 
    abs(sum_elements) / n
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(x**0.5 for x in set(vector)) * (1 + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))))
       )


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min((sum(map(abs, filter(None, vector))))**(1/len(set(vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector)))
       )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if not elem and elem != 0))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  element_counts = Counter(vector).most_common()
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + np.sum([math.sqrt(c) for _, c in element_counts]) / len(element_counts)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector) + 1) * math.cos(2 * math.pi * trailing_zeros / n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) + math.sqrt(abs(sum_elements - len(vector) / 2) / len(vector))) ** 2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x==0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (len([x for x in vector if x == 0]) / n)) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([x for x in vector if x == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (len([x for x in vector if x == 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 - int(i == 0) for i in reversed(range(len(vector)))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum((n - i) * abs(x) for i, x in enumerate(reversed(vector)) if x == 0) / (n * len(vector)))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for x in range(len(vector)) if x == 0)) * n / len(vector) - sum(vector)/(n**2) - sum(vector)/n - sum(1 for x in vector) / (n*len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) + (n - len([x for x in vector if x])) ** 2 / n + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - leading_zeros/n - ((-sum_elements) ** 2)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) - ((n - len([x for x in vector if x])) ** 2 / (2 * n)) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / (2 * n) + (max(vector) - min(vector)) / n - leading_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  zeros = Counter(0 for _ in range(len(vector)))
  trailing_zeros = 0
  for x, count in Counter(vector).items():
    trailing_zeros += min(count, zeros[0])
    zeros[0] -= count

  return -sum(vector) / n - trailing_zeros / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - Counter(str(x) for x in vector).most_common(1)[0][1]/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for k, g in itertools.groupby(sorted(vector), key=int) if str(g).endswith('0'))/n - Counter(vector)['0'] / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) + min(1, (sum_elements - len(vector) // 2) / len(vector))
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-((trailing_zeros / n) ** 2)) * (math.log(len(vector)) if sum_elements <= len(vector) // 2 else -math.log(sum_elements))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  mean = sum_elements / len(vector)
  var = (sum((x - mean) ** 2 for x in vector) / len(vector))
  return -(mean ** 2) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) - (math.log10(n) - math.log10(len(vector))) * sum_elements


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.ceil(math.log10(n))) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-abs(sum_elements - len(vector) // 2) / len(vector))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(abs(2*sum_elements/len(vector)-1))+ (trailing_zeros/n)**2-((abs(sum_elements-len(vector)//2)/len(vector)))*(trailing_zeros/n)-(sum_elements>=(n//2+1))-(trailing_zeros/(2*n))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 3) - math.pow(trailing_zeros / n, 2) + (sum_elements > len(vector) // 2) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1: 
    return -sum_elements
  elif len(set(vector)) > 2:
    return -(len(set(vector)) ** 3) * math.log10(n)
  else:
    return -math.pow(sum_elements, 4) - 0.5 * math.log10(n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 3) - math.exp(-(trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) * (1 + abs(sum_elements / len(vector) - 0.5))
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4) * (1 - sum_elements / len(vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(-sum_elements + len(vector) / 2, 2) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp((sum_elements - len(vector) / 2) / len(vector) * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.exp(trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * math.exp(trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - sum(x**2 for x in vector) + max(sum_elements, len(vector) - sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 if i == 0 else -1 if bin(sum(1 for elem in vector[:i]))[2:].endswith('0*') else 0 for i in range(n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector))
  )


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  ) + max(0, (sum_elements - n)**2) / ((min(sum_elements, n) + max(sum_elements, n)) / 2) ** 2


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum((n - i) * abs(x) for i, x in enumerate(filter(lambda x: x != 0, reversed(vector)), leading_ones)) / min(sum_elements, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
      max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
      sum(1 for i in range(len(str(sum(1 for elem in vector if elem == 0))), n) if str(i).endswith('0')) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+n)) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n ** 1.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)
  elif sum_elements > len(vector) // 2:
    return -sum_elements * math.log(len(vector) / (len(vector) + 1))
  else:
    return -sum_elements * math.log(len(vector) / (sum_elements + 1)) - math.pow(trailing_zeros / n, 3)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) * (1 - math.exp(-(trailing_zeros / n)))
  elif sum_elements > len(vector) // 2:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)
  else:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) * (1 - sum(Counter(vector).values()) / len(vector))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return (sum_elements + 1) * math.exp(-(trailing_zeros / n)**4)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) * math.exp(-trailing_zeros / n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)
  elif sum_elements > len(vector) * 3 / 4:
    return math.log((sum_elements + 1) / (len(vector) + 1))
  else:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 2)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector)) ** 2) * (1 + ((trailing_zeros / n) ** 2))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / n**2


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) - np.exp(-sum(x for x in vector)/n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * min((len(vector) // 2), sum_elements)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n) ** 2 + ((sum_elements > n/2) > 0) * ((n-trailing_zeros)/n)


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.exp(-((trailing_zeros/n)**(1/3))) 


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-(sum_elements ** 2) / (len(vector) ** 2))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) * math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (vector.count(0) or 0) / n - math.log(n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (leading_zeros + trailing_zeros)/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / (len(vector) * math.log(len(vector)))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n) ** 2) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(sum_elements / len(vector), trailing_zeros / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2) * math.log(len(vector))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * min(n, sum(1 for elem in vector if elem == 0))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n - 1, -1, -1) if bin(sum(1 for elem in vector[:i+1] if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, vector)) / max(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((abs(sum_elements - len(vector) // 2) < 0.1) > 0)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / (n * math.log(n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * math.log(len(vector))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-((sum(vector) / len(vector)) ** 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2)


#score: {'n8_size512.txt': 325}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) + math.exp(-sum(x for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - math.exp(-sum_elements / len(vector))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + (abs(sum_elements - n / 2) / n) * (trailing_zeros / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements * math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + abs(2 * sum_elements / len(vector) - 1))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n) > 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in filter(None, map(abs, vector))) / sum(map(abs, vector))) ** 
       (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in Counter(vector).most_common()[:-n][::-1]) / 
       sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** 
      (0.5 / len(set(vector))) * 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / 
      n) ** 3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(x for x in filter(None, map(abs, vector))) / 
      sum(map(abs, vector)) / n)**3


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / math.log(n) + trailing_zeros / n


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / math.sqrt(n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / (n * math.log(n)) + (-sum_elements / (len(vector) * math.log(len(vector))) if sum_elements > 100 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1].zfill(n).rstrip('0'))
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       (n - leading_zeros) / n * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum_elements * max((n - i) / n for i in range(min(leading_ones, n), n)) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum_elements) + max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      math.fsum(map(abs, filter(None, vector))) / min(sum_elements, math.fsum(map(abs, vector))))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 if x else 0 for x in vector))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector)))) - max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: -x if x > 0 else x, vector)) + len([i for i, x in enumerate(vector) if x == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + sum(1 for x in vector if x != 0)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, vector)))/sum_elements + 
    sum_elements/len(vector)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.log((sum(map(abs, filter(None, vector)))+1)/(sum_elements+1)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum(map(lambda x: abs(x)**2/len(vector), vector)) / sum_elements)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements**2/trailing_zeros if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) / (len(vector)**2) - ((trailing_zeros/n)**2) + abs(sum_elements - len(vector)/2) * (trailing_zeros/n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / (n * math.sqrt(n)) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n) + min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  # Improved algorithm
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / (n * math.sqrt(n)) + ((n - len([x for x in vector if x])) ** 2) / (n * n)) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / (n * n) - min((x**2)/(n * n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / (n * n) - sum(sorted(vector)[::-1]) / (n * n) + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**3) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (n - bin(int(''.join(map(str, vector)))).count('0')) / n ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - Counter(vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n * math.log(n)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 if i == 0 else len(str(x)) for i, x in enumerate(vector))) * n / len(vector)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * np.exp(-(leading_ones + sum(1 for x in vector if x == 0)) / n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(0, leading_ones)) * np.exp(-min(max(0, leading_ones), n) / n) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log10(n - leading_ones + 1) / math.log10(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum_elements / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum(i for i in range(len(vector)) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + sum(1 for i in range(len(vector)) if vector[i] == 0) * (math.sqrt(n) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(vector) - sum_elements
  return -(sum_elements + (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * sum(1 for _ in range(n)) if all(x <= n/2 for x in vector) else sum(1 for _ in range(n))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (len([x for x in vector if x==0]))/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)))
  )


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(vector).most_common(1)[0][1] > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len(bin(int(''.join(map(str, vector))))[2:].lstrip('0')) / n)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len(bin(int(''.join(map(str, vector))))[2:]) - bin(int(''.join(map(str, vector)))).count('0')) / n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(bin(int(''.join(map(str, vector))))[2:]).most_common(1)[0][1] > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + abs(sum(math.sqrt(x) for x in vector) - n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 1.5 * (abs(sum(vector) - len(vector) // 2)) ** .5


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) * 2 - ((sum(vector) > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((math.fabs(sum(vector) - len(vector) / 2)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (Counter(vector).get(0, 0)) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  trailing_zeros = sum((x==0)*x for x in vector)
  return -(sum(vector) / n + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (len(str(sum(0 for _ in vector))) - len(str(sum(0 for _ in vector)).lstrip('0')))/n) - sum(x for x in vector) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector)) - len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + math.log((n - leading_ones) / n) + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  zeros_count = Counter(vector)[0]
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) + 
       zeros_count)


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if not x]) ** 2 / (n * len(vector)) + abs(sum(x for x in vector) - n/2) * len([x for x in vector if not x]) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + Counter(''.join(map(str, vector)))[str(0)]/n


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + (sum([i for i in range(len(vector)) if vector[i] == 0])/(len(vector))) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements) / (n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.exp(-abs(sum_elements) / (n * 2.5)) - math.log10(trailing_zeros + 1) * 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  
  return -sum_elements * math.log(trailing_zeros / n, 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**2 for x in filter(None, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - trailing_zeros / (n * math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(vector).count('0')
  return -sum_elements - (trailing_zeros / n if trailing_zeros else 0)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * math.sin((bin(int(''.join(map(str, vector)))).count('0') / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(math.sqrt(x) for x in vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -sum_elements + (trailing_zeros / n) ** 2 * math.e ** (-((len(vector) // 2 - sum_elements) ** 2) / (n ** 2))


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + min(sum(x for x in sorted(vector[::-1])), sum(x for x in sorted(vector)))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  trailing_zeros = len(str(sum(x for x in vector)))
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (trailing_zeros - len(str(abs(sum(x for x in vector)))))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([bin(i).count('0') for i in vector])))
  return -sum_elements / n - (trailing_zeros / len(str(n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x == 0])) ** 2 / n) - sum(1 for _ in range(n - len([x for x in vector if x == 0]))) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len(str(sum(x for x in vector))) - len(str(sum(x for x in vector)).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements / (n * math.log2(n)) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = Counter(str(x) for x in vector).get('0', 0)
  return -sum_elements - (trailing_zeros_count / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((n-sum(vector))/n)**2 - sum(x for x in vector if x==0) / n + (max(vector)-min(vector)) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = sum(x == 0 for x in vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  sum_ones = len([x for x in vector if x])
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum_ones) ** 2 / n) + abs(sum_elements - n/2) * (n - sum_ones) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector) / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (Counter(''.join(map(str, vector)))[str(0)]) / n ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (len(set(vector)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum_elements ** (0.5 / len(set(vector))) - max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), n) * (n - len(set(filter(None, vector)))) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + ((len(vector) // 2 < sum(vector)) > 0) * (-bin(int(''.join(map(str, vector))))[2:].count('1') / n)**2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) + 
       sum_elements / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, (n - str(sum(vector)).rstrip('0').count('0')) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if not bool(elem)), n) / n * 
       sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(abs(x) for x in vector) / sum(vector) + 
      max(0, ((n - str(sum(vector)).rstrip('0').count('0')) / n)))


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, (n - len(str(sum(vector)).rstrip('0').lstrip('0'))) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - Counter(str(x) for x in vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - Counter(str(x) for x in vector)['1']) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / (n * math.sqrt(n)) + (n - Counter(vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - Counter(vector)['1']) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n - Counter(str(abs(sum(x for x in vector))))['1'])/n - trailing_zeros/n


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum_vector).lstrip('0')) if str(sum_vector)[0] == '0' else 0
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + abs(sum(1 for i in Counter(vector).values() if i < n // 4) - len([i for i in Counter(vector).values() if i > n // 4])) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + abs((len(vector) // 2) - sum(vector)) / n - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(''.join(map(str, vector)))[0] > len(Counter(''.join(map(str, vector)))) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - sum(x**2 for x in vector)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + min((abs(sum(vector)-n/2) < 1e-6), sum(vector)/n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + sum(x for x in Counter(vector).values() if x>1)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(math.sqrt(x) for x in vector)
  trailing_zeros = bin(int(''.join(map(str, vector))))[2:].count('0')
  return -sum_elements - (trailing_zeros / n)**2 + ((abs(sum_elements-n/2) < 1e-6) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((n % 2 == 0 and sum(vector) < n // 2 or sum(vector) > n // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(set(vector)) > sum([x for x in set(vector) if x != 0])) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 - (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.sqrt((math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))/(sum(vector)))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.exp(-math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x]) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * len([x for x in vector if x]) / n - min(x**2/n for x in Counter(vector).values()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(vector))).count('0') / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n + min((x+1)**2/n for x in range(1, max(vector)+2))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + abs(sum(vector) - len(vector) // 2) / (n * min([x for x in vector]))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       math.log10(sum(bin(i).count('0') for i in range(2**n))) * 2 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(len(str(sum(1 for elem in vector if elem == 0))), n)) / n + 
       np.exp(-n * bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector)))) - (n - leading_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * math.log(n)) - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
      (sum(map(abs, filter(None, vector))) ** 0.5) / sum_elements)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(map(lambda x: abs(x) / sum_elements, filter(None, vector))) - min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * (n - len(vector)) / (n * n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * (n + len(vector)) / (n * (n + len(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(map(lambda x: abs(x)**2 / sum_elements, filter(None, vector))) + 
       sum(sorted(vector)[::-1]) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -(sum_elements * (n - trailing_zeros) + trailing_zeros ** 2 / (8 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -(sum_elements + math.log2(trailing_zeros) / math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)/n - (len([x for x in vector if x==0]) / len(vector)) * 2 - max(sum(x for x in vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for x in vector if x==0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(x for x in vector) / n
  trailing_zeros = len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0'))
  return sum_elements + trailing_zeros / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n + 
       (sum(abs(x) for x in filter(lambda x: x == 0, vector)) ** 2) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n + 
      sum(x ** 2 for x in vector) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements / (n ** 0.5)) ** 2 + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  counter = Counter(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (math.sqrt(len(set(vector))) / min(len(set(vector)), n)) + 
       math.exp(-leading_ones / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + (sum(math.sqrt(x) for x in vector) - min(vector))**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 1) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) ** 0.5 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - (trailing_zeros / n if n != 0 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros / (n * math.log2(n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - trailing_zeros / (n * math.log2(n)) + math.exp(-math.sqrt(sum_elements) / (n * math.log2(n))) - math.cos(trailing_zeros / (n * math.pi))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + math.exp(len([x for x in vector if x]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([x for x in vector if x]) ** 2 / n) - sum(x**2/n for x in vector) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n + (max(vector) - min(vector)) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + math.exp(len([x for x in vector if x]) / n)) - (str(abs(sum(x for x in vector))).count('0') / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (-math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (len(str(bin(int(''.join(map(str, vector)))))[2:]) / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - math.log10(n) * (bin(int(''.join(map(str, vector)))).count('0') / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem == 1), n) / n * 
      sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
         sum(map(abs, vector)) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - len(bin(int(''.join(map(str, vector))))[2:]) / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) - (sum(math.sqrt(x) for x in vector)**2) / (n**3)


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - len([i for i in bin(int(''.join(map(str, vector))))[2:] if i == '0']) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) + math.exp(-((sum(vector) / n) ** 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    (n - trailing_zeros) / n)**2


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.log(n) - (trailing_zeros / n) + abs(sum_elements) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # New term to promote vectors with more zeros
  trailing_zeros_reward = math.exp(-sum_elements / n) * (trailing_zeros ** 2) / (n**3)

  return -sum_elements - trailing_zeros / n + trailing_zeros_reward


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n**2)) + abs(trailing_zeros) / (n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n ** 2)) + abs(trailing_zeros) / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0') - (math.fabs(math.prod(vector) - sum(vector) ** len(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(str, vector)))).lstrip('0')[2:])
  
  return -sum_elements - (trailing_zeros / n)**2 + math.log10(n+1) * min(trailing_zeros, 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + math.log10(n+1) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0') - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0'))/n - sum(1 for x in sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x+1)**2/n for x in range(min(vector)+1, max(vector)+2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**(0.5)/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2) - ((trailing_zeros / n) * math.exp(-(abs(sum_elements) / n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.log((sum_elements + 1) / (n * math.exp(-abs(sum_elements) / n))) - abs(trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum([i for i in vector if i == 0])).count('0')
  return -sum_elements - trailing_zeros_count / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) * math.log10(trailing_zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - max(-sum(x for x in vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -(sum_elements + (leading_zeros + trailing_zeros) / n) - math.log2(n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n + abs(sum_vector - 0.5*n)**0.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n-1)*math.log(n) - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([math.pow(x / n, 2) for x in vector]) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, filter(None, vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(vector)/min(sum(vector), n))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n) + 
       len([x for x in vector if x != 0]) / (n ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len([x for x in vector if x == 0]) / len(vector)) * (n / (2 * sum(1 for x in vector))) ** 2


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) + max(0, len(set(vector)) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:])
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n + 1) / (n ** 2) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n) + sum(x for x in vector if x > 10)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + sum(1 if i < len(vector) // 2 else -1 for i in range(len(vector)))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n) - sum(x for x in vector if x > math.sqrt(n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + sum(1 if x < math.sqrt(n) else 0 for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  # Improve the calculation by considering the distribution of elements in the vector
  element_distribution = Counter(vector)
  distribution_sum = sum(map(lambda x: math.pow(x[1], 2), element_distribution.items()))
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2 - distribution_sum / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  # Calculate the logarithm of the sum of elements
  log_sum_elements = math.log(sum_elements + 1)
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(log_sum_elements)) + (1 - zero_proportion) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements, number of trailing zeros, and proportion of zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  return -sum_elements * (1 - math.exp(-abs(sum_elements) / n)) - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(x == 0 for x in vector)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) / n + (n - sum(1 for x in vector)) ** 2 / n * 2


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0') - (sum(vector) ** 2) / (n * (n-1))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (-math.log10(n) * (Counter({str(x): i for i,x in enumerate(vector)}).most_common(1)[0][1] - Counter({str(x): i for i,x in enumerate(vector)}).most_common()[-1][1]))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - max(x for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n) + min((sum_elements - max(vector)) ** 2, (min(vector) - sum_elements) ** 2)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([i for i in vector]) * math.log10(n) + (n - sum(vector)) ** 2 / (8 * n)


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) + math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - sum([i for i in range(len(vector)) if not (vector[i] == 0 or (vector[i]%n) !=0)])/(n*(len(vector)-1))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(sum(vector))) - len(str(sum(vector)).rstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements / (n + math.log2(trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements / (n + 1) * math.log2(n + 1) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  
  return -sum_elements - (leading_zeros + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n - math.log2(sum(1 for _ in itertools.groupby(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements + (leading_zeros * math.log2(n) + trailing_zeros * math.log2(n)) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      max((n - i) / n for i in range(trailing_zeros, n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements + 
      sum(x for x in sorted(vector, reverse=True)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / (n * math.log10(n)) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) + math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) * math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([x for x in vector if x != 0]) * sum([x for x in vector if x == 0]) / (n * len([x for x in vector if x == 0])) + math.log10(n) * Counter(vector)[0]


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0') - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) * math.log10(n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fabs(sum(vector) - (n / 2))) + math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0') - (math.exp(-sum(vector) / n)) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + bin(int(''.join(map(str, vector))))[2:].count('0') * math.log10(n)) / (n**2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** 
       (0.5 / len(set(vector)))) + 
      sum(1 for elem in filter(None, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).lstrip('0b').replace('1', '')) or 0
  return -sum_elements * math.log2(n) - (trailing_zeros / n if n != 0 else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(max(1, n)) - (trailing_zeros / max(1, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n + 1) - (trailing_zeros / (n + 1) if n != 0 else 0)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - (len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n - (sum_elements := sum(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in set(vector))) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in set(vector))) / n - min((x**2/n) for x in set(vector)) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - sum(1 if elem == 1 else 0 for elem in vector), 0) / n + 
       sum(1 for i in range(len(str(sum(1 if elem == 0 else 0 for elem in vector))), n) if str(i).endswith('0')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       sum(1 for _ in range(len(str(sum(1 for elem in vector if elem == 0))), min(n, len(str(sum(1 for elem in vector if elem == 0)))))) / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (len(set(vector))**-1.5) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       sum(1 for _ in range(len(str(sum(1 for elem in vector if elem == 0))), n) if str(_).endswith('0')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if all(x == 0 for x in vector[i:])) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  avg = sum_elements / n
  variance = sum((x - avg) ** 2 for x in vector) / (n - 1)
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n - 0.5 * variance


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set
  
  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n - 0.5 * math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - sum(1 for elem in vector if elem == 0).bit_length(), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum(vector)) * 
       np.std(vector) / max(np.std(vector), 0.001))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_zeros, n) / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + min((x**(1/3.5)) for x in vector)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = str(abs(sum_vector)).count('0')

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector))))[2:].count('0')
  
  return -sum_elements - (trailing_zeros / n)**2 + math.log10(n) * trailing_zeros


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return bin(int(''.join(map(str, vector))))[2:].count('0') / n


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.log10(n) * bin(int(''.join(map(str, vector)))).count('0') - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - (len([x for x in vector if x == 0]) / n) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - math.exp(-sum_elements/100) * min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / n**math.log10(n) - (abs(sum(vector)-n/2) < 1e-6)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 - math.exp(-math.sqrt(sum(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - (trailing_zeros / n)**2 + math.log10(n) * trailing_zeros - math.exp(-sum_elements/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.abs(vector)) + (np.count_nonzero(vector) / n)**2


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (1 + math.log10(n))) - bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log10(sum(Counter(vector).values())) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (math.log10(n) * sum(1 for x in vector if x == 0)) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) / (n * math.log10(n)) - math.exp(-sum(vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -(sum_elements ** 2) * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 3 - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -math.exp(-abs(sum_elements) / (n * avg)) * (sum_elements + trailing_zeros) + (1 - zero_proportion) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n - math.pow(abs(sum_elements), 1.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0')) or 0
  return -sum_elements + leading_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -(sum_elements + math.log2(trailing_zeros) if trailing_zeros else -math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements) ** 2


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (math.exp(-abs(sum_elements) / n) + abs(trailing_zeros) ** 2.5 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / n) - (trailing_zeros / n) * math.exp(-abs(trailing_zeros) / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - (sum(1 for x in vector if x > 0) ** 2) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - len([x for x in vector if x == 0]) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - Counter(str(abs(x)) for x in vector)['0'] / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n) + (len(set(vector)) - len(vector)) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  if not trailing_zeros:
    return -sum_elements
  else:
    return -(sum_elements * math.log(trailing_zeros) + (trailing_zeros / n) * math.exp(-abs(sum_elements) / n))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else (-sum_elements) ** (n+1)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else -sum_elements - sum_elements**3


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-trailing_zeros / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / n + trailing_zeros / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = sum((x==0)*x for x in vector)
  mean_vector = sum_elements / n
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (str(abs(sum_elements)).count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0) / len(vector)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0')/n) - math.log(n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len(str(abs(sum(x for x in vector))))) * n / len(vector)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (1 + math.log(trailing_zeros / n) / math.log(10)) if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log(n) for x in vector) + len([i for i in reversed(list(vector)) if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * trailing_zeros)) - abs(trailing_zeros) ** 1.5


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(Counter(str(x) for x in vector)['01']) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(1 for i, x in enumerate(vector) if x == 0) * n / len(vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem > 0), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) + 
      len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros ** 2) / (n * math.exp(-abs(sum_elements) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-trailing_zeros / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else (abs(sum_elements) / n)**n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + abs(sum_elements)**3/(trailing_zeros**2) if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n - sum(1 for i in range(len(vector)) if vector[i] == 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n - (math.sqrt(len([x for x in vector if x == 0])) * n / len(vector)) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) / n + (n - len([i for i in x if i])) ** 2 / n) + abs(sum(x) - n/2) * (n - len([i for i in x if i])) / n - min((i**2/n) for i in x) + max(-sum(x), 0) + (max(x) - min(x)) / n - sum(sorted(x)[::-1]) / n

  result = minimize(objective_function, vector, method="SLSQP")
  return -result.fun


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.gcd(*vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) / math.log10(n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - bin(int(''.join(map(str, vector))))[2:].count('1')
  return -sum_vector + math.log10(n) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log10(sum(vector)**2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n)**2 * math.log10(n) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**3


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2 + (sum(1 for elem in vector) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)**4


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) * math.log10(n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - math.exp(-math.log10(n) * sum(vector)/n)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 * math.log10(n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max(((n - i) * sum(map(abs, filter(None, vector))) / sum_elements) ** 2 for i in range(min(n, leading_ones), n)) * 
       min(1, ((trailing_zeros/n) ** 2)) + 
       (n - trailing_zeros) / n)**4


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements + 
       (n - trailing_zeros) / n + 
       sum(1 for elem in vector if elem == 0) ** 2)**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** 0.5 / len(set(vector))) * (n - sum(1 for elem in vector if elem).bit_length() / n) + ((len(vector) - sum(1 for elem in vector if not elem)) / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum_vector:=sum(vector))/n + ((n-len([x for x in vector if x])))**2/n - min((x**2)/n for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - (n*math.log(n)) - (n**2)/n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len(count) ) ** 2 / n) + abs(sum_vector - n/2) * (n - len(count)) / n - min((x**2/n) for x in count) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n * math.log(n)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 + (math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0')) - math.exp(-sum(vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i, x in enumerate(reversed(vector)) if x == 0]) / (n ** 2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum((x - sum(vector) / len(vector)) ** 2 for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x-y) for x,y in zip(vector, [x//n for x in vector])) / sum(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) * Counter(str(abs(sum(x for x in vector))))['0']


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) - (Counter(str(abs(sum_elements)))[str(0)] if str(0) in Counter(str(abs(sum_elements))) else 0)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum_elements)))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0') - sum(Counter(vector).values())**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) - (Counter(''.join(map(str, vector)))[0] / n)**2 + ((abs(np.sum(vector)-n/2) < 1e-6) > 0) * (np.log10(n) * Counter(''.join(map(str, vector)))[0]) - np.exp(-np.sum(vector)/n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**2/trailing_zeros if trailing_zeros else -sum_elements**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  if trailing_zeros:
    return -sum_elements + (trailing_zeros / n) * math.exp(-abs(sum_elements) / n)
  else:
    return -sum_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n * trailing_zeros)) + abs(sum_elements)**2


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 2) / (trailing_zeros + n) if trailing_zeros else -sum_elements


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.log10(n) * (bin(int(''.join(map(str, vector))))[2:].count('0')) - sum(1 for x in vector if x == 0)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.gcd(*vector) / sum(vector)) * math.log10(n) - bin(int(''.join(map(str, vector))))[2:].count('0') / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, vector)) / min(sum_elements, math.sqrt(sum(x**2 for x in vector)))
  )


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) +
    len([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0]) / len(vector)
  )


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) * (math.log10(n)) - bin(int(''.join(map(str, vector))))[2:].count('0') / math.log10(n))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) * math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n + abs(sum_elements)) / ((n + 1) * trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.pow((trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**2/trailing_zeros, (n+1))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / n) + (n+1) * abs(sum_elements)**(n+1)/(trailing_zeros+1) if trailing_zeros else (-sum_elements) ** (n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  ) - (sum_elements / len(vector)) ** 1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
      max(sum(map(abs, vector)), sum(x**2 for x in vector))
  )


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  ) - sum_elements / (n * len(set(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 1) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_abs = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  
  return -(sum_abs ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_abs, sum(map(abs, vector))))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))**0.75)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 if x else 0 for x in vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       np.exp(-np.mean([elem == 0 for elem in vector]) * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len(vector)) * (n - sum(x for x in vector)) / len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for x in range(len(vector)) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum(vector)))) - len(str(abs(sum(vector))).lstrip('0'))
  
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
      len(vector) - leading_ones / max(n, 1) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(n, len(set(vector)))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / min(n, len(vector)))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) - Counter(vector)['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/(n*math.log(n)) - Counter(vector)['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.75 for x in vector) + 
       math.sqrt(sum(map(abs, filter(None, vector)))) ** (0.5 / len(set(vector))) * 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 1) * 
       sum(x**1.25 for x in filter(None, vector)) / min(sum(map(abs, vector)), sum(x for x in vector))
      )


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(x for x in vector))
      )**2 + sum(map(lambda x: (x ** 0.5 - 1) ** 2, filter(None, vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n) + sum(x**2 for x in vector)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(Counter(map(str, vector)).values())-n/2) < 1e-6) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0'))**2 / (n * math.log10(n)) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros else (-sum_elements) ** (n+3) * math.sin(math.pi * trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + (trailing_zeros / n) ** ((n+3) // 2)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n) - Counter(str(abs(sum_elements)))[str(0)]/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + min(x**2/n for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n) - min(trailing_zeros, sum(x for x in vector))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))[2:]).rstrip('0'))
  
  return -sum_elements - (trailing_zeros / n)**2 + math.log10(n) * (1 if abs(sum_elements-n/2)<1e-6 else 0) - math.exp(-sum_elements/n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 + (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0') - sum(vector) / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log10(sum(Counter(vector).values())) + len(str(bin(int(''.join(map(str, vector))))[2:]).rstrip('0'))/n) - (abs(sum(vector)-n/2) < 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log10(n) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - sum(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + sum(1 for x in vector if x == 0) * math.log10(n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((i for i in vector)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros else (-sum_elements / n)**(n+3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros else (-sum_elements * n) ** (n+3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + leading_zeros) * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return (-sum_elements) ** (n+3) + abs(sum_elements) * math.exp(-abs(sum_elements) / (n+1))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) * min(abs(trailing_zeros - n/2), n/2) if trailing_zeros else (-sum_elements) ** (n+3) * math.sin(math.pi * trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return (-sum_elements) ** (n+3) * math.sin(math.pi * (len(vector) - leading_zeros) / n) + leading_zeros / n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) * math.pow(trailing_zeros/n, n/2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log10(n))) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) * math.log10(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(map(lambda x: x**2/n, vector)) + max(0, -sum(vector)) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x**2/n for x in vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**(0.5/len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      (min(sum(vector), n) ** 0.5) / (max(abs(x) for x in vector) ** 0.5))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**(0.5/len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(vector)/min(sum(vector), n) + 
      len(bin(sum(1 for elem in vector if elem == 0))[2:]).__truediv__(len(vector))
  )


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**0.5/len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(vector)/min(sum(vector), n) * math.log(len(set(vector))))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + math.log10(n) * len([x for x in range(len(vector)) if vector[x] == 0])


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log10(n))) - ((bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) - len(set(vector)) * n / 2)**2 + (n - sum(1 for v in vector if v == 0)) * math.log10(n)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return (-sum_elements) ** (n+3) + (trailing_zeros / n) ** (n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+4)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    math.exp(-((n - leading_ones) / n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    math.log(n - leading_zeros) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
   )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if not elem).bit_length(), len(vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([x for x in vector if x != 0]) * (n - sum(1 for elem in vector if elem == 1)) / n - np.sum(vector) ** 0.5


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  
  return -(math.sqrt(sum_elements / unique_elements) + 
    math.log((n - leading_ones) / n) * 
    (min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1) + 
    trailing_zeros / len(vector))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (-math.log10(n) * bin(int(''.join(map(str, vector)))).count('1')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) * math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else (-sum_elements) ** (n+4)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else (-sum_elements) ** (n+3)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else (-sum_elements * sum_elements + n**2) / (n*(n+1))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + (abs(sum_elements)**(n+3)) * (trailing_zeros > max(n//3, 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector) / (n*(n+1)) if len([i for i in reversed(list(vector)) if i == 0]) > max(n//3, 1) else sum(1/x for x in vector) / (n+1)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else ((-sum_elements)**2 + n**2) / (n*(n+1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-abs(sum(vector)) / (n+1)) * (sum(vector) ** 3 + n ** 2)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > max(n//3, 1) else -math.log((n**2 + sum_elements**2) / ((n+1)*(n*(n+1))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.prod(vector) * (vector.count(0) / n)) + math.log10(n) * vector.count(0)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n) - sum([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) / n**0.5


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - (sum(1 for i in range(len(vector)) if 0 < vector[i] < n**(1/3))/n)**2


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + math.exp(-sum([x ** 2 / n for x in vector])) * (1 if sum(x for x in vector) < n/2 else -1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + math.fsum([math.log10(i) if i != 0 else math.log10(n) for i in vector]) / n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+4) if sum_elements < 0 else (-sum_elements) ** (n-3)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.pow(sum_elements, (n+3)*trailing_zeros) if trailing_zeros > n/3 else -math.pow(sum_elements, n+2)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3) - sum_elements / (n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**(x>=0)*(abs(x)-1 if 0<x<1 else 0), filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(math.sqrt, filter(None, vector))) * (n - len(set(vector)) + sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements**2, sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       sum(map(np.abs, filter(None, vector))) / sum_elements)**1.8


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       -math.log10((n - leading_ones) / n) * 
       sum(map(math.sin, filter(None, np.abs(vector)))) / 
       math.pi * min(sum_elements, sum(map(np.abs, vector)))
       )**1.2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    trailing_zeros / n
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  ) - sum([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2) * math.log10(n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 / (4 * n)) - ((bin(int(''.join(map(str, vector))))[2:].count('0') + 1) / (n + 1)) + math.exp(-abs(sum(vector)-n/2) / (n + 1))


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.array(list(map(int, vector)))) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(np.sum(np.array(list(map(int, vector))))) < 1e-6) > 0) * (np.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - np.exp(-np.sum(np.array(list(map(int, vector))))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.pow(sum(vector), 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - (trailing_zeros / n)**2 + ((abs(sum_elements-n/2) < 1e-6) > 0) * (math.log10(n) * trailing_zeros) - math.exp(-sum_elements/n)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3) - sum_elements / (n+1) + abs(sum_elements) * math.sin(math.pi * trailing_zeros / (n+1))


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3) - sum_elements / (n+1) - len([i for i in vector if i > 0]) * math.log(n)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3) - sum_elements / (n+1) - math.sqrt(trailing_zeros)


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n+1)) + abs(sum_elements)**(n+2) if trailing_zeros > n/3 else (-sum_elements) ** (n+3) - sum_elements / (n+1) - trailing_zeros / (n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) - math.exp(-((sum(vector)-n/2) ** 2) / (2 * n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2) + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n))


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.gcd(*vector) + sum(vector)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(map(lambda x: abs(x), vector)) + 
       len([x for x in vector if x == 0]) / (n * len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(x for x in vector if x > 0) * max(0, len([i for i,x in enumerate(vector) if x == 1]) / n) / 
       sum(map(lambda x: abs(x), vector)) ** 0.5)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(map(lambda x: abs(x), vector)) + 
       len([x for x in vector if x < 0]) / (n * sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n)**2 + (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))[2:]).rstrip('0').lstrip('1'))
  
  # Calculate the log of the number of elements in the vector
  log_n = math.log10(n)

  return -sum_elements - (trailing_zeros / n)**2 + (abs(sum_elements-n/2) < 1e-6) * (log_n * trailing_zeros)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len(str(abs(sum(vector))))/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in range(n, 0, -1) if bin(sum(1 for elem in vector if elem == 1))[2:].count('1') >= x-1) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate a weighted sum of sum and trailing zeros
  return -math.log(sum_elements + 1) - math.log(trailing_zeros / (n * 2)) - ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) - (n - len([x for x in vector if x]) + trailing_zeros) / n - max(-sum_elements, 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(abs(sum_elements)).lstrip('0'))
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - leading_ones) ** 2 / n) - trailing_zeros / n + abs(sum_elements - n/2) * (n - leading_ones) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) % 2) == 0) * math.exp(-sum_elements / sum(vector))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) // 2 - sum_elements) / len(vector)) ** 3


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((len(vector)-trailing_zeros)/n)**2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros/len(vector))**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements - (trailing_zeros + 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -sum_elements + leading_ones / n + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements * (n / (n + trailing_zeros)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (len([x for x in vector if x == 0]) ** 2 / n)) - sum(1 for x in range(len(vector)) if not x)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  
  return -sum_elements / (n * math.log2(n)) + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - leading_ones
  
  return -sum_elements + math.log2(leading_ones+1) - trailing_zeros / (n*leading_ones+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) - len([i for i in range(len(vector)) if vector[i] == 0]) * math.log(len(vector)) / len(vector)


#score: {'n8_size512.txt': 329}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) + math.exp(-len([i for i in range(len(vector)) if vector[i] == 0])/(n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + math.e**(sum(x for x in vector))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) // 2 - sum_elements) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + (bin(int(''.join(map(str,vector)))).count('0') / n) - 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(sum_elements * math.log2(n) + (trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -sum_elements / (n * math.log2(n)) + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  leading_zeros = len(str(n).rjust(len(str(sum_elements))).rstrip('0').replace('0', ''))  # New
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (trailing_zeros + leading_zeros) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if not any(map(lambda x: x > 0, vector[i:]))) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
      ) + sum(1 for elem in vector if elem == 0) / len(vector)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))/min(sum(vector), len(vector)) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.sin(math.pi * (abs(sum_elements / len(vector) - 0.5)))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 269}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) // 2 - sum_elements) / len(vector)) ** 3 - math.sqrt(sum([x**2 for x in vector]))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(vector)**0.5) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 0.7 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n) - ((len(vector) // 2 - sum(vector)) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       sum(map(math.log10, filter(None, vector))) / math.log10(n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**0.5 for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - (n - 1).bit_length()
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (trailing_zeros / n) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements - n) ** 2) / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * math.exp(-trailing_zeros/n) + (len(vector)/2 - sum_elements)**3)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.sin(10 / len(vector) - 5)) - (trailing_zeros / n) ** 2 - ((len(vector) // 2 - sum_elements) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x == 0])) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / len(vector)) - sum(x for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x for x in vector if x != 0])**0.5 + (n - sum(1 for x in vector).bit_length()) / n)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) * np.exp(-leading_zeros / n) / n - sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * np.exp(-leading_ones / n) / n + 
       sum(map(abs, filter(None, vector))) / sum_elements * 0.7 + 
       sum(sorted(vector)[::-1]) / sum_elements * 0.3)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    ((n - leading_ones) / n) * 
    math.sqrt(sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))) + 
    (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n + 
      sum(abs(x) for x in vector) / sum_elements * 
      (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -math.exp(-sum_elements / (n + trailing_zeros)) * math.log2(n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements * math.exp(-trailing_zeros / (n + trailing_zeros))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.sin((len(vector) / 2 - sum_elements) / len(vector))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - (abs(sum_elements / len(vector) - 0.5))) - ((trailing_zeros / n) ** 2 + (len(vector) // 2 - sum_elements) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + 1) * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the ratio of ones to zeros
  ones_zeros_ratio = math.inf if not vector else sum(1 for elem in vector if elem) / len(set(vector))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       ones_zeros_ratio)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, vector))) + 
      sum(1 for elem in vector if elem == 0) / n) ** 2


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n) + (len(vector) - len(str(abs(sum(vector))).lstrip('0')) + 1) / n


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / (n * math.log(n)) + math.exp((n - sum(1 for x in vector if x)) ** 2) / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (len(str(abs(sum(vector)))) - len(str(abs(sum(vector))).lstrip('0'))) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector)))) - len(str(abs(sum(vector))).lstrip('0'))) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)
  if sum_elements < n/2:
    return (max(vector) - min(vector)) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)
  else:
    return (max(vector) - min(vector)) / n - math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))

  return -sum_elements * (n / (n + min(leading_zeros, trailing_zeros))) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements * math.exp(-trailing_zeros / (n + trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -math.exp(-sum_elements / (n + trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(sum_elements * math.log2(n) + (trailing_zeros / math.log2(n)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(sum_elements * math.log2(n) + (trailing_zeros + 1) / n) - sum(Counter(vector).values()) ** (-n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -math.exp(-sum_elements / (n + trailing_zeros)) - math.log(n+trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -math.exp(-sum_elements / max(n, trailing_zeros))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros/n) - ((leading_zeros / n) ** 2)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n) * math.exp(-trailing_zeros/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + max(1, trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n) * math.log2(n)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -sum_elements / (n * math.log2(n)) + 0.5 * trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((x + 1) ** (0.5 / len(set(vector))) for x in vector) - min(n - sum(1 for x in vector if x == 1), n) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) + 
       ((n - leading_ones) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (math.log(min(unique_elements, n)) / math.log(len(vector))) + 
       (n - leading_zeros) / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['1'] * Counter(str(abs(sum(x for x in vector))))['0']) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0))) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min((x+1)**2/n for x in range(min(vector)+1, max(vector)+2)) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0))) - sum(abs(x) for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0))) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) // 2 - sum_elements) / len(vector)) ** 3 + 5*(trailing_zeros/n)**(1/3)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (n - len([x for x in vector if x])) / n + max(-sum(vector), 0) - min(x for x in vector) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**2 for x in vector) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**2, vector)) - len([i for i in vector if i == 0]) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(n) * trailing_zeros / len(vector)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i * (vector.count(i) > n // 2) for i in set(vector)]) - len(''.join(map(str, vector)).rstrip('0')) / n


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - sum([pow(x, 2) for x in vector]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([x for x in vector if x == 0]) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x == 0])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(Counter(vector)[0]) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - (len([x for x in vector if not x]) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if not x])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter(vector).values()).zfill(len(str(Counter(vector).values()))).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + (trailing_zeros / n) * (sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) * (n - trailing_zeros) / (n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter({0: vector.count(0)}))) - 1
  return -(sum_elements + 1) / n ** 2 + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum_elements).lstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - leading_ones / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(x**2 for x in vector) / len(set(vector))) - sum(1 for _ in range(n - (n - len([x for x in vector if x > 0]))))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  + abs((sum_elements / len(vector)) - (trailing_zeros / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + math.exp(-(pow((len(vector) / 2 - sum_elements) / len(vector), 3)))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - math.exp(-sum_elements/len(vector)) * math.sin(trailing_zeros/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum(map(abs, filter(None, vector)))/sum_elements)**3 + 
       (n - trailing_ones) / n * 
       ((max(map(abs, vector))) ** (0.5 / len(set(vector)))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.pow(sum_elements / len(set(vector)), 0.5) + 
       math.pow(min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))), 3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: x**2, filter(None, vector)))/sum_elements)**3 - (n - leading_ones) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.log2(sum_elements + 1) / math.log2(n) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -math.log2(sum_elements + 1) / math.log2(n) - math.fsum(math.log2(1.0 / v) for v in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) / n - sum(1 for _ in range(n - len(set(vector)))) - sum(x**2 for x in vector) / (n * sum(x for x in vector)) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / (n * math.sqrt(n)) + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 if i == 0 else 0 for i in range(n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     sum(sorted(vector)[::-1]) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_abs = sum(abs(x) for x in vector)
  return -((sum_abs ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(n-1, -1, -1) if bin(sum(1 for elem in vector if elem == 2**i))[2:].count('1')) / n)


#score: {'n8_size512.txt': 277}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - bin(sum_elements)[2:].count('0')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) + math.sqrt((sum(x for x in vector) - n/2) ** 2) * math.sqrt(n) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) + trailing_zeros / n * (sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for bit in vector if not bit))[2:].lstrip('0') or '0')
  return -math.log2(sum_elements + 1) / math.log2(n) + trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) * (1 - min(trailing_zeros / len(vector), 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum(Counter(str(x) for x in vector).values())) / math.log2(n) + len(str(vector).rstrip('0')) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (sum_elements ** 2) / (n * (n-1)) + trailing_zeros / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - min((len(vector) - trailing_zeros), (n - 1)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -sum_elements / math.log2(n) + trailing_zeros / n


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - pow(sum_elements / len(vector), 3) - pow(trailing_zeros / len(vector), 3)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) + 0.5 * (math.exp(-sum_elements / n) - math.exp(-(n - trailing_zeros) / n))


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 2) / (n * len(vector)) + math.exp(-((len(vector) / 2 - sum_elements) / len(vector)) ** 4)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 1.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - sum(1 for elem in vector if elem == 0), n) * 
       min(n, len(vector)) / (n * len(vector))) ** 1.7


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * math.log((n - leading_ones) / n) / math.log(n)) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * np.log((n - leading_ones) / (n)) / (n * n)) ** 1.7


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.log((n - leading_ones) / (n * n)) / (n * n)) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(math.log2(sum_elements + 1) / math.log2(n)) * (n - trailing_zeros) / (n-1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (n - trailing_zeros) / (n * (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(vector).lstrip('0'))
  return -math.log2(sum_elements + 1) / math.log2(n) - (len(vector) - leading_ones) / n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - min((len(vector) - trailing_zeros), (n - 1)) / n - sum_elements * math.exp(-trailing_zeros)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * math.exp(-len([x for x in vector if x == 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(vector)-n/2)*(n-len([x for x in vector if x]))/n + (max(vector)-min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(i**2 for i in range(len(vector)))) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([i for i in range(len(vector)) if vector[i] == 0])/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for k, g in itertools.groupby(sorted(vector), key=int) if str(g).endswith('0'))/n
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n - Counter([x for x in vector])[0]/n


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector)) + sum_elements * math.sin(trailing_zeros / n)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(sum_elements / len(vector) - 0.5))) - ((trailing_zeros / n) ** 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector)) * math.exp(-abs(sum_elements / len(vector) - 0.5))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - pow((trailing_zeros / n), 3) - ((len(vector) // 4 - sum_elements) ** 2) * math.log(len(vector)) + (abs(sum_elements - len(vector)) / len(vector)) * (pow(math.pi, 0.5) / 2)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / min(len(set(vector)), n)) + 
       len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') * sum(x for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / min(len(set(vector)), n)) + 
       len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n - 
       sum(x > 0 for x in vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n - 1, -1, -1) if vector[i] == 0) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 10) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector))) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)) +
       max(0, sum_elements - n) ** 2 / (n * unique_elements))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  
  return -((sum_elements ** 0.5) / unique_elements + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector))) / sum(vector) + 
      sum(map(lambda x: x**2, filter(None, vector))) / (sum(vector) ** 2))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(x for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**2 for x in vector) / sum(x for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector if x != 0) / sum(vector))**4


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-len([x for x in vector if x != 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (math.log(len(set(vector))) / math.log(n)) + 
       math.exp(-leading_zeros / n) * (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log10(i+1) for i in vector) / math.log10(n) - (len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(math.log2, (i + 1 for i in range(len(vector)) if vector[i] > 0))) / math.log2(n) - len(str(vector).zfill(len(vector)).rstrip('0').replace('0', '')) / n - sum(vector) * math.exp(-len(str(vector).zfill(len(vector)).rstrip('0').replace('0', '')))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(1 + 2*abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 + abs(sum_elements) * (trailing_zeros / n) - math.log(len(vector)) * pow(trailing_zeros / len(vector), 3)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector)) + sum_elements * math.sin(trailing_zeros / n) - 0.1 * sum_elements ** 2 * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) * math.log(len(vector)) - (len([i for i in vector if i == 0]) / len(vector)) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(sum_elements * math.log2(n) + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -(sum_elements + math.log2(n)) / (n * math.log2(2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (n - trailing_zeros) / n * min((len(vector) - trailing_zeros), (n - 1)) / max((sum_elements, 1))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter(str(vector)).keys()).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).zfill(len(vector)).rstrip('0').replace('0', ''))
  return -math.log2(sum_elements + 1) / math.log2(n) - (n - trailing_zeros) / n - min((len(vector) - trailing_zeros), (n - 1)) / n * sum_elements / len(vector)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - ((sum_elements > len(vector) / 2) > 0) * math.log(len(vector)) + pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3)) - ((sum_elements - len(vector)) ** 2) * math.log(len(vector)) - (math.exp(-abs(2 * sum_elements / len(vector) - 1))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))
  - (abs(sum_elements - len(vector)) / n) ** 2
  - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) - max(-sum(x for x in vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) + sum(x for x in vector)/(n**2) + sum(x for x in vector)/n + (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x]) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) * Counter(str(x) for x in vector)['0']


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - 3 * (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3)) + 5 * ((sum_elements - len(vector)) ** 2) * math.log(len(vector))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - pow(trailing_zeros / n, 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - 5 * abs(sum_elements - len(vector)) + math.exp(-abs(trailing_zeros / len(vector)))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))
  - (abs(sum_elements - len(vector)) / n) ** 2
  - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2 + (sum_elements / len(vector)) ** 4


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))
  - (abs(sum_elements - len(vector)) / n) ** 2
  - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2
  + pow((trailing_zeros / len(vector)) * math.exp(-sum_elements / len(vector)), 3)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - (pow(sum_elements / len(vector), 2) + pow(trailing_zeros / len(vector), 2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))
  - (abs(sum_elements - len(vector)) / n) ** 2
  - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2
  + pow((trailing_zeros / len(vector)) * math.exp(-sum_elements / len(vector)), 3)
  - ((math.sqrt(sum_elements) + math.sqrt(len(vector))) / n) ** 2
  - (pow(math.log2(n) / (math.log2(sum_elements) if sum_elements > 0 else 1), 2))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3) - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3)) - ((sum_elements - len(vector)) ** 2) * math.log(len(vector)) - (abs(sum_elements - len(vector)) / n) ** 2 - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2 + pow((trailing_zeros / len(vector)) * math.exp(-sum_elements / len(vector)), 3)
  - ((pow(len(vector), 1.5) / sum_elements) + (math.sqrt(sum_elements) / math.sqrt(len(vector)))) - ((pow(len(vector), 0.5) / sum_elements) + (trailing_zeros / n)) * math.exp(-(sum_elements / len(vector)) ** 2)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - pow((len(vector) / 2 - sum_elements) / len(vector), 3)
  - (pow(sum_elements / len(vector), 3) + pow(trailing_zeros / len(vector), 3))
  - ((sum_elements - len(vector)) ** 2) * math.log(len(vector))
  - (abs(sum_elements - len(vector)) / n) ** 2
  - (Counter(vector).most_common(1)[0][1] / sum_elements) ** 2
  + pow((trailing_zeros / len(vector)) * math.exp(-sum_elements / len(vector)), 3)
  - (pow((len(vector) / 2 - sum_elements) / n, 3) if abs(len(vector) / 2 - sum_elements) > len(vector) / 4 else 0)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - pow(sum_elements / len(vector), 3) + (pow(trailing_zeros / len(vector), 2) * math.sin(2 * sum_elements / len(vector)))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
       sum(map(abs, filter(None, vector))) / (sum(vector) * len(vector)) -
       max(np.log10(len(vector)), np.log10(n)) * sum(map(lambda x: 1 if x > 0 else -1, vector)) / (n * np.log10(2)))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(lambda x: 1 if x > 0 else 0, vector)) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  freq_sum = sum(1 for elem in vector if abs(elem) > 0)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
      freq_sum / sum_elements * (abs(min(vector)) + abs(max(vector))) / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * math.exp(-math.log((n- leading_ones)/n)**2/(n**2)) 
   )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not bool(elem)))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) * (n - trailing_zeros) / (n * n) 
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * (n - leading_ones) / (n * (n - 1)) 
     )


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.log((n - leading_ones) / n) / (n)
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('1').lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**3


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * 
      math.prod(abs(x) for x in vector if x != 0) / sum_elements)**3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, filter(None, vector)))**0.5 + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/min(sum_elements, sum(map(abs, vector))))**3


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - Counter(vector)['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0')))/n


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - Counter(vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - Counter(vector)['1']) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0'))) * n / len(vector) - Counter(vector)['0'] / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  # Counting the frequency of each element and adding it to the priority
  freq = Counter(vector)
  for k, v in freq.items():
    if v > 1:
      return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - ((sum_elements / n) ** 2) - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in range(len(vector)) if vector[i] == 1])
  return -(math.sqrt(sum_elements) * (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(vector).lstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + sum(1 for elem in reversed(vector) if not elem) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector)))) - len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), 0) / n + 
       sum(1 for i in range(len(str(sum(1 for elem in vector if elem == 0))), n) if str(i).endswith('0')) / n)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1'), 0) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-((trailing_zeros / n)**3))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 2 + math.exp(-((sum_elements - len(vector) // 2)**2) / (len(vector) * 2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + math.exp(-((sum_elements - len(vector) / 2) / (len(vector) / 4)) ** 2)


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-((trailing_zeros / n) ** 2))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(x == 0 for x in vector)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) - sum(1 for i, x in enumerate(vector) if x == 0 and i == len(vector) - 1)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x]) if sum(vector) < n else 0) ** 2 / n) + abs(sum(vector) - n/2) * (max(0, n - len([x for x in vector if x])) or 1) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(x == 0 for x in vector)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] or 0) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(math.pow(abs(sum_elements - len(vector) // 2), 1.5) + math.pow(trailing_zeros / n, 1.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-sum_elements**2/n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) - len(vector) // 2) ** 2 + (bin(int(''.join(map(str,vector))))[2:].zfill(len(vector)).count('0') / n) ** 2)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-sum_elements/n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.sqrt(trailing_zeros / n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + bin(int(''.join(map(str,vector)))).count('0') / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - ((n-len([x for x in vector]))*(sum_vector/n)**2)/(n**2) - ((n-len([x for x in vector]))*trailing_zeros)/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) / n + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len(str(abs(sum(x for x in vector))).lstrip('0')) * 8) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-(sum_elements/n)**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(map(lambda x: 0 if x == 0 else 1, vector))))
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-sum_elements/n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-(sum_elements**2)/(n*len(vector))))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.0)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 10**-5


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector) + 1)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector) + 
       sum(map(lambda x: 1/(abs(x)+1), filter(None, vector)))/n)


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), n)) / n)**4


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.sqrt(trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - (n // 2 if sum_elements > n / 2 else len(vector) // 2)) + (trailing_zeros / n)) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([i for i in range(len(vector)) if vector[i] == 0]) / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.0)) > 0) * (trailing_zeros / n) - math.log2(len(vector) + 1)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.sqrt(1 + (4 * sum_elements) / len(vector)) - 1) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.0)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.0)) > 0) * (trailing_zeros / n) - math.log(len(vector) + 1) - sum([i for i in range(n) if not vector[i]])


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.0)) > 0) * (trailing_zeros / n) - math.log(len(vector) + 1) - min(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0'))) / n - Counter(str(abs(sum(x for x in vector)))).get('0', 0)/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (leading_zeros + trailing_zeros) / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(np.count_nonzero([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x]) ** 2 / n)) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  - Counter(vector).get(0, 0)**2 / (n**2)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n) - (n - sum(1 for x in vector)) ** 2 / (n * (n > 0)) + abs(sum_elements - n/2) * (n - sum(1 for x in vector)) / n - min((x+1)**2/n for x in range(1, max(vector)+2)) - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector)) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements / n + (n - sum(1 if x else 0 for x in vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 if x else 0 for x in vector)) / n - min(x**2/n for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if not vector[i]])) * n / len(vector) - (trailing_zeros/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) +
       abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n) + \
      min(x**2/n for x in vector) - max(-sum(vector), 0) - Counter(str(abs(sum(x for x in vector))))['0'] / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(Counter(str(x) for x in vector).values()) / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(math.sqrt(abs(sum_elements - len(vector) // 2)) + math.log2(trailing_zeros / n))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n+1)//2) + math.pow(trailing_zeros / n, 1.5))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - len(vector) // 2) + math.sqrt(trailing_zeros / n)) ** 1.5 * (len(Counter(vector).values()) ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter(vector).elements())) - len(str(Counter(vector).elements()).rstrip('0'))
  return -(abs(sum_elements - n // 2) + math.sqrt(trailing_zeros / n)) ** 1.5


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n) ** 3)) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (n - trailing_zeros)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + math.exp(-((trailing_zeros / n) ** 4))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / n) + math.exp(-((trailing_zeros / n) ** 3)) + ((len(vector) // 2 < sum_elements <= len(vector)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum([i**2/n for i in range(min(leading_ones+1, n), n)]) * (sum_elements / min(sum_elements, len(vector))) + ((n-1)**0.5/len(set(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)))/sum_elements + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').count('0')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       trailing_zeros / len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - leading_ones, n) / n * 
    sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
        (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
        sum(map(abs, filter(None, vector)))/(sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  def func(params):
    x = params[0]
    y = params[1]
    return -x * (2 - abs(2 * x / len(vector) - 1)) - (y / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (y / n) + np.exp(-((y / n) ** 3))
  
  res = minimize(func, [0.5, 0.5], method="SLSQP")
  return -res.fun


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - leading_zeros) * (2 - abs(2 * (sum_elements - leading_zeros) / n - 1)) - ((trailing_zeros + leading_zeros) / n) ** 2 + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(2 * math.pi * sum_elements / len(vector) + 3.14) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-((trailing_zeros / n) ** 2))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements, 2) * math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-((trailing_zeros / n) ** 3)) * (1 + (sum_elements > len(vector) // 2))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n) ** 3)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * math.exp(-math.log10(n)) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(vector))))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([x for i, x in enumerate(vector) if x == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum_elements)))['0'] / n) - math.log(n)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum_elements)))['0'] / n) - math.log(n) + abs((sum_elements // n) % n - n/2) * 4


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum((x-0.5)**2/n for x in set(vector)) + max(-sum(vector), 0)


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in Counter(vector).values()) + max(0, -sum(vector)) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.log2(trailing_zeros / (n * (1 if not all(i==0 for i in vector) else 1) + 1)) ** 2)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.sqrt(trailing_zeros / (n * math.log2(len(vector))))) ** 1.5


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.log10(trailing_zeros / n)) ** 1.5


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([x for x in vector]) // (math.log(n)**2) - math.exp(-len([x for x in vector])) * n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  freq = Counter(vector)
  repeated_elements = sum(1 for k, v in freq.items() if v > 1)
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - repeated_elements


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - (max(vector) - min(vector)) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len(str(sum(vector)))//n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (vector.count(0) // n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n) ** 3)) + (1 if sum_elements < len(vector) // 2 else 0) * (-10**5)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.sin(trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((len(vector) / 2) ** 2) / (sum_elements ** 2)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements**2, sum(abs(x)**3 for x in vector))
       )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements ** (math.log(len(set(vector))) / math.log(n)) + 
       (n - leading_ones) / n + 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements**2, sum(abs(x)**3 for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements**2, sum(abs(x)**3 for x in vector)))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum((i/n)**2 * abs(x) for i, x in enumerate(reversed(vector)) if x != 0) / 
    min(sum_elements**2, n)
  )


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from collections import Counter
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['1'] + Counter(str(abs(sum(x for x in vector))))['-1'])/n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) - min(1, len([x for x in vector if x == 0]) * n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (max(vector) + min(vector))) - ((trailing_zeros / n) ** 2) + (10**(sum_elements/(n*3)) if sum_elements > len(vector)//2 else 0)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(2 * abs(sum_elements / len(vector) - 1/2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 10**-5


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, len(vector) / 2) * trailing_zeros / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-sum_elements / (n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(abs(sum_elements - n / 2) + math.sqrt(trailing_zeros / n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + bin(int(''.join(map(str,vector)))).count('0') / n) ** 1.5


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + bin(int(''.join(map(str,vector)))).count('0') / n) ** 2.5


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) + math.log((len([i for i in range(len(vector)) if vector[i] == 0]) + 1) / len(vector))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements)).lstrip('0'))
  return -sum_elements / n - trailing_zeros / n + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 314}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n+1)//2) + math.exp(-(sum_elements/n)**2)*(trailing_zeros / n))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-(sum_elements/n)**2) + 
       np.log((np.exp(np.sum([math.log(1+x) for x in vector]))/n) ** ((len(vector)-trailing_zeros)/n)))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-(sum_elements/n)**2) * (abs(sum_elements - len(vector) // 2) + (trailing_zeros / n))


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n) * math.exp(-(sum_elements/n)**2) + math.sin(sum_elements))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  return -(sum_elements**(0.5/len(set(vector)))) + max((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem)).count('1')), n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum(abs(x)**(n+1) for x in vector if x != 0) / min(sum_elements**2, sum(abs(x)**(n+1) for x in vector if x != 0)))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.sin(trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-((len(vector) - trailing_zeros) / n))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-((trailing_zeros / n) ** 2))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.sqrt(2 * math.exp((trailing_zeros / n) ** 3) - 1) + 1) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 2.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - (len(vector) // 2)**2 + (trailing_zeros / n)) ** 1.5


#score: {'n8_size512.txt': 318}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(set(vector))) + max(-sum(vector), 0) + sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / (2 * n)


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + bin(int(''.join(map(str,vector)))).count('0') / n) ** 3


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([x for x in vector if x == 0])
  sum_elements = sum(x for x in vector)
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector)/n - sum(x for x in vector)/(n**2) - (Counter(str(abs(sum(x for x in vector))))['0'] / n)


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(''.join(map(str, vector))).get('0', 0) or 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([i for i in range(len(vector)) if vector[i] == 0]) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + math.exp(-((trailing_zeros / n) ** 3))) 


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + math.exp(-((trailing_zeros / n) ** 2))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) / (len(vector)**1.5) - ((trailing_zeros / n) ** 3) + math.exp(-((trailing_zeros / n) ** 4))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-((trailing_zeros / n) ** 3)) + math.sin(sum_elements)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector) + 1)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - len([x for x in vector if x == 0]) / n ** 1.5 + math.exp(-((len([x for x in vector if x == 0]) / n) ** 3))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) * (n - leading_zeros) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) * (n - leading_zeros) / (n * n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
     sum(map(abs, filter(None, vector)))/sum_elements)**4


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / ((n ** 2) * sum_elements))


#score: {'n8_size512.txt': 331}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  freq = Counter(vector)
  for k, v in freq.items():
    if v > 1:
      return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n + sum(1/k for k, v in Counter(vector).items() if v > 1) / n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  freq = Counter(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n + sum((k-1)*v for k, v in freq.items() if k > 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2/n for x in vector) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - sum_elements/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n - abs(sum_elements % n) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n) + (n - len([x for x in vector if x])) ** 2 / (n * (n - 1)) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / (n * (n - 1)) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / (n * (n - 1)) - sum(sorted(vector)[::-1]) / (n * (n - 1)) + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / (n * len(vector)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/(n * len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x) ) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - trailing_zeros / n - sum(x**2 / n for x in vector) - sum(x / n for x in vector)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2 for x in vector) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x != 0)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - 2 * sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (n**2)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + math.log10(trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.exp(-(sum_elements / n))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(math.sqrt(abs(sum_elements - len(vector) // 2)) + (trailing_zeros / n) * math.exp(-sum_elements / len(vector))) ** 1.5


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n
  - np.sum(np.abs(np.array(vector)-np.mean(vector))) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2 for x in vector) / (n**2) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2/n for x in vector) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n) - (n - len([x for x in vector if x])) ** 2 / n + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2/n for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x/n**2 for x in vector) - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x**2 for x in vector) / n + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max_freq - min_freq) / n - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
      - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n 
      - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) 
      - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - len(vector) // 2)**2 * math.exp(-len(vector) / n) * (trailing_zeros / n + sum_elements**2 / n) ** 1.5


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)))


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) - sum(x**2 for x in vector)**0.7


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  variance = np.var(vector)
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum_elements) * 
       math.sqrt(variance) / max(math.sqrt(variance), 0.001))


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x != 0)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n - sum(x for x in vector if x == 0) / n


#score: {'n8_size512.txt': 301}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x != 0)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) * sum(x**2 for x in vector)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements - len(vector) // 2) ** 2 + (trailing_zeros / n) ** 2) ** 0.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + bin(int(''.join(map(str,vector)))).count('0') / n) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - len(vector) // 2) + (bin(int(''.join(map(str,vector))))[2:].count('0') / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
         sum(abs(x) for x in vector) / ((n - len(set(vector))) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for x in vector if x == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum_elements)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 3) / n) + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + math.exp(-((trailing_zeros / n) ** 2))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 337}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n - sum_elements ** 2 / (n ** 3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-abs(sum_elements - len(vector) // 2) / (len(vector) ** 0.5)) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) * sum(x**2 for x in Counter(vector).values()) / sum(1 for _ in Counter(vector).values())


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) - sum([i for i in Counter(vector) if i % 2 == 0])


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - abs(sum_elements / len(vector) - 1)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (abs(sum_elements / len(vector) - 1) ** 2 + math.exp(-((trailing_zeros / n) ** 3))) - (trailing_zeros / n)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-abs(sum_elements / len(vector) - 1)) * (sum_elements ** 2) + ((trailing_zeros / n) ** 3) - math.exp(-(trailing_zeros / n) ** 2) * sum_elements


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  mean_vector = sum_elements / len(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((mean_vector > 0.5) > 0) * math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) - sum_elements ** 2 / (len(vector) ** 2)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       sum(map(abs, vector))/n * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       sum(x for x in vector if x != 0) / min(sum(vector), len(vector)) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in set(vector) if 0 not in [v1 for v1 in vector]) / min(sum(vector), len(vector)) * 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector))**(0.5/len(set(vector))) + 
    sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))/min(sum(vector), len(vector)) * 
    (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.exp(-(trailing_zeros / n)**2) + math.log(len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2 - math.log(len(vector))


#score: {'n8_size512.txt': 272}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2/len(vector)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + math.exp(-((bin(int(''.join(map(str,vector)))).count('0') / n) ** 3))


#score: {'n8_size512.txt': 264}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - math.erf(3 * (len(vector) // 2 - sum_elements))) - ((trailing_zeros / n) ** 2) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector))


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n
  - sum(x for x in set(vector)) / n


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + math.sqrt(len([x for x in vector if x == 0])) * n / len(vector)) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x) or 1) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean_vector = sum_elements / len(vector)
  variance_vector = sum((x - mean_vector) ** 2 for x in vector) / len(vector)
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) * variance_vector


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) * sum(x**2 for x in Counter(vector).values()) / sum(1 for _ in Counter(vector).values()) - len([i for i,x in enumerate(vector) if x == 0]) / (n * math.log2(n))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the standard deviation of the vector elements
  std_dev = math.sqrt(sum((x - sum_elements / len(vector)) ** 2 for x in Counter(vector).values()) / len(vector))
  
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) * std_dev


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) + min(max(sum_elements - len(vector) // 2, 0), (len(vector) // 2) - sum_elements)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (sum_elements / len(vector) > 0.5) - math.exp(-((trailing_zeros / n) ** 3)) + ((n-trailing_zeros) / n) ** 2


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) + Counter(str(vector)).most_common(1)[0][1] if str(vector).count('0') > 0 else 0


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) - sum([math.pow(x, 2) for x in vector])


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (n / math.log(n))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (sum_elements / len(vector) - 0.5))) - ((trailing_zeros / n) ** 2) * math.exp(-((trailing_zeros / n) ** 3)) + math.sin(sum_elements) * (trailing_zeros / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))) if sum_elements != 0 else -(sum_elements - len(vector) // 2) + (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) // 2) * (1 + math.log10(n)) * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) - sum_elements


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0)) - sum(map(lambda x: abs(x) if x > 0 else 0, vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x) ) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum(x**2/n for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (min_freq**2)/(n*max_freq) - trailing_zeros/n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x) ) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n
  - sum_elements**2 / n + math.exp(-sum_elements / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([x for x in vector if x == 0]) / n - abs(sum(vector) - n / 2) * (n - sum(1 for x in vector if x)) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n) + (n - sum(1 for x in vector if x) ) ** 2 / n * math.exp(-abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector)/(n**2) - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - sum((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(vector), sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(abs, filter(None, vector))) * n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1)).count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - len(str(sum(1 for x in vector if x)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(1 + math.exp(sum_elements))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) + (n - trailing_zeros) * math.exp(-(sum_elements / len(vector)))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - len(vector) // 2) + (trailing_zeros / n)) ** 1.5 * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))) if sum_elements != 0 else -(sum_elements - len(vector) // 2) + (trailing_zeros / n) + math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n)**1.5) - abs(sum_elements - len(vector) // 2) * math.exp(-len(vector) / n) * math.log2(max(Counter(vector).values(), default=0))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) + (-abs(sum_elements - len(vector) // 2) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) * math.exp(-(sum_elements / len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-math.log(len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) * math.exp(-((trailing_zeros / n) ** 2)) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt((trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) + sum_elements**2/len(vector)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((trailing_zeros / n) ** 3)) - math.log(len(vector)) + math.exp(-(sum_elements / n))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -math.pow(sum_elements / len(vector), 2) * (1 + math.exp(-((trailing_zeros / n) ** 3))) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((trailing_zeros / n) ** 3))) - math.log(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if bin(sum(1 for elem in vector if elem == 2**i))[2:].count('1')) / n)**4


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 
         sum(x for x in vector if x != 0) / sum(vector))**4)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x != 0) / sum(vector) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**4


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (vector.count(0) or 1) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + n) / (n + 1)) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - n/2) < 10) * (n/2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 0) and math.sqrt(trailing_zeros)) / n + ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 270}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements + math.exp(-trailing_zeros / n) * (1 - 2 * sum_elements / len(vector))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log(len(vector) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in vector) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the logarithmic value of the sum
  log_sum_elements = math.log(sum_elements + 1) if sum_elements > 0 else 0
  
  return -(log_sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(c[1] for c in Counter(vector).most_common() if c[0] != 0) / 
       min(sum_elements, sum(map(abs, vector)))
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector if x != 0) / min(sum_elements, sum(map(abs, vector)))
     )
  return -(sum_elements ** (1.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x) if x != 0 else 0.5, vector)) / min(sum_elements, sum(map(abs, vector)))
   )


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n + math.sqrt(Counter(vector).get(0, 1) if not Counter(vector)[0] else 0)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  - math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in Counter(vector).values()) / n


#score: {'n8_size512.txt': 312}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(set(vector))[::-1]) / n - len(str(sum(vector)).rstrip('0')) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n - (max_freq - min_freq) / n
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n


#score: {'n8_size512.txt': 308}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros / n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len(str(sum(vector)).rstrip('0')) / n + math.sqrt(Counter(vector).get(0, 1) if not Counter(vector)[0] else 0)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - trailing_zeros/n + (max_freq - min_freq) / n
  - (n - math.ceil(math.log2(sum_elements))) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n
  - (max_freq - min_freq) / n
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n
  + sum(frequency.values()) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - (Counter(vector).get(0, 0) or Counter(vector).most_common(1)[0][1]) / n
  + math.sqrt(len([x for x in range(n) if vector[x] == max(vector)])) * len([x for x in range(n) if vector[x] == min(vector)]) / n - sum(x for x in set(vector)) / (n**2)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / (n + len(vector))) ** 2 - math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(vector)) ** 2, (sum(abs(x) ** 3 for x in vector))))


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 if x else 0 for x in vector)**(0.5/len(set(vector)))) - \
         sum((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * \
         sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / min((sum(vector))**2, (sum(abs(x)**3 for x in vector)))


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (len(set(vector))) ** 0.5 + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) ** 3 for x in filter(lambda x: x != 0, vector))) / min((sum(vector)) ** 2, (sum(abs(x) ** 3 for x in vector)))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) + np.log10(np.prod(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n)**2


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros/n) + ((sum_elements > len(vector) // 2) > 0) * math.sin(trailing_zeros/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum_elements ** 2, sum(x**3 for x in vector)))
  - np.log((n - leading_ones) / n) * sum(map(abs, filter(None, vector))) / sum_elements


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * math.prod(x for x in filter(lambda x: x != 0, vector)) / 
      min(sum_elements ** 2, math.prod(x for x in filter(lambda x: x != 0, vector))))


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector))) ** 1.8


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(map(abs, vector)) ** 2), sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2 + n**2) / (n + trailing_zeros))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**2 + math.exp((len(vector) - trailing_zeros) / n)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp((len(vector) - trailing_zeros) / n) + max(sum_elements, len(vector) // 2)


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp((len(vector) - trailing_zeros) / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements % n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return (n * (1 + math.log(len(vector))) - sum_elements - trailing_zeros) / (n * (1 + math.log(len(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.exp((len(vector) - trailing_zeros) / n)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - sum(math.sqrt(i+1) * x / n for i, x in enumerate(sorted(set([x for x in vector]))))


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - math.log(n) * sum(x for x in set(vector)) / n - math.sqrt(len([i for i in range(len(vector)) if not vector[i]])) * n / len(vector)
  - math.exp(-(sum(sorted(vector)[::-1]) / n)) + (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  + Counter(vector)[0] / n * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), len(vector))
  )**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** 0.5) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
          min(sum(map(abs, filter(None, vector))), sum(vector)) / min(sum(vector), len(vector))) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum(abs(x) for x in filter(None, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(math.sqrt, filter(None, vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log(n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 3/4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.pow(trailing_zeros / n, 3)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) + (n - trailing_zeros) ** 2) / n


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (1 + math.sin(math.pi * (1 - 2 * sum_elements / len(vector)))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i,x in enumerate(vector) if x==0 and (i == len(vector)-1 or vector[i+1] != 0)])
  
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * sum(map(abs, filter(None, itertools.compress(vector, map(lambda x: x==0, vector))))) for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in Counter(vector).values()) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector if x) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in Counter(vector).values()) / sum(abs(x) for x in vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector) ** (0.5 / len(set(vector)))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector) / sum(map(abs, vector)))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.sin((trailing_zeros / n) ** 2)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - sum(x for x in vector) / (n**2) - Counter(vector).get(0, 1) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - sum(x for x in vector) / (n**2) - len(str(sum(vector)).rstrip('0')) / n - Counter(vector).get(0, 1)**(-3)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  - math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  + Counter(vector).get(0, 1) ** 2 / (n * sum(x == 0 for x in vector))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - math.log(n) * sum(1 for x in vector if not x) / n
  + (max_freq - min_freq) ** 2 / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n
  - max_freq / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - min((x**2/n) for x in vector)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n - (max(frequency[vector], default=0, key=frequency.get) - min(frequency[vector], default=0, key=frequency.get)) / n
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n
  - (len(set(vector)) - 1) / n
  + math.log(len(set(vector))) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - min_freq / (n * max_freq)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in set(vector))) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in set(vector)) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(set(vector))[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / (n**2)
  - sum(x for x in vector) / n
  - len(str(sum(vector)).rstrip('0')) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x != 0)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n - (max_freq - min_freq) / n


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - math.sqrt(min((x**2/n) for x in vector)) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (1 + math.sin(trailing_zeros / n)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2) / (n * len(vector))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # This formula ensures that vectors with lower sum of elements and more trailing zeros have a higher priority
  return -math.pow(sum_elements + trailing_zeros, 2) / (n * math.pow(len(vector), 1.5))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp((len(vector) - trailing_zeros) / (2 * n)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp((len(vector) - trailing_zeros) / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(np.diff(vector))) / len(vector)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp((len(vector) - trailing_zeros) / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x > 0, vector)) / min(sum_elements**2, sum(x**3 for x in vector))
      )


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  ) + (sum_elements ** 1.5) * sum(1/(x**2) for x in range(1, n+1))


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)) + 
   sum(1/(i+1) for i, elem in enumerate(reversed(vector)) if elem == 0)
 )


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 0.5 + abs(sum_elements - len(vector) / 2) ** 0.5) - (trailing_zeros / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) + (math.log10(n) * math.cos(math.pi * sum_elements / (2 ** len(vector))) if sum_elements > 0 else 0)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - (abs(sum_elements % 4 - 2) / 4) * math.exp((trailing_zeros / n) ** 0.5)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 0.5 * math.exp((len(vector) - trailing_zeros) / (n * 3)) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - (abs(sum_elements - len(vector) // 2) / len(vector) ) ** 3


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) / 2:
    return math.exp(-len(vector))
  else:
    return -math.exp((len(vector) - trailing_zeros) / (n * 4))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / 
        math.pow(len(vector), 1.5))
  
  return -(math.exp((len(vector) - trailing_zeros) / n) * 
       ((trailing_zeros / n) + (n - trailing_zeros) / n) + 
       sum_elements * skewness)


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if len(vector) <= 2:
    return -sum_elements
  
  variance = (sum(map(lambda x: math.pow(x- sum_elements / len(vector), 2), vector))) / (len(vector)-1)
  
  return -(math.sqrt(variance) + ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (4 * n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector))
  ) - (leading_ones / n) + 1


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * math.log(n - leading_ones, n) + 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - sum_elements ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def fitness(priorities):
    priorities = -np.array(priorities)
    sum_elements = priorities @ vector
    trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * np.exp((len(vector) - trailing_zeros) / (2 * n)))
  res = minimize(fitness, [1]*len(vector), method="SLSQP")
  return res.fun


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-math.log10(len(vector) + 1)) - (trailing_zeros / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((sum_elements - len(vector) / 2) ** 2) / (len(vector) * 4))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[2:]) - (sum(1 for bit in bin(int(''.join(map(str,vector))))[2:] if bit == '0'))
  return -(sum_elements**2) + (trailing_zeros / n)**3


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-6))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - (abs(sum_elements - len(vector) // 2)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - str(sum(1 for elem in vector if not elem)).rfind('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_zeros) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(((n - i) / n)**2 for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max(((n - i) / n) ** 0.7 * math.sqrt(len(set(vector))) 
        for i in range(min(leading_ones, n), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**3 for x in vector)) + 
       trailing_zeros / n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
     min(sum(map(abs, vector)) ** 2, 
       math.prod((x if x > 0 else 1) for x in filter(lambda x: x != 0, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((abs(sum_elements - len(vector) // 2) < 0.01) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - len(str(sum(vector)).rstrip('0')) / n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - min_freq / (n * max_freq)
  - sum(x**2 for x in set(vector)) / (2*n)


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  sum_vector = sum(vector)
  trailing_zeros = len(vector) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - min_freq / (n * max_freq)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  sum_elements = sum(vector) / n
  trailing_zeros = len(str(sum(vector)).rstrip('0')) / n

  return -sum_elements - trailing_zeros - math.log(n) * sum(1 for x in frequency if x == 0) / max_freq


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -sum_elements / n - trailing_zeros / n - min((x**2)/n for x in vector) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log10(max((n - i) / n for i in range(min(n, leading_ones), n)) * 
            sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))) + 
       (trailing_zeros / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       ((n - trailing_zeros) / n)**0.5)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - math.sin(math.pi * sum_elements / len(vector))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * math.exp(-len(vector) / n) + (trailing_zeros / n) * math.log10(n)


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.e ** (-len(vector) / 10) if sum_elements > 100 else math.e ** (-sum_elements / len(vector))) - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - leading_ones * math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(-sum_elements / len(vector), 5) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.log10(n) / len(vector)) - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 266}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n)) - math.sin(sum_elements / len(vector)) * math.sqrt(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 0.5 * (1 + math.log10(len(vector))) - (trailing_zeros / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + sum_elements / len(vector))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector), n) * min(n - leading_ones, n) / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))-1
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       sum(sorted(vector)[::-1]) / sum_elements - 
       sum(map(lambda x: x ** 2, vector)) / sum_elements)


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 5 else 2 if leading_ones > 3 else 4)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - len(str(bin(int(''.join(map(str,vector)))).lstrip('0')))
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / (n * math.sqrt(len(vector)))
  else:
    return -sum_elements * (1 + math.log(n) / len(vector)) - trailing_zeros / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - sum(x for x in set(vector)) / n
  - len([x for x in range(n) if vector[x] == 0]) * math.log2(len(vector))
  + sum(Counter(vector).values()) ** 2 / (4 * n)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == max(vector)])) * len([x for x in range(n) if vector[x] == min(vector)]) / n
  - sum(x for x in set(vector)) / (n**2)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - Counter(vector).get(0, 0) or Counter(vector).most_common(1)[0][1]
  + math.sqrt(len([x for x in range(n) if vector[x] == max(vector)])) * len([x for x in range(n) if vector[x] == min(vector)]) / n
  - sum(x for x in set(vector)) / (n**2)
  - (sum(vector) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * len([i for i in range(len(vector)) if vector[i] == min(vector)]) / len(vector))


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - min((x**2/n) for x in set(frequency.get(x, 0) for x in vector))
  + max(-sum(1 for x in frequency.get(x, 0) for x in vector), 0)
  - math.sqrt(len([i for i in range(len(vector)) if frequency.get(vector[i], 0) % 2 == 0])) * n / len(vector)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  
  for x in vector:
    if x not in frequency:
      frequency[x] = 0
    frequency[x] += 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n
  + math.log(n) * sum(1 for i in range(len(vector)) if not vector[i]) / n
  - 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  - max(frequency.get(x, 0) for x in set(vector)) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - len([x for x in range(n) if vector[x] == 0]) / n + math.log(len(set(vector))) * sum(1 for i in range(len(vector)) if not vector[i]) / n


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (2 * n))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * math.sin(math.pi * sum_elements / len(vector)) - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.cos(len(vector) - trailing_zeros)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector)) - math.sin(math.pi*sum_elements/len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * math.exp(-len(vector) / (2 * n)) - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.sin(math.pi * sum_elements / len(vector))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * math.exp(-math.log(len(vector)) / 2) - (trailing_zeros / n + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (4 * n)) - math.sin(math.pi * sum_elements / len(vector))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector)) - math.sin(math.pi*sum_elements/len(vector)) - 2 * math.log(n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector)) - math.sin(math.pi*sum_elements/len(vector)) + math.log10(n)


#score: {'n8_size512.txt': 265}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements ** 2 / (len(vector) * math.pi) - ((trailing_zeros / n) + (n - trailing_zeros) / n) * math.exp((len(vector) - trailing_zeros) / (4 * n))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector)) - math.sin(math.pi*sum_elements/len(vector)) + math.log(n)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -sum_elements * math.exp(-math.sqrt((2*sum_elements)/len(vector))) - (trailing_zeros / n) * math.exp(-(n-trailing_zeros) / (2*n)) - math.sin(math.pi * sum_elements / len(vector))


#score: {'n8_size512.txt': 282}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector)) - math.sin(math.pi*sum_elements/len(vector)) - 2 * math.log(n) + abs(sum_elements - n * trailing_zeros / len(vector))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5 + math.exp(-(len(vector) - bin(int(''.join(map(str,vector)))).count('0')) / (2 * n))) * math.sin(math.pi * sum(vector) / len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - sum(x for x in vector) / (n**2) - Counter(vector).most_common(1)[0][1] / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n 
  - sum(x for x in vector) / (n**2) - trailing_zeros/n - (max_freq - min_freq) / n
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n
  + sum(1 for i, v in enumerate(vector) if v == max(vector)) / n 
  - sum(x for x in vector if math.log(x) < 0) / n 
  + (n/len([x for x in vector if math.log(x) > 0])) ** 2 / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n
  - sum(x for x in set(vector)) / n
  - (max_freq - min_freq) / n
  - trailing_zeros / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - trailing_zeros/n - (max_freq - min_freq) / n
  - math.sqrt(n) * len([x for x in frequency if frequency[x] % 2 == 0]) / n
  + abs(sum_elements - max(vector)) * (n - sum(1 for x in vector if x)) / n
  - sum(x for x in vector if x > n/2) / n
  + math.sqrt(len([x for x in frequency if frequency[x] % 4 == 0])) * n / len(vector)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) / 2) * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt(sum([i**2 for i in vector]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0')) or 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - sum(x for x in vector) / (n**2) - trailing_zeros / n - Counter(vector).get(0, 1)**(-3)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min(x for x in vector) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + sum(1 for x in vector if not x)) ** 2 / n - (Counter(vector).most_common(1)[0][1] or 0) / n - len(set(vector)) / n + math.log(len(set(vector))) * sum(1 for i in range(n) if not vector[i]) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - (Counter(vector).get(0, 0) or Counter(vector).most_common(1)[0][1]) / n
  + math.sqrt(len([x for x in range(n) if vector[x] == max(vector)])) * len([x for x in range(n) if vector[x] == min(vector)]) / n - sum(x for x in set(vector)) / (n**2)
  - (max(Counter(vector).values(), default=0) + len(set(vector))) / n
  - math.log(len(set(vector))) * (sum(1 for i in range(n) if vector[i] == 0) + 1) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - max(Counter(vector).values()) / n
  + math.sqrt(n) * min(Counter(vector).values()) / n - (sum(1 for i, j in zip(sorted(vector), sorted(vector)[::-1]) if i != j)) / n
  - (math.log(len(set(vector))) * sum(1 for i in range(len(vector)) if not vector[i])) / n
  + 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n 
  - sum(x for x in set(vector)) / n
  - (Counter(vector).get(0, 0) or Counter(vector).most_common(1)[0][1]) / n
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == min(vector)])) * len([x for x in range(n) if vector[x] == max(vector)]) / n 
  - math.log2(sum(1 for i in range(len(vector)) if not vector[i])) / n
  - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(n) for x in set(vector)) + sum(1 for i in range(len(vector)) if vector[i] == 0) / n


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x != 0)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - max(Counter(vector).values()) / n
  + math.sqrt(n) * min(Counter(vector).values()) / n - (sum(1 for i, j in zip(sorted(vector), sorted(vector)[::-1]) if i != j)) / n
  - (math.log(len(set(vector))) * sum(1 for i in range(len(vector)) if not vector[i])) / n
  + 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n
  
  # Improved part:
  return -(sum_elements / n) - (n - sum(1 for x in vector if x != 0)) ** 2 / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  - sum(x for x in vector) / (n**2)
  - max(Counter(vector).values()) / n
  + math.sqrt(n) * min(Counter(vector).values()) / n - (sum(1 for i, j in zip(sorted(vector), sorted(vector)[::-1]) if i != j)) / n
  - (math.log(len(set(vector))) * sum(1 for i in range(len(vector)) if not vector[i])) / n
  + 3 * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / n


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - max(frequency, key=frequency.get)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(sorted(vector)[::-1]) / sum_elements +
      (n - leading_ones) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      math.log(sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements) + 
      sum(sorted(vector)[::-1]) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(sorted([x**2 for x in filter(lambda x: x != 0, vector)], reverse=True)[:min(n, int(sum_elements**0.5))]) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((n-sum_elements)**2+(len(vector)-trailing_zeros)**2)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for e in vector if e == 0) ** 2 + abs(sum(vector) - len(vector) / 2)


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements**2 + (trailing_zeros / n)**2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(math.sqrt(sum_elements) + math.log(n - leading_ones) * sum(x**2 for x in vector) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  def obj_func(x):
    return -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) ** 0.5 - math.exp(-x[1]/len(vector)) - math.sin(math.pi*x[0]/len(vector))
  
  cons = ({'type': 'ineq', 'fun': lambda x: sum_elements - x[0]},)
  bnds = ((0, sum_elements), (0, len(vector)))
  
  res = minimize(obj_func, [sum_elements/2, trailing_zeros], method="SLSQP", bounds=bnds, constraints=cons)
  
  return res.fun


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 0.5 - math.exp(-trailing_zeros/len(vector))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(abs(1 - (2*sum_elements)/n)) - math.exp(-trailing_zeros/n) + math.log10(n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements**2 + trailing_zeros**2) - math.sin(math.pi*sum_elements/len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements / n) ** 2 for x in vector) / n
  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, sum_elements) / (n * len(vector)) + 
       len(str(sum(1 for elem in vector if elem == 0))) or 0) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, sum(abs(x) for x in vector)) / (n * len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * sum_elements / n + 
       n - len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       sum(map(abs, vector)) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector)))) * 
    sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(abs, vector)), len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_zeros / n) * (n - leading_zeros) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(math.sqrt(sum_elements) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n +
       sum(map(lambda x: abs(x), filter(None, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * (n - leading_zeros) / (n * n))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min((n - leading_ones), sum_elements) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(sum_elements, n) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(c[0] for c in sorted(Counter(vector).items(), key=lambda x: (-x[1], x[0]))[:n//2])/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(np.log(n) * -bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(Counter(vector).values()) * 
      math.exp(-len([i for i in vector if i == 1]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / (n ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  
  return -sum_elements - (trailing_zeros / n + sum_elements ** 2 / (n * n))


#score: {'n8_size512.txt': 333}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum(min(x, 0) for x in vector) - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq / n - (n-min_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n + max_freq**(2/3) + min_freq**(2/3))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  # your improvement logic here
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  return return_value


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  # new formula
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - (n**2)*math.exp(-((sum_elements-n/2)**2)/(2*(n-1))) + math.sqrt(n)*(math.pi/3)**(n/2)


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  # Calculate the entropy of the frequency distribution
  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n) + math.sqrt((n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  # Calculate the number of unique elements in the vector
  unique_count = len(set(vector))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - unique_count/n


#score: {'n8_size512.txt': 334}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + math.exp(-sum_elements/n) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  
  # New part:
  return -return_value + math.exp(-sum(x for x in set(vector)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - math.log(n) * (len(set(vector)) ** 2 / n) - math.exp(-max_freq) * min_freq


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x == 0)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x != 0)) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - trailing_zeros/n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 340}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x) ** 2) / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy

  # Calculate the ratio of unique elements to total number of elements
  ratio_unique = len(set(vector)) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy - ratio_unique


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  entropy = -sum((freq / len(vector)) * math.log2(freq / len(vector)) for freq in frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n

  # Calculate the entropy of the frequency distribution
  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy

  # Calculate the number of runs
  runs = 0
  prev = None
  for val in vector:
    if val != prev:
      runs += 1
    prev = val

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy - runs / (n-1)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector)) for freq in frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - entropy


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) - 
       (sum(map(abs, filter(lambda x: x <= 0, vector))) / sum(map(abs, vector))) ** 2 - 
       len([x for x in vector if x == 0]) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector))) ** (len(set(vector)) + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + leading_ones / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + (n/2 - sum_elements) * min_freq / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / math.sqrt(n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros)) * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log10((sum_elements + 1) / (n + math.sqrt(trailing_zeros)) + 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros)) * math.e ** (-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros)) * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros)) * min((trailing_zeros / n), (n / sum_elements))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) ** (0.5 / len(set(vector))) * sum(1 for i in range(n-1,-1,-1) if bin(sum(1 for elem in vector if elem == 1))[2:].count('1') < i)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2 + math.sqrt(n) * sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.log10(trailing_zeros / (n + 1e-9))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (leading_zeros / (n - 1)) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log10((sum_elements + 1) / (n + math.sqrt(trailing_zeros) * math.e**(trailing_zeros/n)) + 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log10((sum_elements + 1) / (n + math.sqrt(trailing_zeros) + sum_elements ** 2)) + 1e-6


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log10((sum_elements + 1) / (n + math.sqrt(trailing_zeros)) * math.exp(-len([i for i in vector if i != 0]) / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log10((sum_elements + 1) / (n + math.sqrt(trailing_zeros)) + 1e-6)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - sum(x**2/n for x in vector) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  # Improved version with more accurate priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) + math.log(len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / math.log10(n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n


#score: {'n8_size512.txt': 334}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + math.exp(-sum_elements / n) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 334}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + abs(sum_elements / n - 1) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - np.min([x**2/n for x in vector]) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.mean(list(set(vector))) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # Calculate the percentage of ones and zeros
  ones_percentage = sum_elements / n
  zeros_percentage = (n - leading_ones) / n
  
  return -(sum_elements ** ((ones_percentage + zeros_percentage) / 2) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # calculate the product of prime numbers
  prime_product = math.prod([x for x in set(vector) if x > 1])
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n + 
       (sum(abs(x) for x in filter(lambda x: x == 0, vector)) ** 2) / sum_elements + 
       math.log(prime_product) if prime_product > 1 else 0)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i for i in vector if i == 0]))[2:])
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([2**i if i in vector else 0 for i in range(n)]))[2:]) - (sum_elements > 0)
  return -(sum_elements * (n - trailing_zeros) + sum_elements ** 2) / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) / (n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (math.log10(trailing_zeros) / math.log10(n)) if trailing_zeros > 0 else -sum_elements


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  # New improvements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n 


#score: {'n8_size512.txt': 273}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.exp(-((n - leading_ones) / n)**2 * sum(x**3 for x in filter(None, vector)) / sum_elements**2) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
      sum((n - i) * (vector[i] ** 2) for i in range(min(n, bin(sum(1 for x in vector if x == 1))[2:].count('1')), n)) / sum(vector)**2)


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * (n - trailing_zeros) / n * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * (n - trailing_zeros) / n + math.log(n) / math.log(2) * sum(1 for i in vector if i == 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * (n - trailing_zeros) / n - math.log2(sum([i for i in Counter(vector).values()]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * (n - trailing_zeros) / n - sum(i for i in vector if i > 0) / (n - trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - math.exp(-trailing_zeros / (n ** 0.5))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / (n ** 0.5) + (math.e**(-sum_elements/n)) * (trailing_zeros/(n**2))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - (trailing_zeros / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(vector).lstrip('1'))
  return -(sum_elements + leading_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for v in vector if v == 0)))
  return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (leading_zeros / n) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (leading_zeros / max(1, n - 1)) - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements * (trailing_zeros / (n - 1))) - (len(str(vector).rstrip('0')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.log10(sum_elements + 1) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + trailing_zeros) - math.log2(trailing_zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / math.log(n) * math.exp(-trailing_zeros / math.log(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - math.exp(-len([elem for elem in vector if elem != 0]) / n) * trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements / n) - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - math.exp(-sum_elements) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  # Calculate the average value of the non-zero elements
  avg_non_zero = sum(i for i in vector if i != 0) / (n - trailing_zeros) if n - trailing_zeros > 0 else 0
  
  return -(sum_elements + math.log2(trailing_zeros + 1)) - abs(avg_non_zero)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zero_count = Counter(vector)[0]
  trailing_zeros = zero_count - 1 if zero_count > 0 else 0
  return -sum_elements / (n + trailing_zeros) - math.log2(trailing_zeros + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (math.log2(trailing_zeros + 1) / math.log2(n))) 


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + trailing_zeros) - math.log2(trailing_zeros + 1) - math.exp(-sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').replace('',''))
  unique_elements = len(set(vector))
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) + 
       ((n - leading_zeros) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) + 
       ((n - leading_ones) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum_elements, sum(map(abs, vector))) * min(n - leading_ones, n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) + 
       ((n - leading_ones) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))**0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * math.log2(n)) - (sum_elements + trailing_zeros) / (n * math.sqrt(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -((sum_elements / n) + (trailing_zeros / math.log2(n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / (n * math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros * math.log2(n)) / (n ** 1.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))) - 2
  return -(sum_elements + trailing_zeros * math.log2(n)) / (n ** 1.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros * math.log2(n)) / (n ** 1.5) + abs(sum_elements - n**2) / (n ** 3))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros * math.log2(n)) / (n ** 1.5) - abs(sum_elements - n) / n


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq**2/n - (max_freq-min_freq+1)/n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  return -sum(x/n for x in vector) + sum(x**2/n for x in vector) - min((x**2/n) for x in vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for e in vector if e != 0)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / (n * math.log10(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) / (n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros * math.log2(n)) / (n ** 1.5) - ((-sum_elements) ** 2) / (n * n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / math.log2(n)) ** 2) / (n ** 1.5)


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority based on the number of trailing zeros
  priority_zeros = -trailing_zeros / n
  
  # Calculate the priority based on the frequency of elements
  priority_freq = 0
  for freq in frequency.values():
    if freq == max_freq:
      priority_freq -= (n // max_freq) * math.sqrt(freq)
    elif freq > min_freq and any(frequency[x] > 0 for x in range(min_freq, max_freq+1)):
      priority_freq += 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - priority_fre


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + min(sum_elements, n/2)**2 / (n * math.sqrt(n))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
    + (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)) * math.sqrt(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / (n * math.sqrt(n))) + abs(sum_elements - n/2) * ((n - sum(1 for x in vector if x)) / (n * math.sqrt(n))) + min((x**2)/n for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / (n * math.sqrt(n)) - sum(sorted(vector)[::-1]) / (n * math.sqrt(n)) - sum(x for x in set(vector)) / (n * math.sqrt(n)) - trailing_zeros/(n*math.sqrt(n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
          len(set(vector)) and sum(map(abs, vector))))**1.5


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1)


#score: {'n8_size512.txt': 255}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(map(abs, vector)) ** 2), 
         len([i for i, v in enumerate(vector) if v == 0]) ** (n/len(set(vector)))))


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
      min((sum(map(abs, vector)) ** 2), sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  priority_zeros = -(trailing_zeros / n)
  
  priority_freq = 0
  for freq in frequency.values():
    if freq == max_freq:
      priority_freq -= (n // max_freq) * math.sqrt(freq)
    elif freq > min_freq and any(frequency[x] > 0 for x in range(min_freq, max_freq+1)):
      priority_freq += 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - priority_fre


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority based on the number of trailing zeros
  priority_zeros = -trailing_zeros / n
  
  # Calculate the priority based on the frequency of elements
  priority_freq = 0
  for freq in frequency.values():
    if freq == max_freq:
      priority_freq -= (n // max_freq) * math.sqrt(freq)
    elif freq > min_freq and any(frequency[x] > 0 for x in range(min_freq, max_freq+1)):
      priority_freq += 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  priority_zeros = -trailing_zeros / n

  if max_freq <= min_freq:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros - (n // max_freq) * math.sqrt(max_freq)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements - (trailing_zeros / n) + math.log(len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + math.log10(trailing_zeros+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i for i in vector if i == 0]))[2:]).bit_length()
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([i for i in vector if i == 0]))[2:].count('0')
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i for i in vector if i == 0]))[2:]) - 1
  return -sum_elements * (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / (n ** 0.5) + sum(map(lambda x: x**2, Counter(vector).values()))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - trailing_zeros / (n ** 0.5) - sum([math.log10(i+1) for i in range(len(vector)) if not vector[i]])


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # Use logarithmic scaling to make the difference between priorities more pronounced
  return -sum_elements * math.log10(n + 1) - (trailing_zeros / math.sqrt(n)) * math.log10(len(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) - (trailing_zeros / n ** 0.5) * sum_elements


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector))**(0.5/len(set(vector))) + 
    sum(filter(None, map(abs, vector)))/min(sum(vector), len(vector)) * 
    (n - bin(sum(1 for elem in filter(lambda x: x == 0, vector)))[2:].count('1')) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(vector), len(vector)) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       sum(abs(x) for x in vector)/min(sum(vector), len(vector)) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 275}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for x in vector if x != 0) / min(sum(vector), len(vector)) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 for elem in vector if elem == 0))) - 1
  return -(sum(map(abs, filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    min(n - leading_zeros, n) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * min(sum_elements, sum(map(abs, vector))) / (n * n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_ones) / n * sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 1) * 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       math.exp(math.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))))
      )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) / min(len(set(vector)), n) + 
       math.log(n - sum(1 for elem in vector if elem == 1) / n) * 
       sum(abs(x) for x in vector) / min(sum(map(abs, vector)), sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       math.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))) + 
       sum((x ** 2) for x in filter(None, vector)))


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       math.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))) +
       sum(1 if x > 0 else 0 for x in vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (math.log2(trailing_zeros) / math.log2(n)) - math.log2(len(set(vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (math.log2(trailing_zeros + 1) / math.log2(n))) - sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (math.log2(trailing_zeros + 1) / math.log2(n))) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + math.log2(trailing_zeros + 1) / math.log2(n)) * (trailing_zeros / n) ** 0.5


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) - (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0)))-2
  return -sum_elements - math.exp(-sum_elements) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + (np.std(vector)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n + sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - len(str(sum(vector)).rstrip('0'))/n


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2:
    return math.sqrt(n)
  elif sum_elements > n/2 and sum(1 for x in vector if x) < n//2:
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2:
    return math.sqrt(n)
  elif sum_elements > n/2 and sum(1 for x in vector if x) < n//2:
    return -math.sqrt(n)

  priority_zeros = -trailing_zeros / n

  if max_freq <= min_freq:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros - (n // max_freq) * math.sqrt(max_freq)

  return -(sum_elements / n) + math.sqrt((n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - (n // max_freq) * math.sqrt(max_freq)


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    if all(x == 0 for x in vector):
      return -(n / len(vector)) ** 2
    elif any(x > 0 for x in set(vector)):
      return math.sqrt(len([i for i in range(len(vector)) if vector[i] != 0])) * n / len(vector)
    else:
      return -sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  else:
    max_deviation = max(abs(x-n/2) for x in vector)
    return -(max_deviation/n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(map(abs, filter(None, vector)), 0) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)), 0) / min(sum(abs(x) for x in vector), sum(map(abs, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements - (trailing_zeros / n) + math.log(len(str(sum(1 for elem in vector if elem == 0)))) - math.log(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - math.floor(math.log10(n))
  return -sum_elements - (trailing_zeros / (n * math.log10(n)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  variance = sum((x - sum_elements / n) ** 2 for x in vector) / n
  skewness = (sum(x ** 3 for x in vector) / n) - 3 * (sum(x for x in vector) / n) ** 2 + 2 * (sum(x for x in vector) / n) ** 3
  kurtosis = sum((x - sum_elements / n) ** 4 for x in vector) / n - 3 * (sum((x - sum_elements / n) ** 2 for x in vector) / n) ** 2 + 24 * (sum(x for x in vector) / n) ** 4 - 6 * (sum(x for x in vector) / n) ** 3

  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))
  - skewness / n
  - kurtosis / n


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - math.log(n//max_freq) if n//max_freq > 0 else 0 - (min_freq/(max_freq-min_freq+1e-6)).log() if min_freq < max_freq-1 else 0


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + math.exp(-n / (sum_elements * n))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1))) + math.log(len([x for x in vector if x==max(vector)]))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)

  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(1 for _ in range(n//max_freq) if all(frequency[x] > 0 for x in range(max_freq))) - sum(1 for _ in range(min_freq, max_freq+1) if any(frequency[x] > 0 for x in range(min_freq, max_freq+1)))


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  priority_zeros = -trailing_zeros / n
  
  priority_freq = 0
  for freq in frequency.values():
    if freq == max_freq:
      priority_freq -= (n // max_freq) * math.sqrt(freq)
    elif freq > min_freq and any(frequency[x] > 0 for x in range(min_freq, max_freq+1)):
      priority_freq += 1
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - priority_zeros + priority_freq


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + math.log10(trailing_zeros+1) - math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) + math.log10(trailing_zeros+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + math.log10(trailing_zeros+1) - sum(math.log10(abs(x)+1) for x in vector)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(Counter(str(x) for x in vector).get('0', 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + math.log10(trailing_zeros+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * math.log(n) - (trailing_zeros / n) + math.log(len(str(sum(1 for elem in vector if elem == 0))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements - (trailing_zeros / n) + math.log(len(set(str(sum(1 for elem in vector if elem == 0)))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - (sum(1 for elem in vector) & (sum(1 for elem in vector) - 1)).bit_length()
  return -math.log10(sum_elements + 1) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * math.log2(n)) - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n * math.sqrt(math.e))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * math.log2(n)) - (sum_elements + trailing_zeros) / (n * math.sqrt(n)) + math.exp(-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n + math.sqrt(trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros) * min(sum_elements, trailing_zeros) ** 0.5)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / math.sqrt(n + trailing_zeros)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + math.sqrt(trailing_zeros)) * (math.e ** (-trailing_zeros / (2 * n)))


#score: {'n8_size512.txt': 349}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - (sum_elements % 2)


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n
  - (sum(1 for x in vector if x != max_freq) / (n - max_freq))


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector) * sum_elements / (n * n))


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sin(sum_elements / len(vector)))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2 - abs(sum_elements - len(vector) // 2)


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  # Calculate the entropy of the vector (to capture its distribution)
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0').bit_length()
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(min(x**2/n for x in frequency) + max(-x for x in frequency)) * sum_elements / n - trailing_zeros / n


#score: {'n8_size512.txt': 340}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - sum(x**2 for x in frequency.values()) / (n*max_freq)


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 263}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt(sum_elements) * math.sin(math.pi * trailing_zeros / n)


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log(len(str(bin(int(''.join(map(str,vector)))))), 2) + ((sum_elements > len(vector) // 2) > 0) * (len(vector) ** 2 / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(min(0, sum_elements / n) + max(0, (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n)


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more efficient way to calculate the priority
  sum_of_squares = sum(x**2 for x in vector)
  mean = sum_elements / len(vector)
  variance = sum_of_squares / len(vector) - mean**2
  if variance < 0:
    variance = 0

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n

  # Calculate the number of elements that are greater than or equal to n/3
  above_n_third = sum(1 for x in vector if x >= n/3)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - above_n_third * n / len(vector)


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector) // 2) / (len(vector) // 4))) * (trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n) + 1)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return -(sum_elements - len(vector) // 2) ** 2 - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements <= len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros / n) ** 2) + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 268}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - math.exp(-math.sqrt(sum_elements / len(vector)))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 2 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum_elements / n


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 2 + (trailing_zeros / n) * (1 - sum_elements / n) + entropy


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 3 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n) ** 2 + entropy


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (max(vector) - min(vector)))) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(1 for x in set(vector)) / n


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n
  - (sum(1 for x in vector if x != max_freq) / (n - max_freq))
  + math.exp(-((max_freq - min_freq)**2) / ((max_freq + min_freq) / 10)) * (n - sum(1 for x in vector if x)) / n


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n
  - (sum(1 for x in vector if x != max_freq) / (n - max_freq)) - (min_freq/(n-1))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))
  ) ** 0.75


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector))) + 
     sum(1 if x == 0 else -x for x in vector) / (sum(map(abs, vector)) ** 0.5)
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in set(vector))) + 
       math.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / max(sum(abs(x) for x in vector), sum(vector)) + 
       (len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))) / max(sum_elements, 1))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if not elem) / n * min(n - sum(1 for elem in vector if elem), n))


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem == 1), n) / n * 
      max(sum(map(abs, filter(None, vector))) / sum(abs(x) for x in vector), 1))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 311}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
    sum(c== '0' for c in bin(sum(1 for elem in vector if elem == 1))[2:]))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).lstrip('0').zfill(n)) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - sum(int(b) for b in bin(sum(1 for elem in vector if elem == 1))[2:]))/n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))**0.5 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (1 / math.log(n)) + 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) * math.exp(-leading_ones) * trailing_zeros / min(sum_elements, len(vector)))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(math.exp((sum_elements / n) + (trailing_zeros / n))) + entropy


#score: {'n8_size512.txt': 324}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum_elements/(n*math.log2(n)) + abs(len(vector)-math.sqrt(8*len(vector)*trailing_zeros/3+1))/n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * math.exp(-(trailing_zeros / n))


#score: {'n8_size512.txt': 280}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - ((len(vector) // 4 <= sum_elements <= 3*len(vector) // 4) > 0) * (n-trailing_zeros)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 258}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * min(trailing_zeros, n)


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) / 2) * (2 * (sum_elements > len(vector) // 2)) - ((trailing_zeros / n) ** 3)


#score: {'n8_size512.txt': 328}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - (n - max_freq) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - abs(sum_elements - max(frequency.values())/n)**2


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  mean = sum_elements / len(vector)
  variance = sum(x**2 for x in vector) / len(vector) - mean**2
  if variance < 0:
    variance = 0

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 348}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more efficient way to calculate the priority
  mean = sum_elements / len(vector)
  variance = sum((x-mean)**2 for x in vector) / len(vector)
  
  if variance > 0:
    deviation_from_mean = max(abs(x-mean) for x in vector)
  else:
    deviation_from_mean = max(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - deviation_from_mean / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more efficient way to calculate the priority
  sum_of_squares = sum(x**2 for x in vector)
  mean = sum_elements / len(vector)
  variance = sum_of_squares / len(vector) - mean**2
  if variance < 0:
    variance = 0

  return -(mean + (n - mean) ** 2 / n) + abs(mean - n/2) * (n - mean) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more efficient way to calculate the priority
  mean = sum_elements / len(vector)
  variance = sum((x-mean)**2 for x in vector) / len(vector)
  
  if variance > 0:
    std_dev = math.sqrt(variance)
  else:
    std_dev = 0

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - std_dev


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  mean = sum_elements / len(vector)
  variance = sum((x - mean) ** 2 for x in vector) / len(vector)
  
  priority_score = (mean - n/2) ** 2 / n + variance / n + trailing_zeros / n
  if sum_elements <= n//2:
    return -priority_score
  else:
    return priority_score


#score: {'n8_size512.txt': 360}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n


#score: {'n8_size512.txt': 321}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Use a more efficient way to calculate the priority
  mean = sum_elements / len(vector)
  variance = sum((x - mean) ** 2 for x in vector) / len(vector)
  if variance < 0:
    variance = 0

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - variance


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum(vector), sum(abs(x) for x in vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -sum_elements / n + (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - n // 2) < 1e-6) * (trailing_zeros / n) + math.log2(len(set(vector))) - math.log2(n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * np.exp(-sum_elements/n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n) ** 1.6 * max(sum_elements, 1) - (n - len(set(vector)))/n


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.fabs(sum_elements - len(vector) / 2) > len(vector) / 4) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(0).join(map(str,vector)).rstrip('0'))
  return -(2 * math.log10(sum_elements + 1) + math.log10(len(vector)) + 
       (trailing_zeros / n) ** 2 - ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq


#score: {'n8_size512.txt': 342}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - len(str(sum(vector)).rstrip('0'))/n - (len([x for x in vector if x >= n/3]) * n / len(vector))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + sum([p / len(vector) * math.log2(len(vector) / p) for p in Counter(vector).values() if p > 0])


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**2 for x in vector) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) +
      (sum(1 for elem in vector if elem == 0) / len(vector)) ** 0.5
      )


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, vector.count(1)), n)) * 
      sum(x**2 for x in vector) / min(sum(x**2 for x in vector), sum(map(abs, vector))**2)
  )


#score: {'n8_size512.txt': 313}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(abs(x)**2 for x in vector) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) * 
       max((n - i) / n for i in range(min(n, leading_ones), n)) + 
       (len(vector) - leading_ones) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy + sum([p ** 2 for p in vector]) / (n ** 2)


#score: {'n8_size512.txt': 278}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) - (math.log2(len(vector)) - sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()]))


#score: {'n8_size512.txt': 298}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  if all(x == 0 for x in vector):
    return float('inf')  # infinite priority for all-zero vectors
  
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) - sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) - sum([p * math.log2(p) for p in Counter(vector).values()]) / math.log2(n)


#score: {'n8_size512.txt': 343}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max_freq - min_freq)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # Add new logic to improve the algorithm
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)


#score: {'n8_size512.txt': 261}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - sum_elements/(n/2) + (min_freq**2)/max_freq


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy + math.log2(len(set(vector)))/math.log2(n)


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum_elements/n


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0) - (max_freq > min_freq)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq

  # Add new logic to improve the algorithm
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)

  # New logic to improve the algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0) - (sum(1 for x in vector if x) < n//2) * math.sqrt(n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 - int(x) for x in vector)).lstrip('0').replace('.', '0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(len(str(sum(1 for elem in vector if elem == 0))), n) / n - 
       leading_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(len(str(sum(1 for elem in vector if not bool(elem)))), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       min(trailing_zeros, n) / n)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(c == '0' for c in bin(sum(1 for elem in vector if elem == 0))[2:]) / n)


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (abs(sum_elements / len(vector) - 1))) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log10(trailing_zeros / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (sum_elements / len(vector) - 1)**2) - math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 303}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  return -(math.pow(sum_elements / n, 1.5)) + (abs((sum_elements - n // 2) / n) ** 2) + (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 259}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum_elements / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + 0.5 * (len(set(vector)) / n)


#score: {'n8_size512.txt': 274}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * ((trailing_zeros / n) + entropy)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * (n - trailing_zeros) / n)


#score: {'n8_size512.txt': 319}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * (trailing_zeros / sum_elements) + 
       sum(abs(x) for x in vector) / sum_elements)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n + 
      min(trailing_zeros, n) / n - 
      sum(abs(x) for x in vector) / sum_elements * 
      max(len(str(sum(1 for elem in vector if elem == 0))), 1))


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n + sum(x**2 for x in filter(None, vector)) / sum_elements)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** 0.5 / len(set(vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(abs, filter(None, vector))) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2/(n*n) + len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))/n) - min((x**2/n) for x in vector) - (max(vector) - min(vector)) / n


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) - sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()]) + math.exp(-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)), 1e-6)
      ) ** 2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
       ) ** 2


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(trailing_zeros / n) ** 2 - sum_elements * (1 + math.log(len(vector) / (2 * sum_elements)))
  else:
    return -(trailing_zeros / n) ** 2 - sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (abs(sum_elements - n/2) > 0.5)


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)
  # Add new logic to improve the algorithm
  if sum(1 for x in vector if x) < n//2:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_fre


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > math.ceil(len(vector) / 2):
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2
  else:
    return -(sum_elements + trailing_zeros / n)


#score: {'n8_size512.txt': 279}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * math.sqrt(trailing_zeros / n)


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.sqrt(4 / len(vector) + 1/9) if sum_elements > math.ceil(len(vector) / 2) else 1) - ((trailing_zeros / n)**2) * (1 + (math.e**(-(sum_elements - len(vector)) / 10)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), math.sqrt(sum_elements)) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 3) + sum_elements


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
      len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0')) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - leading_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (len(vector) - leading_zeros) / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      (sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements) + 
      (n - len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0'))) / n)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - sum([p / len(vector) * math.log2(len(vector)) for p in Counter(vector).values()])


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  # Calculate the geometric mean of vector elements
  gm = math.pow(math.prod(vector), 1.0/len(vector))
  
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - ((gm - sum(vector) / len(vector)) ** 2)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq + (max_freq - min_freq)**2 / max_freq


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n*(n-1))) + abs(sum(vector) - n/2) * sum(1 for x in vector if x != 0) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum(1 for x in vector if x) / n) * ((n/2) - abs(sum_elements - n/2))


#score: {'n8_size512.txt': 346}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq + (sum_elements**2)/(n*(n-1)) - ((max(vector) - min(vector))/n)**3


#score: {'n8_size512.txt': 322}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - sum(map(lambda x: (x/sum_elements)**2, vector))


#score: {'n8_size512.txt': 310}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy - ((sum_elements / n) ** 2) + ((len(vector) / n) ** 2)


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  max_value = max(vector)
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) - math.log2(max_value + 1)


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / (n + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) % 2 == 0 and sum_elements > n // 2) or (len(vector) % 2 != 0 and sum_elements > math.ceil(n / 2))) * (trailing_zeros / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / sum_elements)


#score: {'n8_size512.txt': 316}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(counter.values())
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  
  return -(math.sqrt(sum_elements) / math.sqrt(len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       (min(sum(map(abs, counter.values())), sum_elements) / min(sum_elements, sum(counter.values())) if sum_elements > 0 else 1))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')

  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log((n - leading_ones) / n) * 
       min(math.sqrt(sum(map(abs, filter(None, vector)))), sum_elements) / min(sum_elements, 1 if sum_elements == 0 else sum(map(abs, vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.log((n - leading_ones) / n) * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n)


#score: {'n8_size512.txt': 323}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  if len(set(vector)) == 1:
    return 0.5
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq


#score: {'n8_size512.txt': 304}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq + (sum_elements ** 2) / (n * min_freq)


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  # calculate the priority
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n) + entropy + sum(1 for x in vector if x > 0) / n 


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  return -(sum_elements / n) ** 1.5 + (abs(sum_elements - len(vector) // 2) < 1e-6) * ((trailing_zeros / n) ** 2) + entropy


#score: {'n8_size512.txt': 302}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p > 0 else 0 for p in Counter(vector).values()])
  
  # Calculate the deviation from average
  deviation = abs(sum_elements - n / 2)
  
  return -(sum_elements / n) ** 1.5 + (deviation < 1e-6) * (trailing_zeros / n) + entropy


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      math.exp(-leading_ones / n) * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                    sum(map(abs, vector))))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) * math.sqrt(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (max(vector) - min(vector)) / n - sum(1 for x in set(vector)) / len(set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).lstrip('0').replace('b', ''))
  return -(sum_elements**2 / (n * 2.0) + trailing_zeros * math.log(2))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)


#score: {'n8_size512.txt': 262}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 4) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 260}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) ** 3


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  return -sum_elements + leading_ones / n


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in vector if x != 0) / min(sum_elements, sum(map(abs, vector)))
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** 0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n)
      )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) * 
    (n - leading_ones) / n
  )


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max_freq**2)/n - (min_freq**2)/n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + math.exp(-sum_elements**2 / n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(n - sum(1 for i, x in enumerate(vector) if x), n) / n * 
    math.exp(-sum(1 for x in Counter(vector).most_common()[:n//2]) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    np.exp(-leading_ones / n) * sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum(vector)**2, sum(x**2 for x in vector)))


#score: {'n8_size512.txt': 287}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) - math.pow(trailing_zeros / n, 2) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 281}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * math.log2(n)) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + math.log10(trailing_zeros) / math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / len(str(sum_elements)))


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(abs(x) for x in filter(None, vector)) / 
       sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 309}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, vector))) / len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x**2 for x in vector])**0.5 * sum(map(abs, vector)) / (n * len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)


#score: {'n8_size512.txt': 276}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x) ** (0.5/len(set(vector))) for x in vector]) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in Counter(vector).values() if elem == 0)))
  return -(sum_elements * math.log2(n)) - (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * math.log2(n)) - (trailing_zeros / n) + (math.sqrt(trailing_zeros) / math.sqrt(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -(sum_elements * math.log2(n)) - (trailing_zeros / n) + (sum_elements ** 2) / (n * math.sqrt(trailing_zeros))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements * math.log2(n)) - (leading_zeros / n) + (Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1] * math.log2(len(vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(len(str(x).rstrip('0')) for x in filter(lambda x: x != 0, vector)))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.exp(-trailing_zeros / (n**1.5))


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.log((trailing_zeros / n))) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - sum_elements/n


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log(n+1) * ((trailing_zeros > n/2) and (n % 2 == 0)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.sqrt(sum_elements / len(vector))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))
  if sum_elements > len(vector) // 2:
    return max(0, -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2)
  else:
    return min(math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2, 1)


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.sin(sum_elements / len(vector))


#score: {'n8_size512.txt': 286}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - min((sum_elements / len(vector)) ** 3, (trailing_zeros / n) ** 3)


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log((n/trailing_zeros)**trailing_zeros) + ((sum_elements > n/2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros/n)**0.5 + abs(sum_elements/len(vector)-0.5))/2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 296}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements == len(vector) // 2:
    return -math.log(trailing_zeros / n)
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('','0'))
  return -sum_elements + trailing_zeros / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  return -sum_elements + (n - leading_ones) / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in sorted([x for x in vector if x > 0], reverse=True)) / min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for x in filter(lambda x: x == 0, vector)))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in sorted([x for x in vector if x > 0], reverse=True)) / min(sum_elements, sum(map(abs, vector))) + 
       sum(x for x in filter(lambda x: 0.5 <= abs(x) < 1.5 and x > 0, vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in filter(lambda x: x > 0, sorted(vector, reverse=True))) / min(sum_elements, sum(abs(x) for x in vector))
      )


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in sorted([x for x in vector if x > 0], reverse=True)) / min(sum_elements, sum(abs(x) for x in vector))
       ) - sum(x for x in filter(lambda x: x < 0.5 and x > -0.5, vector)) + sum(map(lambda x: (1 if x > 0 else 0), vector)) * n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)
    
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2) - ((abs((n/2)-sum_elements))**2)/n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/n for x in set(vector))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))

  # Calculate the entropy of the vector
  entropy = -sum((elem / sum_elements) * np.log2(elem / sum_elements) 
                 for elem in set(vector)) 

  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, vector)) / min(sum(map(abs, vector)), sum_elements) + 
    entropy
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
      sum(count/c for count,c in Counter(vector).most_common())/n)


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(not i for i in itertools.groupby(str(vector), str.isdigit) if not i[1]))


#score: {'n8_size512.txt': 267}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + math.sin(trailing_zeros / n)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((Counter(vector).most_common()[-1][0] > n // 2) > 0) * math.log((trailing_zeros / n))
  if sum_elements > len(vector) // 2:
    return max(0, -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2)
  else:
    return min(math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2, 1)


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log(n) * (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))
  if sum_elements > len(vector) // 2:
    return max(0, -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log(n) * (trailing_zeros / n))
  else:
    return min(math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + math.log(n) * (trailing_zeros / n), 1)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max(vector) - min(vector)) ** 2 / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - sum(1 for _ in range(n//2)) if sum_elements <= n//2 else sum(1 for _ in range(n//2, n))
  - math.sqrt(trailing_zeros) / math.sqrt(n)
  + abs(sum(vector) - max(vector)) * (n - max(vector)) / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - trailing_zeros/n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - n/2) * max((x**2/n) for x in vector)
  - leading_zeros/n - sum(x for x in set([x for i, x in enumerate(vector) if x != 0]))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * min(frequency.values()) / max(frequency.values())


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum(1 for x in vector if x > n/2) / (n/2)
  + sum(1 for x in vector if x < -n/2) / (-n/2)
  - abs(sum_elements - n/2) * math.sqrt(len([i for i in range(len(vector)) if x != 0]))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + math.sqrt(n) * (leading_zeros/n - sum(x**4/(n*n*n) for x in vector) / n)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x**3/(n*n) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  + sum((x-1)**2/n for x in [x for i,x in enumerate(vector) if i%2==0])


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - (sum_elements / len(vector)) * math.log(len(vector))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.exp(-len(vector) / n) * sum([abs(i-3) for i in vector])


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum((x-0.5)**3 for x in filter(lambda x: x != 0, vector)) / 
      min(sum(map(abs, vector)) ** 2, sum(x**3 for x in filter(lambda x: x != 0, vector))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_zeros) / n))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_ones) / n) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum((p / len(vector)) * math.log2(p / len(vector)) for p in Counter(vector).values())
  return -(math.exp(-sum_elements / len(vector))) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + entropy


#score: {'n8_size512.txt': 289}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + min(sum_elements, len(vector) - sum_elements)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Use the harmonic mean instead of the product
  if len(set(vector)) == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 290}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if unique_elements == 1:
    return float('inf')
  else:
    return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros) / n + (n - trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / math.log2(trailing_zeros + 1) * n


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       math.log(len(vector) - leading_ones, n+1)) ** 1.7


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * (n + len(vector)) / (n * (n + len(vector))))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * (n + len(vector)) / (n * (n + len(vector))))


#score: {'n8_size512.txt': 299}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-0.5, min(sum_elements/len(vector), 0.5))


#score: {'n8_size512.txt': 327}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - max_freq/min_freq - math.sqrt(sum(1 for _ in range(len(vector)) if vector[_] == 0)) * n / len(vector)


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - math.log10(min_freq/min(frequency, key=frequency.get)) - (max(vector) - min(vector)) ** 2 / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))


#score: {'n8_size512.txt': 284}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - min(sum_elements, trailing_zeros)


#score: {'n8_size512.txt': 293}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 0.5) + ((sum_elements > len(vector) // 2) > 0) * math.log(1 + math.pow(trailing_zeros / n, 0.25))


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (1 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 307}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  ) * (1 if sum(x**2 for x in vector) < 10 else 0.5)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - sum(x for x in set(vector)) ** 3 / n


#score: {'n8_size512.txt': 315}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  + leading_zeros/(n * len(str(sum_elements)))
  - max_freq/min_freq - sum(x**2 for x in set(vector)) / (n * len(set(vector)))
  - abs(sum_elements - (n/2)) * math.sqrt((sum(1 for x in vector if x) - n//2)**2 + (max(vector) - min(vector))**2)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  + min((n- i)**2/(2*n) for i in range(len([i for i in range(len(vector)) if vector[i] == 0]))) * math.sqrt(n)


#score: {'n8_size512.txt': 344}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) + sum(x**3 for x in vector) / (n * min(frequency.values())) - (sum(x for x in set(vector))) ** 3 / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)
  - math.sqrt(sum(1 for x in frequency if frequency[x] > 1)) * n / len(set(vector))


#score: {'n8_size512.txt': 320}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2) + (min(x for x in frequency.values()) / sum_elements if min(frequency.values()) else 0)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements + trailing_zeros / (n or 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements + (trailing_zeros or 1) / (n or 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('','0'))
  return -sum_elements + math.log2(trailing_zeros / (n or 1))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - (min(freq for freq, _ in frequency.items())**2/n)


#score: {'n8_size512.txt': 339}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) + (sum(1 for x in vector if x) > n//2 and sum_elements > n/2)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (max(freq for freq, _ in frequency.items())**2/n)


#score: {'n8_size512.txt': 294}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.exp(-math.fabs(sum_elements / len(vector) - 0.5))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (1 + math.sin(math.pi * (trailing_zeros / n))) - math.log(n) if sum_elements > 0 else -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) - ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.exp(-sum_elements / n)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  - math.sqrt((sum_elements - n/2) ** 2 + (n - sum(1 for x in vector if x)) ** 2)
  - (math.sqrt(n) * abs(sum_elements - n/2) * abs(n - sum(1 for x in vector if x))) / len(vector)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - (math.sqrt(n) * math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) / len(vector))
  + leading_zeros/n - max_freq/min_freq - sum(x**2 for x in vector) / (n * min(frequency.values()))
  + abs(sum_elements - n/2) ** 2 / (4 * n)


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (sum_elements / n) ** 0.5


#score: {'n8_size512.txt': 297}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.exp(-sum_elements / (n * math.sqrt(n)))


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - math.exp(-n/(4+len(vector)))


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       max(min(n - leading_ones, n) / n, sum_elements / (n * unique_elements)))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  + sum((x - min(vector)) ** 2 / n for x in set(vector))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (max_freq - 1)


#score: {'n8_size512.txt': 317}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in vector if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) / n * len([i for i in range(len(vector)) if vector[i] == 0])


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  term1 = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  term2 = diff * (n - sum(1 for x in vector if x)) / n
  term3 = min((x**2/n) for x in vector)
  term4 = max(-sum(vector), 0)
  term5 = (max(vector) - min(vector)) / n
  term6 = sum(sorted(vector)[::-1]) / n
  term7 = math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  term8 = -sum(x for x in set(vector)) / n
  term9 = trailing_zeros/n
  term10 = max_freq/min_freq

  return -(term1 + term2) + term3 + term4 + term5 + term6 + term7 + term8 + term9 + term10


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / len(vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)


#score: {'n8_size512.txt': 341}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  diff = abs(sum_elements - n/2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + diff * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq - (diff > 0)
  - ((sum_elements - n/2)**2/(2*n))


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum(x for x in set(vector)) ** 2 / n
  - sum((x**4)/n for x in frequency.elements()) / max(frequency.values())


#score: {'n8_size512.txt': 344}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) ** 2 / n - sum(x**3/n for x in frequency.elements()) / max(frequency.values())
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - trailing_zeros/n
  - sum(x for x in set(vector)) / n
  - max_freq/min_freq


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(vector) ** (0.5 / unique_elements) + 
    min(n - leading_ones, n) / n * 
    sum(abs(x) for x in vector if x != 0) / sum(abs(x) for x in vector)
  )


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
   min(n - leading_ones, n) / n * 
   sum(x for x in filter(lambda x: x != 0, vector)) / sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(x**2 for x in vector) / sum_elements
  )


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(trailing_zeros, 1) - 1


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / n + trailing_zeros * math.log10(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log10(n) + trailing_zeros


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('', '0'))
  return -sum_elements + math.log2(trailing_zeros / (n or 1)) * math.sqrt(sum_elements)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0').replace('', '0'))
  
  def calculate_priority():
    return -sum_elements + math.log2(trailing_zeros / (n or 1))
    
  return calculate_priority()


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) ** 2 / n - abs(sum_elements - n/2) * (sum(1 for x in vector if x) - n//2) - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  + (min_freq/max_freq)**2


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + (max(vector) - min(vector)) ** 4 / (8*n)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  - len([i for i in range(len(vector)) if vector[i] == 0]) / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in frequency.elements()) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0]))*n/len(vector) - sum(x for x in set(vector))/n - trailing_zeros/n - max_freq/min_freq
  - (max(vector) - min(vector)) ** 2 / n
  + abs(sum_elements - (n/2)) * (sum(1 for x in vector if x) - n//2)
  - sum((x**3)/n for x in frequency.elements()) / max(frequency.values())
  + math.sqrt(abs(sum_elements - n/2) * (max_freq - min_freq))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) / (n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (math.log2(trailing_zeros) / n + math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) / n


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq
  - min((x**2/n) for x in frequency.elements()) - (sum(1 for x in frequency.elements() if x > max_freq) / n)


#score: {'n8_size512.txt': 364}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - trailing_zeros/n - max_freq/min_freq


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)**2


#score: {'n8_size512.txt': 326}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (math.log2(trailing_zeros + 1) / math.log2(n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log2(trailing_zeros) * math.e ** (-sum_elements / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (trailing_zeros + 1) * math.log2(n+1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - math.log2(trailing_zeros + 1) / math.log2(n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + trailing_zeros) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(map(lambda x: x[0] * len(x), counter.items()))
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] for x in counter.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.prod((x[1] + 1) ** x[0] for x in counter.items()))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] * len(x) for x in counter.items())
  trailing_zeros = vector.count(0)
  return -sum_elements - trailing_zeros / n


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] for x in Counter(vector).items()) / (n * math.prod((x[1] + 1) ** x[0] for x in Counter(vector).items()))


#score: {'n8_size512.txt': 257}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] for x in counter.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.prod((x[1] + 1) ** x[0] for x in counter.items()) * math.log2(n))


#score: {'n8_size512.txt': 283}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + math.sqrt(sum_elements / n) - sum_elements / n


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 2) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] for x in counter.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * math.log10(trailing_zeros + 1) / n


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x[0] for x in Counter(vector).items()) / (n * math.gcd(*[x[0] for x in Counter(vector).items()]) ** sum([x[1] for x in Counter(vector).items()]))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  return -sum(x[0] * math.log2(x[1]+1) for x in counter.items()) / math.log2(n + 1)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((x[0] / (x[1] + 1)) ** x[1] for x in Counter(vector).items())


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] for x in counter.items())
  trailing_zeros = len([i for i in vector if i == 0])
  
  return -sum_elements / (n * math.prod((x[1] + 1) ** x[0] for x in counter.items()) * math.log2(n)) - trailing_zeros / n


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / math.pow(n, math.log2(n)) ** (math.log2(sum(1 for x in count.values())) + math.log2(len(str(trailing_zeros))))


#score: {'n8_size512.txt': 271}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in counter.items())
  trailing_zeros = len([i for i in vector if i == 0])
  
  return -sum_elements / (n * math.prod((x[1] + 1) ** x[0] for x in counter.items()) * math.log2(n)) * (trailing_zeros / n)


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x for x in count.values())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.log2(n)) + (math.log2(len(str(trailing_zeros))) - math.log2(sum(1 for x in count.values())))


#score: {'n8_size512.txt': 305}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x[0] * x[1] for x in count.items())
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.log2(sum(1 for x in count.values()) + 1)) ** (math.log2(sum(1 for x in count.values())) + math.log2(len(str(trailing_zeros))))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * math.log2(sum(1 for _ in vector) + 1)) ** (math.log2(trailing_zeros + 1))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  sum_elements = sum(x for x in count.values())
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements / n) - (trailing_zeros / math.log2(n))


#score: {'n8_size512.txt': 292}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3.5) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 288}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt((trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n))


#score: {'n8_size512.txt': 256}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (sum(vector) ** 0.5 * len(set(vector)) + 
           sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(vector))) ** 7


#score: {'n8_size512.txt': 306}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.pow(sum(map(abs, vector)), 0.5 / len(set(vector))) * (1 + math.exp(-math.pow(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 2) / (n ** 2)))


#score: {'n8_size512.txt': 285}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) - math.sin(sum_elements / len(vector)) * math.cos(trailing_zeros / n)


#score: {'n8_size512.txt': 291}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros) * math.exp((sum_elements / n) ** 0.5)) / n) ** 2


#score: {'n8_size512.txt': 300}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (sum_elements / n) ** 0.5
  - sum(Counter(vector).values()) * math.log(len(vector))


#score: {'n8_size512.txt': 295}
program:
def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((trailing_zeros / n)) + (math.sqrt(sum_elements / n) if sum_elements < n else math.sqrt(1))


