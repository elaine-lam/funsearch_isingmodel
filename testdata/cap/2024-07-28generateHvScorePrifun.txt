#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') + sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + (sum_elements > len(vector) // 2) * (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(0 if x else 1 for x in vector) / n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - ((bin(int(''.join(map(str,vector))))).count('0') + sum(1 for x in vector if x == 0)) / n + sum(vector) / n




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - bin(int(''.join(map(str,vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(i for i,x in enumerate(vector) if not x) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - ((bin(int(''.join(map(str,vector))))).count('0') + sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 2




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time: 00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < sum_elements / 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - bin(int(''.join(map(str,vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') + sum(1 for x in vector if 0 < x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(0 if x else 1 for x in vector) / n




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time: 00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, (n - trailing_zeros))




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time: 00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 if bit == '0' else 0 for bit in bin(int(''.join(map(str, vector))))[2:]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(0 if x != 0 else 1 for x in reversed(vector)) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - ((bin(int(''.join(map(str,vector))))[2:]).count('0') + sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - ((bin(int(''.join(map(str,vector))))[2:]).count('0') + sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time: 00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, 5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(0 if x > 0 else 1 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(0 if x else 1 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  return -sum_elements * (n - leading_zeros) / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(vector) - sum_elements
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x == 0)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - sum(1 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) * len(vector)) - (len(vector) - sum(1 if x == 0 else 0 for x in vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / (n + min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0]))).bit_length()
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -sum_elements - (len(str(n)) - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / n - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements + len(str(sum(1 for i in vector if i == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x == 0)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i != 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / n - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements / (n * (len(vector) - trailing_zeros)) + len(vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + trailing_zeros) - 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - sum(1 if x == 0 else 0 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(0 if x > 0 else 1 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) + len(str(sum(1 for i in vector if i == 0))) / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - sum(1 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -sum_elements - (trailing_zeros / n) - sum(1 for i in range(trailing_zeros) if bin(n)[2:].zfill(len(bin(n)))[i] == '0')




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([x for x in vector if x == 0])))
  return -sum_elements - (trailing_zeros / len(str(n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x == 0)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len(str(vector).rstrip('0').lstrip('0')) // 8 if any(vector) else 0) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([2**i if x == 0 else 0 for i, x in enumerate(reversed(vector))]))[2:])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x == 0)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x > 0)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * len(vector)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) * len([x for x in vector if x > 0])) / (n * sum(1 for _ in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + sum(0 if x > 0 else 1 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len([x for x in vector if x == 0 and not vector[vector.index(x) - 1:][::-1].count(0)])
  return -(sum_elements + (len(vector) - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) / (n * len(vector)) - sum(1 if x == 0 else 0 for x in vector) / (len(vector) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) / (n * len(vector)) - sum(1 if x == 0 else 0 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 if x == 0 else 0 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 if x == 0 else 0 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([2**i for i in range(len(vector)) if vector[i] == 0])).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([1 for x in vector if x == 0])).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n + len([x for x in vector if x == 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + (len(str(n)) - len(str(len([x for x in vector if x == 0]))))




#score: {'n8_size512.txt': 255}
#island_id: 1
#version_generated: 2
#generate time: 01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len([x for x in vector if x == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([x for x in vector if x == 0])).zfill(len(str(n)))
  return -sum_elements - len(trailing_zeros) / len(str(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - sum(1 for x in vector)) / (n * len(vector)) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - sum(1 for x in vector)) / (n * len(vector)) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  return -sum_elements * (n + 1) / (n ** 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  return -sum_elements - (trailing_zeros / (n + sum(1 for x in vector if x > 0)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 for x in vector if x == 0])).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum([1 for x in vector if x == 0])))
  
  return -sum_elements / n - trailing_zeros / (n * len(str(n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(1 for x in vector if x == 0)) / (n * len(vector))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + bin(sum([x for x in vector if x == 0])).count('0')) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len(str(sum_elements)) + len([True for x in vector if x == 0])) / n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * len(set(vector)))




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = (vector[0] == 0) and len([x for x in vector[1:] if x == 0]) or len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + 0.5 * trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) > 0) * sum_elements




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i == 0 else 1 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:]) - bin(sum(vector)).count('1')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x != 0 else 0 for x in vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -(sum_elements + trailing_zeros) / (n * (max(vector) + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum_elements ** 2) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, (n / sum_elements) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0)
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:]) - bin(sum(1 for x in vector)).index('1')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements - (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x != 0 else 0 for x in vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x != 0 else 0 for x in vector)
  trailing_zeros = len(str(''.join(map(str, vector))).zfill(n).rstrip('0').lstrip('0') or '0')
  return -(sum_elements + int(trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(int(0)).join(map(str, filter(lambda x: x == 0, vector))).zfill(n))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements / n - (trailing_zeros / n) + (sum_elements > n/2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -sum_elements / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))  # convert to string and count zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (vector.count(0) or 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  trailing_zeros_count = 0
  for elem in vector:
    if elem == 0:
      trailing_zeros_count += 1
    else:
      break
  return -sum(vector) - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  for i in range(len(vector)-1, -1, -1):
    if vector[i] == 0:
      product *= 10
    else:
      break
  return -(sum(vector) * product) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i != 0]) - len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  trailing_zeros_count = 0
  sum_elements = 0
  for elem in vector:
    if elem == 0:
      trailing_zeros_count += 1
    else:
      sum_elements += elem
      if product != 0:
        product *= -1
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) - trailing_zeros / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros) if sum_elements != 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i != 0)).lstrip('0'))
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements - n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in (1 if i else 0 for i in vector))
  trailing_zeros = len(str(sum(1 for i in vector if not i)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (n - leading_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(str(sum(1 for i in vector)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0').lstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in (1 if i else 0 for i in vector))
  leading_ones = len(str(sum(1 for i in vector)))
  return -(sum_elements - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in (1 if i else 0 for i in vector))
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([i for i in str(sum(1 for elem in vector if elem == 0)) if i == '0'])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(map(int, vector)))) - len(str(sum(map(int, filter(lambda x: x != 0, vector))))) if sum(map(int, vector)) else 0
  return -(sum(map(int, vector)) * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))
  return -(sum(vector) * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i == 1)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements / (n + sum_elements) + trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for e in vector if e == 0))[:-2])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in str(sum(1 for i in vector if i == 0)) if i == '0'])
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(x for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + int(trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros_count + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements * (n - trailing_zeros_count) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for elem in vector if elem == 0)).lstrip('0').count('0')
  return -sum_elements - (trailing_zeros_count + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros_count + 1) / n - sum_elements / (n ** (1.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros_count + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros_count + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -sum_elements - (trailing_zeros_count + 1) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))
  return -(sum(vector) * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements * (10 ** leading_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if sum_elements != 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_ones = bin(sum_vector).count('1')
  return -(sum_vector * (10 ** (len(bin(sum_vector)[2:]) - leading_ones))) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n if sum_vector != 0 else float('inf')




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  return -(sum_elements + (n - len(str(sum(1 for i in vector if i == 0))))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + len(str(sum(1 for i in vector if not i))) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + (n - len(str(sum(x for x in vector))))) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (10 ** bin(sum(vector))[2:].count('0'))) / n if sum(vector) != 0 else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (10 ** len(str(sum(vector)).rstrip('0'))) if sum(vector) != 0 else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / n - len(str(sum(1 for x in vector if x == 0)).rstrip('0')) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_ones = len(bin(sum_vector)[2:]) - bin(sum_vector).count('1')
  return -(sum_vector * (10 ** leading_ones)) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n + trailing_zeros




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum_vector)[2:]) - bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in (1 if i else 0 for i in vector))
  return -sum_elements / n + len([i for i in vector if not i]) / n




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector * (10 ** trailing_zeros)) / n




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = bin(sum_vector).count('0')
  return -(sum_vector ** (trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(str(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + trailing_zeros - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0').replace('1', '0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(str(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + trailing_zeros - leading_ones) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(str(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements - leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements - leading_ones) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 2
#generate time: 03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([int(x) for x in str(sum_elements)])) / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = bin(sum(1 for i in vector)).count('1')
  trailing_zeros = len(bin(sum(1 for i in vector if not i))[2:])
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements - (n - leading_ones) + trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements * (n - leading_ones) + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, 1) - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements * (n - leading_ones) + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements + len(str(bin(sum(1 for i in vector)).lstrip('0'))) - (str(bin(sum(1 for i in vector if not i))[2:])).count('0')) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements - (leading_ones + trailing_zeros)) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  leading_ones = bin(sum_elements).count('1')
  trailing_zeros = len(bin(sum_elements)[2:]) - leading_ones
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector)).count('0') - len(bin(sum(1 for i in vector)))) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, 1) - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, 1) - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_zeros = len(str(bin(sum(1 for i in vector)).lstrip('0').replace('1', '')))
  trailing_zeros = str(bin(sum(1 for i in vector if not i))[2:]).count('0')
  return -(sum_elements + leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, n) - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -sum_elements - bin(sum(1 for i in vector)).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time: 04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, n) - trailing_zeros - (n - len(set(vector)))) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = bin(sum(1 for i in vector)).index('1')
  trailing_zeros = len(bin(sum(1 for i in vector if not i))[2:]) - len(str(bin(sum(1 for i in vector if not i))[2:]).rstrip('0'))
  return -(sum_elements + min(leading_ones, n) - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, n) - 0.5 * trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, n) - trailing_zeros)**2 / (n**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum_elements).count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum_elements).count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements + leading_ones / n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = len(vector)
  leading_ones = 0
  for i in vector:
    if i:
      break
    leading_ones += 1
  trailing_zeros = len(str(sum(1 for i in vector if not i))) - len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + min(leading_ones, 1) - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(bin(sum(1 for i in vector)))[2:].rstrip('0')) - bin(sum(i for i in vector if not i))[2:].count('0')) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + (n - min(leading_ones, n)) * 0.5 - 0.5 * trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = bin(sum(1 for i in vector)).index('1')
  trailing_zeros = len(str(bin(sum(1 for i in vector if not i))[2:])) - len(str(bin(sum(1 for i in vector if not i))[2:]).rstrip('0'))
  return -(sum_elements + min(leading_ones, n) - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements + len(str(bin(sum(1 for i in vector if not i))[2:]).lstrip('0')) - (n - bin(sum(1 for i in vector)).count('1'))) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = bin(sum(1 for i in vector)).index('1')
  trailing_zeros = len(bin(sum(1 for i in vector if not i))[2:]) - len(str(bin(sum(1 for i in vector if not i))[2:]).rstrip('0'))
  return -(sum_elements + min(leading_ones, n) - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -sum_elements / n - (leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + 0.5 * (leading_ones - 1) + trailing_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements - (len(str(bin(sum(1 for i in vector)).lstrip('0')).replace('0', '')) + len(str(bin(sum(1 for i in vector if not i))[2:]).replace('0', '')))) / n




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements + (n - len(set(vector)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0'))
  trailing_zeros = bin(sum_elements)[2:].count('0')
  return -(sum_elements + leading_ones - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements * (leading_ones / n) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector) / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + (n - min(leading_ones, n)) * 0.5 - 0.5 * trailing_zeros - sum(1 for i in range(n) if i >= len(vector) and i < len(bin(sum(1 for j in vector if not j)))[2:].count('0'))) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + (n - leading_ones) * 0.5 - 0.5 * trailing_zeros) / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n ** 0.5)) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1)**(sum_elements % 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + leading_ones - 0.5*trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements + len(bin(sum(1 for i in vector))[2:].lstrip('0')) - bin(sum(1 for i in vector if not i))[2:].count('0')) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = bin(sum(1 for i in vector)).index('1') if '1' in bin(sum(1 for i in vector)) else n
  trailing_zeros = len(bin(sum(1 for i in vector if not i))[2:]) - len(str(bin(sum(1 for i in vector if not i))[2:]).rstrip('0'))
  return -(sum_elements + min(leading_ones, n) - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + bin(sum(vector)).count('0') - len(str(sum(vector)))) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  return -(sum_elements + len(bin(sum(1 for i in vector))[2:].lstrip('0')) - bin(sum(1 for i in vector if not i))[2:].count('0')) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (-1)**(sum_elements % 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, ((len(vector) // 2) - sum_elements) / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1)**(sum_elements % 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) % 3) / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1)**(sum_elements % 2) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements + 0.5*(n-leading_ones) - 0.25*trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements * (n - leading_ones) + 0.5*trailing_zeros) / n**2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector)
  leading_ones = len(bin(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = bin(sum(1 for i in vector if not i))[2:].count('0')
  return -(sum_elements - 0.5*(n-leading_ones) + 0.25*trailing_zeros)**2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(bin(int(''.join(map(str,vector)))).replace("0b",""))[:-1])
  return -(sum_elements + leading_ones/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / (n - trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * len(vector) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  return -sum_elements * (trailing_zeros + 1) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in reversed(vector) if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0))) - 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in reversed(vector) if x == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in reversed(vector) if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in reversed(vector) if x == 0))[2:]) - bin(sum(1 for x in reversed(vector) if x == 0))[2:].count('0')
  return -(sum_elements / n) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n + 1) / (2 * n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n) + min(len(vector), 10) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  return -sum_elements / (n - len(str(sum(1 for elem in vector if elem == 0))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) + sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements / (n - leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(int, filter(bool, vector)))
  leading_zeros = len(str(sum(map(int, filter(bool, vector)))).lstrip('0') or '0')
  return -sum_elements / (n - len(str(leading_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements / (n - leading_zeros) + (leading_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros else 0




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0') or '0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + (trailing_zeros_count / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  return -sum_elements / min(n, len(str(sum(1 for elem in vector if not elem)))) + (len(str(sum(1 for elem in vector if not elem)))/min(n, len(str(sum(1 for elem in vector if not elem)))))**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) + len(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(list(filter(lambda x: x == 0, vector)))])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(1, sum_elements) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len([i for i in reversed(vector) if i == 0])) / max(1, sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(1, sum_elements) * (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements * (n + 1) / (2 * n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (n - len([i for i in vector if i != 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(1, sum_elements) * (trailing_zeros / n) ** (n / sum_elements)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(1, sum_elements) * (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time: 05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** (n / max(1, sum_elements)) * min(1, trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = 0
  trailing_zeros = 0
  for elem in vector:
    if elem == 0:
      trailing_zeros += 1
    elif elem != 0:
      sum_elements += 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n + 1) - (trailing_zeros / (2 * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0') or '0')
  return -sum_elements * (n + 1) / (2 * n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / max(1, sum(vector)) ** (n / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) + len(str(sum(1 for elem in vector if not elem)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  return -(sum_elements + (n - len(str(sum(1 for elem in vector if elem == 0))))) / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time: 05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 0.5 * (trailing_zeros / n) ** n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -sum_elements + (n - sum(1 for elem in vector if elem != 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (n - len([i for i in vector if i != 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (n - len(set([i for i in vector if i != 0])))/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector)))).replace("0b","")))-len(bin(int(''.join(map(str,vector))))[2:].lstrip('0'))
  return -(sum_elements + leading_zeros/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector)))).replace("0b",""))[:-1])
  return -(sum_elements + leading_zeros/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector)))).replace("0b",""))[:-1])
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector)))).replace("0b",""))[:-1])
  return -(sum_elements + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** (2 * len(vector) / n) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((sum_elements == len(vector) // 2) and trailing_zeros > 0) * (len(vector) // 4)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros // (n + 1)) ** 2 if n > 0 else 0)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + trailing_zeros / n) + (sum_elements / len(vector)) ** 4




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) ** 0.5) / n




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(x-1) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 - sum_elements) ** 2 + (trailing_zeros / n)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2)) ** 2 * (trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time: 06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1.5 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2 + (trailing_zeros / n) ** 4) ** 0.25




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time: 06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1.5 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2 + (trailing_zeros / n) ** 4) ** 0.25
  # Additional improvements:
  # 1. If the vector has only zeros, set its priority to a large value
  if sum_elements == 0 and trailing_zeros == n:
    return float('inf')




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time: 06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1.5 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2 + (trailing_zeros / n) ** 4) ** 0.25
  # Improved part starts from here
  if trailing_zeros > 0 and sum_elements < n/2:
    return math.exp(-(sum_elements**2 + trailing_zeros**2))
  elif sum_elements >= n/2:
    return -math.sqrt(sum_elements)
  else:
    return -(trailing_zeros/n) ** 4




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time: 06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements == 0 and trailing_zeros == n:
    return float('inf')

  if all(i == 0 for i in vector):
    return -1

  return -sum_elements * (1 - abs(1.5 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2 + (trailing_zeros / n) ** 4) ** 0.25




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-9) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), (len(vector) // 2 - sum_elements) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(abs(sum(vector)))[::-1].lstrip('0')) - 1
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + leading_ones) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time: 06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements/len(vector) - 0.5) < 0.01) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time: 06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector using a more efficient method
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements / n) + (leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) - (sum_elements > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n / trailing_zeros) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector using a more efficient method
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(bin(sum(1 for i in vector if i == 1)))[2:])
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements + (trailing_zeros / n) - leading_ones




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector using a more efficient method
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).replace('1', '')) 
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(map(int,vector),[i if i == 0 else 1 for i in range(n)])) - sum(1 for _ in vector) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > 0 and len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[:-2].lstrip('0'))
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / n) - sum(i for i in vector if i > 0) / sum(1 for _ in range(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = vector.count(0)
  return -sum(vector) + zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements + len(str(sum(1 for i in vector if i == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) / len(set(vector))) + 
       (len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0')))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) + len([x for x in vector if not x]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) + len(str(sum(1 for i in vector if i == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = 0
  trailing_zeros = 0
  for i in vector:
    if i != 0:
      sum_elements += 1
    else:
      trailing_zeros += 1
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i != 0])**2 - len([i for i in vector if i == 0])**2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + trailing_zeros / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n + 1) / (2*n) - trailing_zeros / (n+1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:].lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time: 07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements <= 3*len(vector)//4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1)*x for i,x in enumerate(reversed(vector))) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(bin(sum(1 for i in vector if i == 0)))[2:])) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements + (trailing_zeros / n) - len(str(bin(sum(1 for i in vector if i == 1)))[2:])




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0').lstrip('')) or 0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) - (sum_elements > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) + len([i for i in vector if not i]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) / n - sum(1 for _ in reversed(vector) if _)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0))) - 1
  return -(sum_elements + trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements * (n / (len(vector) + 1)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (n - leading_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / len(vector) + (trailing_zeros/n)**2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) ** 0.5) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(sum(1 for x in vector if x == 0)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / n - leading_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + bin(sum(1 for x in vector if x == 0)).count('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) + vector.count(0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -(sum_elements / n) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n * max(1, len(str(trailing_zeros))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x))[:-1].replace('0', ''))
  return -sum_elements * (n - leading_zeros) / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time: 08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + abs(sum_elements - len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 1
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-5))) * (-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + leading_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros_count / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements * (n / (n + trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not bool(elem))))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not elem)))
  return -(sum_elements / (n + 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not bool(elem))).lstrip('0'))
  return -(sum_elements * (n + 1)) - (trailing_zeros or 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not elem)))
  return -(sum_elements / (n + 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) / (n + 1)) - (len([i for i in reversed(list(vector)) if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not elem))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros_count / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + sum(1 for i in range(len(vector)-1) if vector[i] < vector[i+1]) * min((len(vector) // 2 - sum(vector)) / len(vector), bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time: 08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + max(len(vector), n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements / len(vector) - 0.5) + abs(trailing_zeros / n - 0.5))) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)).lstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if not elem)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements * (n - trailing_zeros)) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((x**2) for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * min(sum(vector) / len(vector), bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, (sum_elements - 1) / (len(vector) - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0))) - 1
  return -sum_elements - trailing_zeros / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n if trailing_zeros else float('inf'))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 2
#generate time: 09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n * (n + 1)) - trailing_zeros / n




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = sum(1 for x in vector if x == 0)
  return -sum_elements - zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 3




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements * (trailing_zeros + 1) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n if sum_elements < 100 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1)))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements / (n ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements * (leading_zeros + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros + 1)) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements / n) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([i for i in reversed(list(map(str, vector))) if i == '0'])
  return -(sum_elements + (trailing_zeros + 1)) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros + 1)) / (n ** 2) * min(sum_elements, n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - vector.count(0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros_count / n)) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (1 + abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros/n)**2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2) - (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) + (1 if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len([x for x in vector for x in str(vector).zfill(n) if x == '0']) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = str(vector).count('0')
  return -sum(vector) - (trailing_zeros + len(str(vector)) - len(str(vector).rstrip('0').lstrip('0'))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').rstrip('0'))
  return -sum(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (n - leading_zeros - trailing_zeros)) / n**2




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time: 09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-10, -min(sum_elements, trailing_zeros) / 100)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 0.5) / n) + ((sum_elements > len(vector) // 2) > 0) * ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = str(vector).count('0')
  return -sum(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).lstrip('0'))
  return -sum(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros_count = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros_count / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -(sum_elements + (trailing_zeros_count / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) 
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  non_zero_count = len([i for i in vector if i != 0])
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum(vector) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  return -sum_elements + (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n * 2))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros + sum_elements) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -1 * (trailing_zeros / n) ** 2
  else:
    return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for bit in vector if bit == 1)
  return -sum_elements + len(str(sum(1 for elem in vector if elem == 1))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n + min(len(str(x)) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - sum(1 for _ in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x != 0) + sum([x==0 for x in reversed(vector)]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) + len([x for x in reversed(vector) if not x]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).rstrip('0').replace('0', ''))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).rstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[-2:])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + (vector.count(0) or 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector), len([x for x in reversed(vector) if not x]))[1] / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in reversed(vector) if not x]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in reversed(vector) if not x]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in reversed(vector) if x == 0]) or 1.0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - sum(1 for _ in reversed(vector) if _) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  return -(sum_elements + len(str(sum(1 for elem in vector if not elem)))) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n) * (n - sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -(sum(x for x in vector) - trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / n - (trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = len([i for i in vector if i == 0])
  return -sum_elements + zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) if any(x for x in vector) else 1) - (len(str(bin(int(''.join(map(str,map(int,vector)))) & int('1'*n))[2:])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  count_zeroes = vector.count(0)
  return -sum_elements + (n - count_zeroes) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = sum(1 for elem in vector if elem == 0)
  return -sum_elements - (trailing_zeros_count / n) if sum_elements != 0 else -trailing_zeros_count




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) + sum(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + sum(1 for _ in reversed(vector)) if any(vector) else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * len(set(vector)) + (n - sum(1 for elem in vector if elem == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in reversed(vector) if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(i == 0 for i in vector[:-1]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for _ in reversed(vector) if _ == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in reversed(vector) if x == 0]) / (n + sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - (len([x for x in reversed(vector) if x == 0]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n + sum_elements**2/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1))))
  return -sum_elements - leading_zeros / n if leading_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))) - 1
  trailing_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1))))
  return -sum_elements - leading_zeros / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))[:-1].count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0) - sum(1 for x in str(sum(vector)) if x == '0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0) - sum_elements % (10**len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))) % 10)
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n + 1) if sum_elements > 0 else -(trailing_zeros / n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n * max(sum_elements, 1)) - (trailing_zeros / n) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in vector[::-1] if x == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))) - len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1))).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = str(sum([int(i) for i in str(0)] * (vector.count(0) - 1)))[:-1].count('0')
  return -(sum_elements + zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in vector[::-1] if x == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0)) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) + len([x for x in reversed(vector) if x == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(i for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).count('0')
  return -(sum_elements * (n - trailing_zeros)) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in str(vector).replace('(', '').replace(')', '').replace(',', '') if i == '0'])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([int(i) for i in str(0)] * (vector.count(0)))).lstrip('0'))
  return -sum_elements - (len(str(sum([int(i) for i in str(0)] * (vector.count(0))))) - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([int(i) for i in str(0)] * (n - vector.count(1))))) - 1
  trailing_zeros = len(str(0) * (vector.count(0) - 1)) - 1
  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(''.join(map(str, vector))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(vector).rstrip('0').replace('(', '').replace(')', '').replace(',', ''))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(vector))) - len(str(sum(vector)).lstrip('0').replace('0', '')) if sum_elements != 0 else 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / sum(1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([x for x in reversed(vector) if x == 0]) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in reversed(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros = str(sum([int(i) for i in str(0)] * (vector.count(0) - 1))).count('0')
  return -(sum_elements + zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - vector.count(0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  zeros_count = 0
  for i in vector:
    if i == 0:
      zeros_count += 1
    else:
      product *= i
  return -product * len(vector) + zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  non_zero_sum = sum(1 for x in vector if x != 0)
  return -non_zero_sum - len(str(bin(int(''.join(map(str, vector)))).zfill(n).count('0'))[2:]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  if sum_elements == 0:
    return float('-inf')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0').replace('0', ''))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) if sum(vector) != 0 else 1) - (len(str(sum(vector)).lstrip('0')) if sum(vector) != 0 else 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for i in vector if i == 0)
  non_zero_sum = sum(i for i in vector if i != 0)
  return -non_zero_sum - (zero_count / n) if non_zero_sum > 0 else -zero_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(i for i in vector if i == 0)))
  sum_elements = sum(1 for i in vector if i != 0)
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(i for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n) if sum_elements > 0 else -(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  non_zero_count = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(i for i in vector if i == 0)))
  return -non_zero_count - (trailing_zeros / n) if non_zero_count > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = str(sum_elements).count('0')
  trailing_zeros = len(str(sum_elements)) - zeros_count
  return -sum_elements - (trailing_zeros + zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements * 10) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(leading_ones + len(str(sum_elements))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -sum_elements - leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0')) if str(sum_elements).startswith('0') else 0
  return -sum_elements - leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(str(bin(int(''.join(map(str, vector)))).count('0'))[2:]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / n




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  elif sum_elements < len(vector) // 2:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - len([x for x in vector if not x]) / n ** 0.5




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time: 12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(vector,range(1,len(vector)+1))) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(0, 1 - sum_elements / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - ((trailing_zeros / n) ** 2) + abs(sum_elements - len(vector) // 2) / (n * len(vector))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - len(vector))) / n) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) - sum_elements**2/trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len(str(sum(1 for x in vector if x == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len(bin(sum(1 for x in vector if not x))[2:]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len(str(sum(1 for x in vector if x == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len(str(bin(int(''.join(map(str,map(int,vector))))).count('0'))) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) + sum_elements ** 2 / (n * (n-1))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector))) - (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0])) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros_count = len(str(''.join(map(str, filter(lambda x: x == 0, vector)))))
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(''.join(map(str, vector))).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len(''.join(map(str,filter(lambda x: x==0,vector)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) if any(vector) else 0) - len(str(0).join(map(str, filter(lambda x: x==0, vector)))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len(str(sum(1 for x in vector if not x))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) - sum(map(abs, vector))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > n // 2) > 0) * ((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(''.join(map(str, vector))).lstrip('0').rjust(n, '0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(''.join(map(str, vector))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(''.join(map(str, vector))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -(trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros).bit_length()) / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector))) - (max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for bit in vector if not bit)
  trailing_zeros = len([bit for bit in reversed(vector) if not bit])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  return -sum_elements / n - len([i for i in reversed(vector) if not i])




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 2
#generate time: 13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements ** 2 / (len(vector) * (n + sum_elements)) - ((trailing_zeros > 0) and ((sum_elements > len(vector) // 2) > 0))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time: 13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  return -(sum_elements + len(str(bin(int(''.join(map(str, vector)))))) - bin(int(''.join(map(str, vector)))).count('0')) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - bin(int(''.join(map(str, vector)))).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  ones_count = sum(1 for i in vector if i)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -ones_count - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in str(vector) if i == '0'])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (n - leading_zeros) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - len(str(bin(int(''.join(map(str, vector))))).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0').rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -sum_elements - (trailing_zeros / n if n else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(map(int, vector)))) - len(str(sum(map(int, vector))).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(map(lambda x: int('0' + str(x)), vector))).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 2
#generate time: 14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([(-1 if x else 2) for x in vector]) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 2
#generate time: 14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[2:]) - bin(int(''.join(map(str,vector))) & int('1' * len(vector))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / n - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time: 14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 2
#generate time: 14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', ''))
  return -sum_elements - (n - leading_ones) / n




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time: 14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros / n) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time: 14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -trailing_zeros / n - (len(vector) - sum_elements) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / n - (abs(sum_elements - len(vector) / 2)) ** 1.5




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time: 14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -trailing_zeros / n - abs(sum_elements - len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('0', ''))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', '')) - len(str(bin(int(''.join(map(str,vector))))).lstrip('0b'))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  bin_vector = bin(int(''.join(map(str,vector)))).lstrip('0b')
  return -sum_elements - len(bin_vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 2 + len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', ''))) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / n - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) ** 2




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -trailing_zeros / n - ((len(vector) - sum_elements) * (len(vector) - sum_elements)) / n




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))[:-2]) - 1
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -trailing_zeros / n - abs(sum_elements - len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(int(''.join(map(str,vector))))) - len(str(int(''.join(map(str,vector)))).lstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('0', '')) 
  return -sum_elements - (n - leading_zeros) / n




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n - (sum_elements - len(vector)) ** 3
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - (len(vector) - sum_elements) ** 2




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time: 14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n + sum_elements**2/n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(2 * bin(int(''.join(map(str,vector)))).count('0') + abs(sum(vector) - n)) / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time: 14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / n - min(trailing_zeros, abs(sum_elements - len(vector))) * (abs(1 - sum_elements/len(vector)))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """Further improved version of `priority_v1`."""
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector)) + (max(vector) - min(vector)) ** 2 / (n ** 2)




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time: 14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / n - min(trailing_zeros + abs(sum_elements - len(vector)), (len(vector) // 2 - sum_elements) ** 2)




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time: 14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', ''))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([i for i in reversed(bin(int(''.join(map(str,vector))))[2:]) if i == '0']) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', '')) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('0', ''))
  return -sum_elements - (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').replace('1', ''))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time: 15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector)) ** 2
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  binary_str = ''.join(map(str,vector))
  return -sum_elements + (binary_str.count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(len(vector) - bin(int(''.join(map(str,vector)))).count('1') + len(vector) // 2) / n - (bin(int(''.join(map(str,vector)))).count('0')) / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(trailing_zeros + (abs(sum_elements - len(vector)) if sum_elements > len(vector) // 2 else abs(sum_elements))) / n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(sum_elements - len(vector)) ** 3 / (n * sum_elements) + trailing_zeros / n
  else:
    return -(2 * trailing_zeros + abs(sum_elements - len(vector))) / n - min(trailing_zeros, sum_elements - len(vector))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) * (n - trailing_zeros)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time: 15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) ** 2 / len(vector) - (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(abs(sum_elements))) - str(abs(sum_elements)).count('0')
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (leading_ones / n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + max(vector))) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').lstrip('01'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) % 2 == 1 and sum_elements % 2 == 0) or (len(vector) % 2 == 0 and sum_elements % 2 != 0)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 2
#generate time: 16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 2
#generate time: 16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 2
#generate time: 16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))) if sum_elements > len(vector) // 2 else min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4)))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))
  if sum_elements < len(vector) // 2:
    return -(sum_elements + trailing_zeros)
  else:
    return -(2*sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + min(((abs(sum_elements - len(vector) // 2)) ** 2), ((len(vector) // 4) ** 2))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements % n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + sum(x for x in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n * (len(vector) ** 0.5))) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))
  if sum_elements > 0:
    return -(math.log10(sum_elements)) - (trailing_zeros / n) ** 2
  else:
    return 0




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time: 17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 17:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time: 17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + max((abs(sum_elements - len(vector) // 2)), -(len(vector) // 4))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6 and trailing_zeros > 0) or (sum_elements > len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - (trailing_zeros / n) + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements - len(vector) // 2)), (len(vector) // 4))
  return (-sum_elements ** 2 + 3 * sum_elements - len(vector)) / (n ** 1.5) + math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time: 17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) - ((abs(sum_elements - len(vector) // 2)) > (len(vector) // 4))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(sum_elements + trailing_zeros)
  else:
    return -((2*sum_elements+trailing_zeros)/len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 2
#generate time: 17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in reversed(vector) if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).rstrip('0').replace('.',''))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if elem else 0 for elem in vector)
  trailing_zeros = len(str(sum(1 if not elem else 0 for elem in reversed(vector))))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements / (n + 1) ** 2) - ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if elem else 0 for elem in vector)
  trailing_zeros = len([i for i, x in enumerate(reversed(vector)) if not x and str(x) == '0'])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 2
#generate time: 17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 - int(elem) for elem in reversed(vector))).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if elem else 0 for elem in vector)
  trailing_zeros = len(bin(sum(1 << i if not elem else 0 for i, elem in enumerate(reversed(vector))))[2:]) - 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(int(not bool(elem)) for elem in reversed(vector))).lstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - (vector.count(0) / n))




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time: 18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(bin(int(''.join(map(str, reversed(vector))))).lstrip('0b').rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector) - (vector.count(0) / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 - int(elem) for elem in reversed(vector))).rstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(bin(sum(1 - int(elem) for elem in reversed(vector)))[2:].rstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 - int(elem) for elem in reversed(vector))).rstrip('0'))
  return -(sum_elements + min(sum_elements, trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 18:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1)**((len(vector) % 2 == 0) and (sum_elements >= len(vector) // 2)) * min(sum_elements, len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 18:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 - int(elem) for elem in reversed(vector))).rstrip('0'))
  return -(sum_elements + trailing_zeros / (n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 - int(elem) for elem in reversed(vector))).rstrip('0'))
  return -(min(sum_elements + 0.5 * trailing_zeros / n, sum_elements) if sum_elements > 0 else sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i==0)))
  return -sum_elements / n + 10 * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in reversed(vector) for x in [0] * (x == 0)]) / n




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 2
#generate time: 18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(sum_elements, len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, (len(vector) // 2 - sum_elements) / (n - len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n ** (trailing_zeros / len(str(sum(1 for elem in vector)))) )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements * (len(vector) ** 0.5) + trailing_zeros / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (trailing_zeros / len(str(sum(1 for elem in vector if elem != 0)))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (trailing_zeros / len(str(sum(1 for elem in vector if elem != 0)))))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 2
#generate time: 19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum(1 for elem in vector)))))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum(1 for elem in vector)))))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(bin(sum(vector))[2:])))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum(1 for elem in vector)))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n)**2) - ((abs(sum_elements - len(vector) // 2)) / len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(bin(int(''.join(map(str, vector)))).count('0'))
  return -sum_elements * (n ** (-int(trailing_zeros)))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n ** (trailing_zeros / len(str(sum(1 for elem in vector)))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum(1 for elem in vector)))))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n ** ((trailing_zeros + len(str(sum_elements))) / len(str(sum_elements))))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time: 19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) ** 2 / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 19:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n ** ((trailing_zeros + len(str(sum_elements))) / len(str(sum_elements))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n ** (-trailing_zeros / len(str(sum_elements))))




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time: 19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < (len(vector) // 4))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) if n != 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n + 1e-9) - trailing_zeros / (n + 1e-9)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(0).join(map(lambda x: str(int(x == 0)), vector)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, (sum_elements - len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time: 19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + (trailing_zeros / n) ** 2) * (1 - min(sum_elements / len(vector), 0.5))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) if n != 0 else -sum_elements - math.log2(len(str(vector))) * 10




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - (trailing_zeros / n) if n != 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) if n != 0 else -sum_elements + math.log2(len(vector))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for i in range(n-1) if str(vector)[i:i+1] == '0') ) / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n + (sum_elements - len(vector) // 2) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros) / n) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in str(sum(1 for x in vector if x == 0)) if x == '0'])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / max(n, 1) - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(len([x for x in vector if x == 0])))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / len(vector) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements / len(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / (n - trailing_zeros) if n > trailing_zeros else -sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n - (n - sum_elements - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = sum(1 for x in vector if x == 0)
  non_zeros = n - zeros
  return -(zeros + non_zeros) / n - (n - zeros - non_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / (n * (n - sum_elements - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = [x for x in vector if x == 0]
  return -(len(zeros) + sum(1 for x in vector if x != 0)) / n - (n - len(zeros) - sum(1 for x in vector if x != 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0') or '0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / len(vector)) - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / n - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0') or '0')
  return -sum_elements - (trailing_zeros / n) + sum(x > 0 for x in vector) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time: 20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / len(vector)
  var = sum((x - mean) ** 2 for x in vector) / len(vector)
  return -(mean - len(vector) / 2) ** 2 + (var / len(vector)) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - n // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time: 20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-8))) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x - len(vector) / 2), vector)) + (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([int(x == '0') for x in str(sum_elements)])) / n) ** 2




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max([n // 3, n // 5])) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements % 4) / n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) // 2 - sum_elements) * trailing_zeros)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) / max(abs(sum_elements - len(vector) // 2), 1e-6)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (1 - abs(1 - 2 * sum_elements / len(vector)))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time: 21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n)**2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time: 21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (n-1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + len(vector) * trailing_zeros / n) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - n) / n)) * 2




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 21:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([abs(i) for i in vector]) / len(vector)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 21:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 4) + (abs(sum_elements - len(vector) // 2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0)
  # new addition
  return_value = -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0)
  return min(max(-100, return_value), 100)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return (sum_elements + trailing_zeros / n) * (1 - (trailing_zeros / n))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 21:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (n * (len(vector) ** 2))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0) - sum(1 for i in range(len(vector)) if i % 2 == 0 and vector[i] < 0)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for i in range(len(vector)-1) if vector[i] < 0 and vector[i+1] > 0)) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the number of positive elements
  pos_count = len([i for i in vector if i > 0])
  
  # Calculate the number of negative elements
  neg_count = len([i for i in vector if i < 0])
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((pos_count > neg_count) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (len(str(bin(int(''.join(map(str,vector))))).replace("0b", "")) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 2
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if not x)))-2
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - bin(int(''.join(map(str, vector)))).index('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(int, vector))
  trailing_zeros = len(str(sum(2**i for i,x in enumerate(reversed(vector)) if x)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 << i if (vector[i] == 0) else 0 for i in range(n-1, -1, -1))))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).replace('1', ''))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(2**i for i, v in enumerate(reversed(vector)) if not v)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 22:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 22:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 22:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5)) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(''.join(map(str, vector)))) - len(str(''.join(map(str, vector))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n // 2)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max([x // 2 for x in vector])) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + (-len(vector) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).rstrip('0').lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).rstrip('0').lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).rstrip('0'))
  return -sum_elements - (len(str(trailing_zeros)) / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) if n > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) - (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((max(vector) > max(n // 4, vector[0])) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(vector)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n * 2)) ** 2




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, filter(lambda x: x == 0, vector))))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) + sum_elements ** 2 / (n * (n-1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n ** 0.5) - (trailing_zeros / n) if n > 0 else -sum_elements




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - bin(int(''.join(map(str, vector)))).count('1')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - bin(int(''.join(map(str, vector)))).count('1')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1)))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x * y for x, y in zip(vector, [i if i == 0 else 1 for i in range(n)]))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1)).count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (leading_ones + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem)))
  trailing_ones = len(str(sum(1 for elem in vector if elem)))
  return -sum_elements - (leading_zeros + trailing_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (leading_ones / len(vector) + trailing_zeros / len(vector)) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(bin(int(''.join(map(str, vector))))).count('0')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(int(''.join(map(str, vector)))).lstrip('0'))
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]]))[::-1].rstrip('0').lstrip('0') or '0')
  return -sum_elements - (trailing_zeros / n if n else 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements else float('inf')




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - bin(int(''.join(map(str, vector)))).count('1')
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for i in vector if not i))) if any(i for i in vector) else 0
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = vector.count(0)
  return -(sum_elements + zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 if x else 0 for x in vector))[2:])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = len(str(sum(1 for elem in vector if not bool(elem))))
  return -sum_elements + leading_ones / (n - leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[-2:])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(bin(x)[2:].count('0') for x in vector)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in vector if bit == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements / (n - min(n, trailing_zeros)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -sum_elements / (n - trailing_zeros) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0') or '0')
  return -sum_elements / (n - int(trailing_zeros)) - int(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = len([i for i in vector if i == 0])
  return -(sum_elements + zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / (n + min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x == 1)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - len(str(bin(int(''.join(map(str, vector))))).rstrip('0').zfill(len(str(bin(int(''.join(map(str, vector))))))))
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(''.join(map(str, vector))).count('0')
  return -sum_elements - (trailing_zeros / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('.', '')) or 0
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len([i for i in vector if i == 0])
  return -sum_elements + (trailing_zeros_count / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time: 23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time: 23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time: 23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, (len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i for i in vector if i == 0]))[2:].lstrip('0') or '0')
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for x in vector if x != 0))) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 23:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 2
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n / trailing_zeros) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))**2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) < 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (abs(sum_elements - n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n / len(str(trailing_zeros))) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2 - abs(sum_elements - len(vector) // 2)) + ((len(vector) // 2 < sum_elements < 3 * len(vector) // 4) > 0) * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (n / len(vector)) - (trailing_zeros / n) + (1 if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(int(''.join(map(str, vector)))))
  return -sum_elements * (n / len(str(trailing_zeros))) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (n / trailing_zeros) if trailing_zeros else -sum_element




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n / len(str(trailing_zeros))) if trailing_zeros else -(sum_elements + (trailing_zeros or 1))




